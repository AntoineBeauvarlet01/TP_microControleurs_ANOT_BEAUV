
TP_Syst_uC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005100  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08005290  08005290  00006290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005320  08005320  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005320  08005320  00006320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005328  08005328  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005328  08005328  00006328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800532c  0800532c  0000632c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005330  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  20000068  08005398  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  08005398  000072c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d020  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002069  00000000  00000000  000140b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc0  00000000  00000000  00016128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008f1  00000000  00000000  00016ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000271c8  00000000  00000000  000175d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ef07  00000000  00000000  0003e7a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb7ad  00000000  00000000  0004d6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00138e55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003698  00000000  00000000  00138e98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009b  00000000  00000000  0013c530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005278 	.word	0x08005278

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08005278 	.word	0x08005278

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08a      	sub	sp, #40	@ 0x28
 8000564:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000566:	f107 0314 	add.w	r3, r7, #20
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000576:	4b2b      	ldr	r3, [pc, #172]	@ (8000624 <MX_GPIO_Init+0xc4>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800057a:	4a2a      	ldr	r2, [pc, #168]	@ (8000624 <MX_GPIO_Init+0xc4>)
 800057c:	f043 0304 	orr.w	r3, r3, #4
 8000580:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000582:	4b28      	ldr	r3, [pc, #160]	@ (8000624 <MX_GPIO_Init+0xc4>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000586:	f003 0304 	and.w	r3, r3, #4
 800058a:	613b      	str	r3, [r7, #16]
 800058c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800058e:	4b25      	ldr	r3, [pc, #148]	@ (8000624 <MX_GPIO_Init+0xc4>)
 8000590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000592:	4a24      	ldr	r2, [pc, #144]	@ (8000624 <MX_GPIO_Init+0xc4>)
 8000594:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000598:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800059a:	4b22      	ldr	r3, [pc, #136]	@ (8000624 <MX_GPIO_Init+0xc4>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800059e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	4b1f      	ldr	r3, [pc, #124]	@ (8000624 <MX_GPIO_Init+0xc4>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005aa:	4a1e      	ldr	r2, [pc, #120]	@ (8000624 <MX_GPIO_Init+0xc4>)
 80005ac:	f043 0301 	orr.w	r3, r3, #1
 80005b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000624 <MX_GPIO_Init+0xc4>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005be:	4b19      	ldr	r3, [pc, #100]	@ (8000624 <MX_GPIO_Init+0xc4>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005c2:	4a18      	ldr	r2, [pc, #96]	@ (8000624 <MX_GPIO_Init+0xc4>)
 80005c4:	f043 0302 	orr.w	r3, r3, #2
 80005c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005ca:	4b16      	ldr	r3, [pc, #88]	@ (8000624 <MX_GPIO_Init+0xc4>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ce:	f003 0302 	and.w	r3, r3, #2
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2120      	movs	r1, #32
 80005da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005de:	f000 fe93 	bl	8001308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005e8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80005ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ee:	2300      	movs	r3, #0
 80005f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	4619      	mov	r1, r3
 80005f8:	480b      	ldr	r0, [pc, #44]	@ (8000628 <MX_GPIO_Init+0xc8>)
 80005fa:	f000 fcdb 	bl	8000fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005fe:	2320      	movs	r3, #32
 8000600:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000602:	2301      	movs	r3, #1
 8000604:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	2300      	movs	r3, #0
 8000608:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060a:	2300      	movs	r3, #0
 800060c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	4619      	mov	r1, r3
 8000614:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000618:	f000 fccc 	bl	8000fb4 <HAL_GPIO_Init>

}
 800061c:	bf00      	nop
 800061e:	3728      	adds	r7, #40	@ 0x28
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40021000 	.word	0x40021000
 8000628:	48000800 	.word	0x48000800

0800062c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&chr, 1, HAL_MAX_DELAY);
 8000634:	1d39      	adds	r1, r7, #4
 8000636:	f04f 33ff 	mov.w	r3, #4294967295
 800063a:	2201      	movs	r2, #1
 800063c:	4803      	ldr	r0, [pc, #12]	@ (800064c <__io_putchar+0x20>)
 800063e:	f003 f92f 	bl	80038a0 <HAL_UART_Transmit>
	return chr;
 8000642:	687b      	ldr	r3, [r7, #4]
}
 8000644:	4618      	mov	r0, r3
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	200000ec 	.word	0x200000ec

08000650 <SPI3_Write>:

void SPI3_Write(uint8_t data)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // CS LOW
 800065a:	2200      	movs	r2, #0
 800065c:	2140      	movs	r1, #64	@ 0x40
 800065e:	4809      	ldr	r0, [pc, #36]	@ (8000684 <SPI3_Write+0x34>)
 8000660:	f000 fe52 	bl	8001308 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &data, 1, HAL_MAX_DELAY);
 8000664:	1df9      	adds	r1, r7, #7
 8000666:	f04f 33ff 	mov.w	r3, #4294967295
 800066a:	2201      	movs	r2, #1
 800066c:	4806      	ldr	r0, [pc, #24]	@ (8000688 <SPI3_Write+0x38>)
 800066e:	f002 fa40 	bl	8002af2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // CS HIGH
 8000672:	2201      	movs	r2, #1
 8000674:	2140      	movs	r1, #64	@ 0x40
 8000676:	4803      	ldr	r0, [pc, #12]	@ (8000684 <SPI3_Write+0x34>)
 8000678:	f000 fe46 	bl	8001308 <HAL_GPIO_WritePin>
}
 800067c:	bf00      	nop
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	48000400 	.word	0x48000400
 8000688:	20000084 	.word	0x20000084

0800068c <SPI3_Read>:

uint8_t SPI3_Read()
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
	uint8_t receivedData = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // CS LOW
 8000696:	2200      	movs	r2, #0
 8000698:	2140      	movs	r1, #64	@ 0x40
 800069a:	480a      	ldr	r0, [pc, #40]	@ (80006c4 <SPI3_Read+0x38>)
 800069c:	f000 fe34 	bl	8001308 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi3, &receivedData, 1, HAL_MAX_DELAY);
 80006a0:	1df9      	adds	r1, r7, #7
 80006a2:	f04f 33ff 	mov.w	r3, #4294967295
 80006a6:	2201      	movs	r2, #1
 80006a8:	4807      	ldr	r0, [pc, #28]	@ (80006c8 <SPI3_Read+0x3c>)
 80006aa:	f002 fb98 	bl	8002dde <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // CS HIGH
 80006ae:	2201      	movs	r2, #1
 80006b0:	2140      	movs	r1, #64	@ 0x40
 80006b2:	4804      	ldr	r0, [pc, #16]	@ (80006c4 <SPI3_Read+0x38>)
 80006b4:	f000 fe28 	bl	8001308 <HAL_GPIO_WritePin>
	return receivedData;
 80006b8:	79fb      	ldrb	r3, [r7, #7]
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	48000400 	.word	0x48000400
 80006c8:	20000084 	.word	0x20000084

080006cc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006d2:	f000 fae9 	bl	8000ca8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006d6:	f000 f831 	bl	800073c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006da:	f7ff ff41 	bl	8000560 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80006de:	f000 fa2d 	bl	8000b3c <MX_USART2_UART_Init>
	MX_SPI3_Init();
 80006e2:	f000 f883 	bl	80007ec <MX_SPI3_Init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		//HAL_UART_Transmit(&huart2, "Hello world\r\n", 13, 100);
		printf("Hello world\r\n");
 80006e6:	4813      	ldr	r0, [pc, #76]	@ (8000734 <main+0x68>)
 80006e8:	f003 ff62 	bl	80045b0 <puts>
		HAL_Delay(1000);
 80006ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006f0:	f000 fb56 	bl	8000da0 <HAL_Delay>

		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80006f4:	2120      	movs	r1, #32
 80006f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006fa:	f000 fe1d 	bl	8001338 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 80006fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000702:	f000 fb4d 	bl	8000da0 <HAL_Delay>

		uint8_t tData = 0xFF;
 8000706:	23ff      	movs	r3, #255	@ 0xff
 8000708:	71fb      	strb	r3, [r7, #7]
		uint8_t rData = 0x00;
 800070a:	2300      	movs	r3, #0
 800070c:	71bb      	strb	r3, [r7, #6]

		SPI3_Write(tData);
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff ff9d 	bl	8000650 <SPI3_Write>
		HAL_Delay(1000);
 8000716:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800071a:	f000 fb41 	bl	8000da0 <HAL_Delay>
		rData = SPI3_Read();
 800071e:	f7ff ffb5 	bl	800068c <SPI3_Read>
 8000722:	4603      	mov	r3, r0
 8000724:	71bb      	strb	r3, [r7, #6]

		printf("%x", rData);
 8000726:	79bb      	ldrb	r3, [r7, #6]
 8000728:	4619      	mov	r1, r3
 800072a:	4803      	ldr	r0, [pc, #12]	@ (8000738 <main+0x6c>)
 800072c:	f003 fed8 	bl	80044e0 <iprintf>
	{
 8000730:	bf00      	nop
 8000732:	e7d8      	b.n	80006e6 <main+0x1a>
 8000734:	08005290 	.word	0x08005290
 8000738:	080052a0 	.word	0x080052a0

0800073c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b096      	sub	sp, #88	@ 0x58
 8000740:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000742:	f107 0314 	add.w	r3, r7, #20
 8000746:	2244      	movs	r2, #68	@ 0x44
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f004 f810 	bl	8004770 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000750:	463b      	mov	r3, r7
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800075e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000762:	f000 fe11 	bl	8001388 <HAL_PWREx_ControlVoltageScaling>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0x34>
	{
		Error_Handler();
 800076c:	f000 f837 	bl	80007de <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000770:	2302      	movs	r3, #2
 8000772:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000774:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000778:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800077a:	2310      	movs	r3, #16
 800077c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077e:	2302      	movs	r3, #2
 8000780:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000782:	2302      	movs	r3, #2
 8000784:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000786:	2301      	movs	r3, #1
 8000788:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 800078a:	230a      	movs	r3, #10
 800078c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800078e:	2307      	movs	r3, #7
 8000790:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000792:	2302      	movs	r3, #2
 8000794:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000796:	2302      	movs	r3, #2
 8000798:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079a:	f107 0314 	add.w	r3, r7, #20
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 fe48 	bl	8001434 <HAL_RCC_OscConfig>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <SystemClock_Config+0x72>
	{
		Error_Handler();
 80007aa:	f000 f818 	bl	80007de <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ae:	230f      	movs	r3, #15
 80007b0:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b2:	2303      	movs	r3, #3
 80007b4:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b6:	2300      	movs	r3, #0
 80007b8:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ba:	2300      	movs	r3, #0
 80007bc:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007be:	2300      	movs	r3, #0
 80007c0:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007c2:	463b      	mov	r3, r7
 80007c4:	2104      	movs	r1, #4
 80007c6:	4618      	mov	r0, r3
 80007c8:	f001 fa10 	bl	8001bec <HAL_RCC_ClockConfig>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <SystemClock_Config+0x9a>
	{
		Error_Handler();
 80007d2:	f000 f804 	bl	80007de <Error_Handler>
	}
}
 80007d6:	bf00      	nop
 80007d8:	3758      	adds	r7, #88	@ 0x58
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e2:	b672      	cpsid	i
}
 80007e4:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80007e6:	bf00      	nop
 80007e8:	e7fd      	b.n	80007e6 <Error_Handler+0x8>
	...

080007ec <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80007f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000860 <MX_SPI3_Init+0x74>)
 80007f2:	4a1c      	ldr	r2, [pc, #112]	@ (8000864 <MX_SPI3_Init+0x78>)
 80007f4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000860 <MX_SPI3_Init+0x74>)
 80007f8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007fc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80007fe:	4b18      	ldr	r3, [pc, #96]	@ (8000860 <MX_SPI3_Init+0x74>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000804:	4b16      	ldr	r3, [pc, #88]	@ (8000860 <MX_SPI3_Init+0x74>)
 8000806:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800080a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800080c:	4b14      	ldr	r3, [pc, #80]	@ (8000860 <MX_SPI3_Init+0x74>)
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000812:	4b13      	ldr	r3, [pc, #76]	@ (8000860 <MX_SPI3_Init+0x74>)
 8000814:	2200      	movs	r2, #0
 8000816:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000818:	4b11      	ldr	r3, [pc, #68]	@ (8000860 <MX_SPI3_Init+0x74>)
 800081a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800081e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000820:	4b0f      	ldr	r3, [pc, #60]	@ (8000860 <MX_SPI3_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000826:	4b0e      	ldr	r3, [pc, #56]	@ (8000860 <MX_SPI3_Init+0x74>)
 8000828:	2200      	movs	r2, #0
 800082a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800082c:	4b0c      	ldr	r3, [pc, #48]	@ (8000860 <MX_SPI3_Init+0x74>)
 800082e:	2200      	movs	r2, #0
 8000830:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000832:	4b0b      	ldr	r3, [pc, #44]	@ (8000860 <MX_SPI3_Init+0x74>)
 8000834:	2200      	movs	r2, #0
 8000836:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000838:	4b09      	ldr	r3, [pc, #36]	@ (8000860 <MX_SPI3_Init+0x74>)
 800083a:	2207      	movs	r2, #7
 800083c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800083e:	4b08      	ldr	r3, [pc, #32]	@ (8000860 <MX_SPI3_Init+0x74>)
 8000840:	2200      	movs	r2, #0
 8000842:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000844:	4b06      	ldr	r3, [pc, #24]	@ (8000860 <MX_SPI3_Init+0x74>)
 8000846:	2208      	movs	r2, #8
 8000848:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800084a:	4805      	ldr	r0, [pc, #20]	@ (8000860 <MX_SPI3_Init+0x74>)
 800084c:	f002 f8ae 	bl	80029ac <HAL_SPI_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000856:	f7ff ffc2 	bl	80007de <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000084 	.word	0x20000084
 8000864:	40003c00 	.word	0x40003c00

08000868 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08a      	sub	sp, #40	@ 0x28
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
 800087e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a25      	ldr	r2, [pc, #148]	@ (800091c <HAL_SPI_MspInit+0xb4>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d144      	bne.n	8000914 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800088a:	4b25      	ldr	r3, [pc, #148]	@ (8000920 <HAL_SPI_MspInit+0xb8>)
 800088c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800088e:	4a24      	ldr	r2, [pc, #144]	@ (8000920 <HAL_SPI_MspInit+0xb8>)
 8000890:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000894:	6593      	str	r3, [r2, #88]	@ 0x58
 8000896:	4b22      	ldr	r3, [pc, #136]	@ (8000920 <HAL_SPI_MspInit+0xb8>)
 8000898:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800089a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800089e:	613b      	str	r3, [r7, #16]
 80008a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a2:	4b1f      	ldr	r3, [pc, #124]	@ (8000920 <HAL_SPI_MspInit+0xb8>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a6:	4a1e      	ldr	r2, [pc, #120]	@ (8000920 <HAL_SPI_MspInit+0xb8>)
 80008a8:	f043 0304 	orr.w	r3, r3, #4
 80008ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ae:	4b1c      	ldr	r3, [pc, #112]	@ (8000920 <HAL_SPI_MspInit+0xb8>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008b2:	f003 0304 	and.w	r3, r3, #4
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ba:	4b19      	ldr	r3, [pc, #100]	@ (8000920 <HAL_SPI_MspInit+0xb8>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008be:	4a18      	ldr	r2, [pc, #96]	@ (8000920 <HAL_SPI_MspInit+0xb8>)
 80008c0:	f043 0302 	orr.w	r3, r3, #2
 80008c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008c6:	4b16      	ldr	r3, [pc, #88]	@ (8000920 <HAL_SPI_MspInit+0xb8>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ca:	f003 0302 	and.w	r3, r3, #2
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80008d2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80008d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d8:	2302      	movs	r3, #2
 80008da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e0:	2303      	movs	r3, #3
 80008e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008e4:	2306      	movs	r3, #6
 80008e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	4619      	mov	r1, r3
 80008ee:	480d      	ldr	r0, [pc, #52]	@ (8000924 <HAL_SPI_MspInit+0xbc>)
 80008f0:	f000 fb60 	bl	8000fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80008f4:	2320      	movs	r3, #32
 80008f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f8:	2302      	movs	r3, #2
 80008fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000900:	2303      	movs	r3, #3
 8000902:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000904:	2306      	movs	r3, #6
 8000906:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	4619      	mov	r1, r3
 800090e:	4806      	ldr	r0, [pc, #24]	@ (8000928 <HAL_SPI_MspInit+0xc0>)
 8000910:	f000 fb50 	bl	8000fb4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000914:	bf00      	nop
 8000916:	3728      	adds	r7, #40	@ 0x28
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40003c00 	.word	0x40003c00
 8000920:	40021000 	.word	0x40021000
 8000924:	48000800 	.word	0x48000800
 8000928:	48000400 	.word	0x48000400

0800092c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000932:	4b0f      	ldr	r3, [pc, #60]	@ (8000970 <HAL_MspInit+0x44>)
 8000934:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000936:	4a0e      	ldr	r2, [pc, #56]	@ (8000970 <HAL_MspInit+0x44>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	6613      	str	r3, [r2, #96]	@ 0x60
 800093e:	4b0c      	ldr	r3, [pc, #48]	@ (8000970 <HAL_MspInit+0x44>)
 8000940:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094a:	4b09      	ldr	r3, [pc, #36]	@ (8000970 <HAL_MspInit+0x44>)
 800094c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800094e:	4a08      	ldr	r2, [pc, #32]	@ (8000970 <HAL_MspInit+0x44>)
 8000950:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000954:	6593      	str	r3, [r2, #88]	@ 0x58
 8000956:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <HAL_MspInit+0x44>)
 8000958:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800095a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800095e:	603b      	str	r3, [r7, #0]
 8000960:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000962:	bf00      	nop
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	40021000 	.word	0x40021000

08000974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000978:	bf00      	nop
 800097a:	e7fd      	b.n	8000978 <NMI_Handler+0x4>

0800097c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <HardFault_Handler+0x4>

08000984 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000988:	bf00      	nop
 800098a:	e7fd      	b.n	8000988 <MemManage_Handler+0x4>

0800098c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000990:	bf00      	nop
 8000992:	e7fd      	b.n	8000990 <BusFault_Handler+0x4>

08000994 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000998:	bf00      	nop
 800099a:	e7fd      	b.n	8000998 <UsageFault_Handler+0x4>

0800099c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr

080009c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ca:	f000 f9c9 	bl	8000d60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009d2:	b580      	push	{r7, lr}
 80009d4:	b086      	sub	sp, #24
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	60f8      	str	r0, [r7, #12]
 80009da:	60b9      	str	r1, [r7, #8]
 80009dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009de:	2300      	movs	r3, #0
 80009e0:	617b      	str	r3, [r7, #20]
 80009e2:	e00a      	b.n	80009fa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009e4:	f3af 8000 	nop.w
 80009e8:	4601      	mov	r1, r0
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	1c5a      	adds	r2, r3, #1
 80009ee:	60ba      	str	r2, [r7, #8]
 80009f0:	b2ca      	uxtb	r2, r1
 80009f2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	3301      	adds	r3, #1
 80009f8:	617b      	str	r3, [r7, #20]
 80009fa:	697a      	ldr	r2, [r7, #20]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	429a      	cmp	r2, r3
 8000a00:	dbf0      	blt.n	80009e4 <_read+0x12>
  }

  return len;
 8000a02:	687b      	ldr	r3, [r7, #4]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3718      	adds	r7, #24
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b086      	sub	sp, #24
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]
 8000a1c:	e009      	b.n	8000a32 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	1c5a      	adds	r2, r3, #1
 8000a22:	60ba      	str	r2, [r7, #8]
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	4618      	mov	r0, r3
 8000a28:	f7ff fe00 	bl	800062c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	617b      	str	r3, [r7, #20]
 8000a32:	697a      	ldr	r2, [r7, #20]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	429a      	cmp	r2, r3
 8000a38:	dbf1      	blt.n	8000a1e <_write+0x12>
  }
  return len;
 8000a3a:	687b      	ldr	r3, [r7, #4]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3718      	adds	r7, #24
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <_close>:

int _close(int file)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr

08000a5c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a6c:	605a      	str	r2, [r3, #4]
  return 0;
 8000a6e:	2300      	movs	r3, #0
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <_isatty>:

int _isatty(int file)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a84:	2301      	movs	r3, #1
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a92:	b480      	push	{r7}
 8000a94:	b085      	sub	sp, #20
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	60f8      	str	r0, [r7, #12]
 8000a9a:	60b9      	str	r1, [r7, #8]
 8000a9c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a9e:	2300      	movs	r3, #0
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3714      	adds	r7, #20
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b086      	sub	sp, #24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ab4:	4a14      	ldr	r2, [pc, #80]	@ (8000b08 <_sbrk+0x5c>)
 8000ab6:	4b15      	ldr	r3, [pc, #84]	@ (8000b0c <_sbrk+0x60>)
 8000ab8:	1ad3      	subs	r3, r2, r3
 8000aba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ac0:	4b13      	ldr	r3, [pc, #76]	@ (8000b10 <_sbrk+0x64>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d102      	bne.n	8000ace <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ac8:	4b11      	ldr	r3, [pc, #68]	@ (8000b10 <_sbrk+0x64>)
 8000aca:	4a12      	ldr	r2, [pc, #72]	@ (8000b14 <_sbrk+0x68>)
 8000acc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ace:	4b10      	ldr	r3, [pc, #64]	@ (8000b10 <_sbrk+0x64>)
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	d207      	bcs.n	8000aec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000adc:	f003 fe96 	bl	800480c <__errno>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	220c      	movs	r2, #12
 8000ae4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aea:	e009      	b.n	8000b00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000aec:	4b08      	ldr	r3, [pc, #32]	@ (8000b10 <_sbrk+0x64>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000af2:	4b07      	ldr	r3, [pc, #28]	@ (8000b10 <_sbrk+0x64>)
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4413      	add	r3, r2
 8000afa:	4a05      	ldr	r2, [pc, #20]	@ (8000b10 <_sbrk+0x64>)
 8000afc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000afe:	68fb      	ldr	r3, [r7, #12]
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3718      	adds	r7, #24
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20018000 	.word	0x20018000
 8000b0c:	00000400 	.word	0x00000400
 8000b10:	200000e8 	.word	0x200000e8
 8000b14:	200002c8 	.word	0x200002c8

08000b18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b1c:	4b06      	ldr	r3, [pc, #24]	@ (8000b38 <SystemInit+0x20>)
 8000b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b22:	4a05      	ldr	r2, [pc, #20]	@ (8000b38 <SystemInit+0x20>)
 8000b24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b40:	4b14      	ldr	r3, [pc, #80]	@ (8000b94 <MX_USART2_UART_Init+0x58>)
 8000b42:	4a15      	ldr	r2, [pc, #84]	@ (8000b98 <MX_USART2_UART_Init+0x5c>)
 8000b44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b46:	4b13      	ldr	r3, [pc, #76]	@ (8000b94 <MX_USART2_UART_Init+0x58>)
 8000b48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b4e:	4b11      	ldr	r3, [pc, #68]	@ (8000b94 <MX_USART2_UART_Init+0x58>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b54:	4b0f      	ldr	r3, [pc, #60]	@ (8000b94 <MX_USART2_UART_Init+0x58>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b94 <MX_USART2_UART_Init+0x58>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b60:	4b0c      	ldr	r3, [pc, #48]	@ (8000b94 <MX_USART2_UART_Init+0x58>)
 8000b62:	220c      	movs	r2, #12
 8000b64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b66:	4b0b      	ldr	r3, [pc, #44]	@ (8000b94 <MX_USART2_UART_Init+0x58>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b6c:	4b09      	ldr	r3, [pc, #36]	@ (8000b94 <MX_USART2_UART_Init+0x58>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b72:	4b08      	ldr	r3, [pc, #32]	@ (8000b94 <MX_USART2_UART_Init+0x58>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b78:	4b06      	ldr	r3, [pc, #24]	@ (8000b94 <MX_USART2_UART_Init+0x58>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b7e:	4805      	ldr	r0, [pc, #20]	@ (8000b94 <MX_USART2_UART_Init+0x58>)
 8000b80:	f002 fe40 	bl	8003804 <HAL_UART_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b8a:	f7ff fe28 	bl	80007de <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	200000ec 	.word	0x200000ec
 8000b98:	40004400 	.word	0x40004400

08000b9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b0ac      	sub	sp, #176	@ 0xb0
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	2288      	movs	r2, #136	@ 0x88
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f003 fdd7 	bl	8004770 <memset>
  if(uartHandle->Instance==USART2)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a21      	ldr	r2, [pc, #132]	@ (8000c4c <HAL_UART_MspInit+0xb0>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d13b      	bne.n	8000c44 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f001 fa2b 	bl	8002034 <HAL_RCCEx_PeriphCLKConfig>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000be4:	f7ff fdfb 	bl	80007de <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000be8:	4b19      	ldr	r3, [pc, #100]	@ (8000c50 <HAL_UART_MspInit+0xb4>)
 8000bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bec:	4a18      	ldr	r2, [pc, #96]	@ (8000c50 <HAL_UART_MspInit+0xb4>)
 8000bee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bf2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bf4:	4b16      	ldr	r3, [pc, #88]	@ (8000c50 <HAL_UART_MspInit+0xb4>)
 8000bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bfc:	613b      	str	r3, [r7, #16]
 8000bfe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c00:	4b13      	ldr	r3, [pc, #76]	@ (8000c50 <HAL_UART_MspInit+0xb4>)
 8000c02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c04:	4a12      	ldr	r2, [pc, #72]	@ (8000c50 <HAL_UART_MspInit+0xb4>)
 8000c06:	f043 0301 	orr.w	r3, r3, #1
 8000c0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c0c:	4b10      	ldr	r3, [pc, #64]	@ (8000c50 <HAL_UART_MspInit+0xb4>)
 8000c0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c10:	f003 0301 	and.w	r3, r3, #1
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c18:	230c      	movs	r3, #12
 8000c1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c30:	2307      	movs	r3, #7
 8000c32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c36:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c40:	f000 f9b8 	bl	8000fb4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c44:	bf00      	nop
 8000c46:	37b0      	adds	r7, #176	@ 0xb0
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40004400 	.word	0x40004400
 8000c50:	40021000 	.word	0x40021000

08000c54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c8c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c58:	f7ff ff5e 	bl	8000b18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c5c:	480c      	ldr	r0, [pc, #48]	@ (8000c90 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c5e:	490d      	ldr	r1, [pc, #52]	@ (8000c94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c60:	4a0d      	ldr	r2, [pc, #52]	@ (8000c98 <LoopForever+0xe>)
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c64:	e002      	b.n	8000c6c <LoopCopyDataInit>

08000c66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6a:	3304      	adds	r3, #4

08000c6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c70:	d3f9      	bcc.n	8000c66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c72:	4a0a      	ldr	r2, [pc, #40]	@ (8000c9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c74:	4c0a      	ldr	r4, [pc, #40]	@ (8000ca0 <LoopForever+0x16>)
  movs r3, #0
 8000c76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c78:	e001      	b.n	8000c7e <LoopFillZerobss>

08000c7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c7c:	3204      	adds	r2, #4

08000c7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c80:	d3fb      	bcc.n	8000c7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c82:	f003 fdc9 	bl	8004818 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c86:	f7ff fd21 	bl	80006cc <main>

08000c8a <LoopForever>:

LoopForever:
    b LoopForever
 8000c8a:	e7fe      	b.n	8000c8a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c8c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c94:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c98:	08005330 	.word	0x08005330
  ldr r2, =_sbss
 8000c9c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ca0:	200002c4 	.word	0x200002c4

08000ca4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ca4:	e7fe      	b.n	8000ca4 <ADC1_2_IRQHandler>
	...

08000ca8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce4 <HAL_Init+0x3c>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a0b      	ldr	r2, [pc, #44]	@ (8000ce4 <HAL_Init+0x3c>)
 8000cb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cbc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cbe:	2003      	movs	r0, #3
 8000cc0:	f000 f944 	bl	8000f4c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cc4:	2000      	movs	r0, #0
 8000cc6:	f000 f80f 	bl	8000ce8 <HAL_InitTick>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d002      	beq.n	8000cd6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	71fb      	strb	r3, [r7, #7]
 8000cd4:	e001      	b.n	8000cda <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cd6:	f7ff fe29 	bl	800092c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cda:	79fb      	ldrb	r3, [r7, #7]
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40022000 	.word	0x40022000

08000ce8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000cf4:	4b17      	ldr	r3, [pc, #92]	@ (8000d54 <HAL_InitTick+0x6c>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d023      	beq.n	8000d44 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000cfc:	4b16      	ldr	r3, [pc, #88]	@ (8000d58 <HAL_InitTick+0x70>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	4b14      	ldr	r3, [pc, #80]	@ (8000d54 <HAL_InitTick+0x6c>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	4619      	mov	r1, r3
 8000d06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d12:	4618      	mov	r0, r3
 8000d14:	f000 f941 	bl	8000f9a <HAL_SYSTICK_Config>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d10f      	bne.n	8000d3e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2b0f      	cmp	r3, #15
 8000d22:	d809      	bhi.n	8000d38 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d24:	2200      	movs	r2, #0
 8000d26:	6879      	ldr	r1, [r7, #4]
 8000d28:	f04f 30ff 	mov.w	r0, #4294967295
 8000d2c:	f000 f919 	bl	8000f62 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d30:	4a0a      	ldr	r2, [pc, #40]	@ (8000d5c <HAL_InitTick+0x74>)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6013      	str	r3, [r2, #0]
 8000d36:	e007      	b.n	8000d48 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	73fb      	strb	r3, [r7, #15]
 8000d3c:	e004      	b.n	8000d48 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	73fb      	strb	r3, [r7, #15]
 8000d42:	e001      	b.n	8000d48 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d44:	2301      	movs	r3, #1
 8000d46:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000008 	.word	0x20000008
 8000d58:	20000000 	.word	0x20000000
 8000d5c:	20000004 	.word	0x20000004

08000d60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d64:	4b06      	ldr	r3, [pc, #24]	@ (8000d80 <HAL_IncTick+0x20>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	461a      	mov	r2, r3
 8000d6a:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <HAL_IncTick+0x24>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4413      	add	r3, r2
 8000d70:	4a04      	ldr	r2, [pc, #16]	@ (8000d84 <HAL_IncTick+0x24>)
 8000d72:	6013      	str	r3, [r2, #0]
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	20000008 	.word	0x20000008
 8000d84:	20000174 	.word	0x20000174

08000d88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d8c:	4b03      	ldr	r3, [pc, #12]	@ (8000d9c <HAL_GetTick+0x14>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	20000174 	.word	0x20000174

08000da0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000da8:	f7ff ffee 	bl	8000d88 <HAL_GetTick>
 8000dac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000db8:	d005      	beq.n	8000dc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000dba:	4b0a      	ldr	r3, [pc, #40]	@ (8000de4 <HAL_Delay+0x44>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dc6:	bf00      	nop
 8000dc8:	f7ff ffde 	bl	8000d88 <HAL_GetTick>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	68fa      	ldr	r2, [r7, #12]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d8f7      	bhi.n	8000dc8 <HAL_Delay+0x28>
  {
  }
}
 8000dd8:	bf00      	nop
 8000dda:	bf00      	nop
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000008 	.word	0x20000008

08000de8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f003 0307 	and.w	r3, r3, #7
 8000df6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000df8:	4b0c      	ldr	r3, [pc, #48]	@ (8000e2c <__NVIC_SetPriorityGrouping+0x44>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dfe:	68ba      	ldr	r2, [r7, #8]
 8000e00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e04:	4013      	ands	r3, r2
 8000e06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e1a:	4a04      	ldr	r2, [pc, #16]	@ (8000e2c <__NVIC_SetPriorityGrouping+0x44>)
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	60d3      	str	r3, [r2, #12]
}
 8000e20:	bf00      	nop
 8000e22:	3714      	adds	r7, #20
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e34:	4b04      	ldr	r3, [pc, #16]	@ (8000e48 <__NVIC_GetPriorityGrouping+0x18>)
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	0a1b      	lsrs	r3, r3, #8
 8000e3a:	f003 0307 	and.w	r3, r3, #7
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	6039      	str	r1, [r7, #0]
 8000e56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	db0a      	blt.n	8000e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	b2da      	uxtb	r2, r3
 8000e64:	490c      	ldr	r1, [pc, #48]	@ (8000e98 <__NVIC_SetPriority+0x4c>)
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	0112      	lsls	r2, r2, #4
 8000e6c:	b2d2      	uxtb	r2, r2
 8000e6e:	440b      	add	r3, r1
 8000e70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e74:	e00a      	b.n	8000e8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	4908      	ldr	r1, [pc, #32]	@ (8000e9c <__NVIC_SetPriority+0x50>)
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	f003 030f 	and.w	r3, r3, #15
 8000e82:	3b04      	subs	r3, #4
 8000e84:	0112      	lsls	r2, r2, #4
 8000e86:	b2d2      	uxtb	r2, r2
 8000e88:	440b      	add	r3, r1
 8000e8a:	761a      	strb	r2, [r3, #24]
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000e100 	.word	0xe000e100
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b089      	sub	sp, #36	@ 0x24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	f1c3 0307 	rsb	r3, r3, #7
 8000eba:	2b04      	cmp	r3, #4
 8000ebc:	bf28      	it	cs
 8000ebe:	2304      	movcs	r3, #4
 8000ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	3304      	adds	r3, #4
 8000ec6:	2b06      	cmp	r3, #6
 8000ec8:	d902      	bls.n	8000ed0 <NVIC_EncodePriority+0x30>
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	3b03      	subs	r3, #3
 8000ece:	e000      	b.n	8000ed2 <NVIC_EncodePriority+0x32>
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43da      	mvns	r2, r3
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	401a      	ands	r2, r3
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef2:	43d9      	mvns	r1, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef8:	4313      	orrs	r3, r2
         );
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3724      	adds	r7, #36	@ 0x24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
	...

08000f08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f18:	d301      	bcc.n	8000f1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e00f      	b.n	8000f3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f48 <SysTick_Config+0x40>)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f26:	210f      	movs	r1, #15
 8000f28:	f04f 30ff 	mov.w	r0, #4294967295
 8000f2c:	f7ff ff8e 	bl	8000e4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f30:	4b05      	ldr	r3, [pc, #20]	@ (8000f48 <SysTick_Config+0x40>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f36:	4b04      	ldr	r3, [pc, #16]	@ (8000f48 <SysTick_Config+0x40>)
 8000f38:	2207      	movs	r2, #7
 8000f3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	e000e010 	.word	0xe000e010

08000f4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f7ff ff47 	bl	8000de8 <__NVIC_SetPriorityGrouping>
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b086      	sub	sp, #24
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	4603      	mov	r3, r0
 8000f6a:	60b9      	str	r1, [r7, #8]
 8000f6c:	607a      	str	r2, [r7, #4]
 8000f6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f74:	f7ff ff5c 	bl	8000e30 <__NVIC_GetPriorityGrouping>
 8000f78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	68b9      	ldr	r1, [r7, #8]
 8000f7e:	6978      	ldr	r0, [r7, #20]
 8000f80:	f7ff ff8e 	bl	8000ea0 <NVIC_EncodePriority>
 8000f84:	4602      	mov	r2, r0
 8000f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f8a:	4611      	mov	r1, r2
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff ff5d 	bl	8000e4c <__NVIC_SetPriority>
}
 8000f92:	bf00      	nop
 8000f94:	3718      	adds	r7, #24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f7ff ffb0 	bl	8000f08 <SysTick_Config>
 8000fa8:	4603      	mov	r3, r0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b087      	sub	sp, #28
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fc2:	e17f      	b.n	80012c4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	2101      	movs	r1, #1
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	f000 8171 	beq.w	80012be <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f003 0303 	and.w	r3, r3, #3
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d005      	beq.n	8000ff4 <HAL_GPIO_Init+0x40>
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f003 0303 	and.w	r3, r3, #3
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d130      	bne.n	8001056 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	2203      	movs	r2, #3
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	43db      	mvns	r3, r3
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	4013      	ands	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	68da      	ldr	r2, [r3, #12]
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	4313      	orrs	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800102a:	2201      	movs	r2, #1
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43db      	mvns	r3, r3
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	4013      	ands	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	091b      	lsrs	r3, r3, #4
 8001040:	f003 0201 	and.w	r2, r3, #1
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	4313      	orrs	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f003 0303 	and.w	r3, r3, #3
 800105e:	2b03      	cmp	r3, #3
 8001060:	d118      	bne.n	8001094 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001066:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001068:	2201      	movs	r2, #1
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	08db      	lsrs	r3, r3, #3
 800107e:	f003 0201 	and.w	r2, r3, #1
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4313      	orrs	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f003 0303 	and.w	r3, r3, #3
 800109c:	2b03      	cmp	r3, #3
 800109e:	d017      	beq.n	80010d0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	2203      	movs	r2, #3
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	43db      	mvns	r3, r3
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4013      	ands	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	689a      	ldr	r2, [r3, #8]
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f003 0303 	and.w	r3, r3, #3
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d123      	bne.n	8001124 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	08da      	lsrs	r2, r3, #3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3208      	adds	r2, #8
 80010e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	f003 0307 	and.w	r3, r3, #7
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	220f      	movs	r2, #15
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	4013      	ands	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	691a      	ldr	r2, [r3, #16]
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	f003 0307 	and.w	r3, r3, #7
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	4313      	orrs	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	08da      	lsrs	r2, r3, #3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	3208      	adds	r2, #8
 800111e:	6939      	ldr	r1, [r7, #16]
 8001120:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	2203      	movs	r2, #3
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4013      	ands	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f003 0203 	and.w	r2, r3, #3
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	4313      	orrs	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001160:	2b00      	cmp	r3, #0
 8001162:	f000 80ac 	beq.w	80012be <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001166:	4b5f      	ldr	r3, [pc, #380]	@ (80012e4 <HAL_GPIO_Init+0x330>)
 8001168:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800116a:	4a5e      	ldr	r2, [pc, #376]	@ (80012e4 <HAL_GPIO_Init+0x330>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	6613      	str	r3, [r2, #96]	@ 0x60
 8001172:	4b5c      	ldr	r3, [pc, #368]	@ (80012e4 <HAL_GPIO_Init+0x330>)
 8001174:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	60bb      	str	r3, [r7, #8]
 800117c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800117e:	4a5a      	ldr	r2, [pc, #360]	@ (80012e8 <HAL_GPIO_Init+0x334>)
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	089b      	lsrs	r3, r3, #2
 8001184:	3302      	adds	r3, #2
 8001186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800118a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	f003 0303 	and.w	r3, r3, #3
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	220f      	movs	r2, #15
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43db      	mvns	r3, r3
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	4013      	ands	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80011a8:	d025      	beq.n	80011f6 <HAL_GPIO_Init+0x242>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a4f      	ldr	r2, [pc, #316]	@ (80012ec <HAL_GPIO_Init+0x338>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d01f      	beq.n	80011f2 <HAL_GPIO_Init+0x23e>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a4e      	ldr	r2, [pc, #312]	@ (80012f0 <HAL_GPIO_Init+0x33c>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d019      	beq.n	80011ee <HAL_GPIO_Init+0x23a>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a4d      	ldr	r2, [pc, #308]	@ (80012f4 <HAL_GPIO_Init+0x340>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d013      	beq.n	80011ea <HAL_GPIO_Init+0x236>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a4c      	ldr	r2, [pc, #304]	@ (80012f8 <HAL_GPIO_Init+0x344>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d00d      	beq.n	80011e6 <HAL_GPIO_Init+0x232>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a4b      	ldr	r2, [pc, #300]	@ (80012fc <HAL_GPIO_Init+0x348>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d007      	beq.n	80011e2 <HAL_GPIO_Init+0x22e>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a4a      	ldr	r2, [pc, #296]	@ (8001300 <HAL_GPIO_Init+0x34c>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d101      	bne.n	80011de <HAL_GPIO_Init+0x22a>
 80011da:	2306      	movs	r3, #6
 80011dc:	e00c      	b.n	80011f8 <HAL_GPIO_Init+0x244>
 80011de:	2307      	movs	r3, #7
 80011e0:	e00a      	b.n	80011f8 <HAL_GPIO_Init+0x244>
 80011e2:	2305      	movs	r3, #5
 80011e4:	e008      	b.n	80011f8 <HAL_GPIO_Init+0x244>
 80011e6:	2304      	movs	r3, #4
 80011e8:	e006      	b.n	80011f8 <HAL_GPIO_Init+0x244>
 80011ea:	2303      	movs	r3, #3
 80011ec:	e004      	b.n	80011f8 <HAL_GPIO_Init+0x244>
 80011ee:	2302      	movs	r3, #2
 80011f0:	e002      	b.n	80011f8 <HAL_GPIO_Init+0x244>
 80011f2:	2301      	movs	r3, #1
 80011f4:	e000      	b.n	80011f8 <HAL_GPIO_Init+0x244>
 80011f6:	2300      	movs	r3, #0
 80011f8:	697a      	ldr	r2, [r7, #20]
 80011fa:	f002 0203 	and.w	r2, r2, #3
 80011fe:	0092      	lsls	r2, r2, #2
 8001200:	4093      	lsls	r3, r2
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	4313      	orrs	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001208:	4937      	ldr	r1, [pc, #220]	@ (80012e8 <HAL_GPIO_Init+0x334>)
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	089b      	lsrs	r3, r3, #2
 800120e:	3302      	adds	r3, #2
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001216:	4b3b      	ldr	r3, [pc, #236]	@ (8001304 <HAL_GPIO_Init+0x350>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	43db      	mvns	r3, r3
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	4013      	ands	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d003      	beq.n	800123a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4313      	orrs	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800123a:	4a32      	ldr	r2, [pc, #200]	@ (8001304 <HAL_GPIO_Init+0x350>)
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001240:	4b30      	ldr	r3, [pc, #192]	@ (8001304 <HAL_GPIO_Init+0x350>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	43db      	mvns	r3, r3
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	4013      	ands	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d003      	beq.n	8001264 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	4313      	orrs	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001264:	4a27      	ldr	r2, [pc, #156]	@ (8001304 <HAL_GPIO_Init+0x350>)
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800126a:	4b26      	ldr	r3, [pc, #152]	@ (8001304 <HAL_GPIO_Init+0x350>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	43db      	mvns	r3, r3
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	4013      	ands	r3, r2
 8001278:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d003      	beq.n	800128e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	4313      	orrs	r3, r2
 800128c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800128e:	4a1d      	ldr	r2, [pc, #116]	@ (8001304 <HAL_GPIO_Init+0x350>)
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001294:	4b1b      	ldr	r3, [pc, #108]	@ (8001304 <HAL_GPIO_Init+0x350>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	43db      	mvns	r3, r3
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	4013      	ands	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d003      	beq.n	80012b8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012b8:	4a12      	ldr	r2, [pc, #72]	@ (8001304 <HAL_GPIO_Init+0x350>)
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	3301      	adds	r3, #1
 80012c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	fa22 f303 	lsr.w	r3, r2, r3
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	f47f ae78 	bne.w	8000fc4 <HAL_GPIO_Init+0x10>
  }
}
 80012d4:	bf00      	nop
 80012d6:	bf00      	nop
 80012d8:	371c      	adds	r7, #28
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	40021000 	.word	0x40021000
 80012e8:	40010000 	.word	0x40010000
 80012ec:	48000400 	.word	0x48000400
 80012f0:	48000800 	.word	0x48000800
 80012f4:	48000c00 	.word	0x48000c00
 80012f8:	48001000 	.word	0x48001000
 80012fc:	48001400 	.word	0x48001400
 8001300:	48001800 	.word	0x48001800
 8001304:	40010400 	.word	0x40010400

08001308 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	460b      	mov	r3, r1
 8001312:	807b      	strh	r3, [r7, #2]
 8001314:	4613      	mov	r3, r2
 8001316:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001318:	787b      	ldrb	r3, [r7, #1]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d003      	beq.n	8001326 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800131e:	887a      	ldrh	r2, [r7, #2]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001324:	e002      	b.n	800132c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001326:	887a      	ldrh	r2, [r7, #2]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	460b      	mov	r3, r1
 8001342:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	695b      	ldr	r3, [r3, #20]
 8001348:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800134a:	887a      	ldrh	r2, [r7, #2]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	4013      	ands	r3, r2
 8001350:	041a      	lsls	r2, r3, #16
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	43d9      	mvns	r1, r3
 8001356:	887b      	ldrh	r3, [r7, #2]
 8001358:	400b      	ands	r3, r1
 800135a:	431a      	orrs	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	619a      	str	r2, [r3, #24]
}
 8001360:	bf00      	nop
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001370:	4b04      	ldr	r3, [pc, #16]	@ (8001384 <HAL_PWREx_GetVoltageRange+0x18>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001378:	4618      	mov	r0, r3
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	40007000 	.word	0x40007000

08001388 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001396:	d130      	bne.n	80013fa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001398:	4b23      	ldr	r3, [pc, #140]	@ (8001428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80013a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80013a4:	d038      	beq.n	8001418 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013a6:	4b20      	ldr	r3, [pc, #128]	@ (8001428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80013ae:	4a1e      	ldr	r2, [pc, #120]	@ (8001428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013b0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013b4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013b6:	4b1d      	ldr	r3, [pc, #116]	@ (800142c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2232      	movs	r2, #50	@ 0x32
 80013bc:	fb02 f303 	mul.w	r3, r2, r3
 80013c0:	4a1b      	ldr	r2, [pc, #108]	@ (8001430 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80013c2:	fba2 2303 	umull	r2, r3, r2, r3
 80013c6:	0c9b      	lsrs	r3, r3, #18
 80013c8:	3301      	adds	r3, #1
 80013ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013cc:	e002      	b.n	80013d4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	3b01      	subs	r3, #1
 80013d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013d4:	4b14      	ldr	r3, [pc, #80]	@ (8001428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013d6:	695b      	ldr	r3, [r3, #20]
 80013d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013e0:	d102      	bne.n	80013e8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1f2      	bne.n	80013ce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013ea:	695b      	ldr	r3, [r3, #20]
 80013ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013f4:	d110      	bne.n	8001418 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e00f      	b.n	800141a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80013fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001402:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001406:	d007      	beq.n	8001418 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001408:	4b07      	ldr	r3, [pc, #28]	@ (8001428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001410:	4a05      	ldr	r2, [pc, #20]	@ (8001428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001412:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001416:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3714      	adds	r7, #20
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	40007000 	.word	0x40007000
 800142c:	20000000 	.word	0x20000000
 8001430:	431bde83 	.word	0x431bde83

08001434 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b088      	sub	sp, #32
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d101      	bne.n	8001446 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e3ca      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001446:	4b97      	ldr	r3, [pc, #604]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f003 030c 	and.w	r3, r3, #12
 800144e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001450:	4b94      	ldr	r3, [pc, #592]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	f003 0303 	and.w	r3, r3, #3
 8001458:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0310 	and.w	r3, r3, #16
 8001462:	2b00      	cmp	r3, #0
 8001464:	f000 80e4 	beq.w	8001630 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d007      	beq.n	800147e <HAL_RCC_OscConfig+0x4a>
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	2b0c      	cmp	r3, #12
 8001472:	f040 808b 	bne.w	800158c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	2b01      	cmp	r3, #1
 800147a:	f040 8087 	bne.w	800158c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800147e:	4b89      	ldr	r3, [pc, #548]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d005      	beq.n	8001496 <HAL_RCC_OscConfig+0x62>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d101      	bne.n	8001496 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e3a2      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a1a      	ldr	r2, [r3, #32]
 800149a:	4b82      	ldr	r3, [pc, #520]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0308 	and.w	r3, r3, #8
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d004      	beq.n	80014b0 <HAL_RCC_OscConfig+0x7c>
 80014a6:	4b7f      	ldr	r3, [pc, #508]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80014ae:	e005      	b.n	80014bc <HAL_RCC_OscConfig+0x88>
 80014b0:	4b7c      	ldr	r3, [pc, #496]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80014b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014b6:	091b      	lsrs	r3, r3, #4
 80014b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80014bc:	4293      	cmp	r3, r2
 80014be:	d223      	bcs.n	8001508 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a1b      	ldr	r3, [r3, #32]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f000 fd55 	bl	8001f74 <RCC_SetFlashLatencyFromMSIRange>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e383      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014d4:	4b73      	ldr	r3, [pc, #460]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a72      	ldr	r2, [pc, #456]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80014da:	f043 0308 	orr.w	r3, r3, #8
 80014de:	6013      	str	r3, [r2, #0]
 80014e0:	4b70      	ldr	r3, [pc, #448]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a1b      	ldr	r3, [r3, #32]
 80014ec:	496d      	ldr	r1, [pc, #436]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80014ee:	4313      	orrs	r3, r2
 80014f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014f2:	4b6c      	ldr	r3, [pc, #432]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	69db      	ldr	r3, [r3, #28]
 80014fe:	021b      	lsls	r3, r3, #8
 8001500:	4968      	ldr	r1, [pc, #416]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001502:	4313      	orrs	r3, r2
 8001504:	604b      	str	r3, [r1, #4]
 8001506:	e025      	b.n	8001554 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001508:	4b66      	ldr	r3, [pc, #408]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a65      	ldr	r2, [pc, #404]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 800150e:	f043 0308 	orr.w	r3, r3, #8
 8001512:	6013      	str	r3, [r2, #0]
 8001514:	4b63      	ldr	r3, [pc, #396]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a1b      	ldr	r3, [r3, #32]
 8001520:	4960      	ldr	r1, [pc, #384]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001522:	4313      	orrs	r3, r2
 8001524:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001526:	4b5f      	ldr	r3, [pc, #380]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	021b      	lsls	r3, r3, #8
 8001534:	495b      	ldr	r1, [pc, #364]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001536:	4313      	orrs	r3, r2
 8001538:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d109      	bne.n	8001554 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a1b      	ldr	r3, [r3, #32]
 8001544:	4618      	mov	r0, r3
 8001546:	f000 fd15 	bl	8001f74 <RCC_SetFlashLatencyFromMSIRange>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e343      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001554:	f000 fc4a 	bl	8001dec <HAL_RCC_GetSysClockFreq>
 8001558:	4602      	mov	r2, r0
 800155a:	4b52      	ldr	r3, [pc, #328]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	091b      	lsrs	r3, r3, #4
 8001560:	f003 030f 	and.w	r3, r3, #15
 8001564:	4950      	ldr	r1, [pc, #320]	@ (80016a8 <HAL_RCC_OscConfig+0x274>)
 8001566:	5ccb      	ldrb	r3, [r1, r3]
 8001568:	f003 031f 	and.w	r3, r3, #31
 800156c:	fa22 f303 	lsr.w	r3, r2, r3
 8001570:	4a4e      	ldr	r2, [pc, #312]	@ (80016ac <HAL_RCC_OscConfig+0x278>)
 8001572:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001574:	4b4e      	ldr	r3, [pc, #312]	@ (80016b0 <HAL_RCC_OscConfig+0x27c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff fbb5 	bl	8000ce8 <HAL_InitTick>
 800157e:	4603      	mov	r3, r0
 8001580:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001582:	7bfb      	ldrb	r3, [r7, #15]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d052      	beq.n	800162e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001588:	7bfb      	ldrb	r3, [r7, #15]
 800158a:	e327      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d032      	beq.n	80015fa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001594:	4b43      	ldr	r3, [pc, #268]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a42      	ldr	r2, [pc, #264]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 800159a:	f043 0301 	orr.w	r3, r3, #1
 800159e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015a0:	f7ff fbf2 	bl	8000d88 <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015a8:	f7ff fbee 	bl	8000d88 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e310      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015ba:	4b3a      	ldr	r3, [pc, #232]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d0f0      	beq.n	80015a8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015c6:	4b37      	ldr	r3, [pc, #220]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a36      	ldr	r2, [pc, #216]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015cc:	f043 0308 	orr.w	r3, r3, #8
 80015d0:	6013      	str	r3, [r2, #0]
 80015d2:	4b34      	ldr	r3, [pc, #208]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a1b      	ldr	r3, [r3, #32]
 80015de:	4931      	ldr	r1, [pc, #196]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015e0:	4313      	orrs	r3, r2
 80015e2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015e4:	4b2f      	ldr	r3, [pc, #188]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	69db      	ldr	r3, [r3, #28]
 80015f0:	021b      	lsls	r3, r3, #8
 80015f2:	492c      	ldr	r1, [pc, #176]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015f4:	4313      	orrs	r3, r2
 80015f6:	604b      	str	r3, [r1, #4]
 80015f8:	e01a      	b.n	8001630 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015fa:	4b2a      	ldr	r3, [pc, #168]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a29      	ldr	r2, [pc, #164]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001600:	f023 0301 	bic.w	r3, r3, #1
 8001604:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001606:	f7ff fbbf 	bl	8000d88 <HAL_GetTick>
 800160a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800160c:	e008      	b.n	8001620 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800160e:	f7ff fbbb 	bl	8000d88 <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e2dd      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001620:	4b20      	ldr	r3, [pc, #128]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0302 	and.w	r3, r3, #2
 8001628:	2b00      	cmp	r3, #0
 800162a:	d1f0      	bne.n	800160e <HAL_RCC_OscConfig+0x1da>
 800162c:	e000      	b.n	8001630 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800162e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	2b00      	cmp	r3, #0
 800163a:	d074      	beq.n	8001726 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	2b08      	cmp	r3, #8
 8001640:	d005      	beq.n	800164e <HAL_RCC_OscConfig+0x21a>
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	2b0c      	cmp	r3, #12
 8001646:	d10e      	bne.n	8001666 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	2b03      	cmp	r3, #3
 800164c:	d10b      	bne.n	8001666 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800164e:	4b15      	ldr	r3, [pc, #84]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d064      	beq.n	8001724 <HAL_RCC_OscConfig+0x2f0>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d160      	bne.n	8001724 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e2ba      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800166e:	d106      	bne.n	800167e <HAL_RCC_OscConfig+0x24a>
 8001670:	4b0c      	ldr	r3, [pc, #48]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a0b      	ldr	r2, [pc, #44]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001676:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800167a:	6013      	str	r3, [r2, #0]
 800167c:	e026      	b.n	80016cc <HAL_RCC_OscConfig+0x298>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001686:	d115      	bne.n	80016b4 <HAL_RCC_OscConfig+0x280>
 8001688:	4b06      	ldr	r3, [pc, #24]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a05      	ldr	r2, [pc, #20]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 800168e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001692:	6013      	str	r3, [r2, #0]
 8001694:	4b03      	ldr	r3, [pc, #12]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a02      	ldr	r2, [pc, #8]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 800169a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800169e:	6013      	str	r3, [r2, #0]
 80016a0:	e014      	b.n	80016cc <HAL_RCC_OscConfig+0x298>
 80016a2:	bf00      	nop
 80016a4:	40021000 	.word	0x40021000
 80016a8:	080052a4 	.word	0x080052a4
 80016ac:	20000000 	.word	0x20000000
 80016b0:	20000004 	.word	0x20000004
 80016b4:	4ba0      	ldr	r3, [pc, #640]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a9f      	ldr	r2, [pc, #636]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 80016ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016be:	6013      	str	r3, [r2, #0]
 80016c0:	4b9d      	ldr	r3, [pc, #628]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a9c      	ldr	r2, [pc, #624]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 80016c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d013      	beq.n	80016fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d4:	f7ff fb58 	bl	8000d88 <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016dc:	f7ff fb54 	bl	8000d88 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b64      	cmp	r3, #100	@ 0x64
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e276      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016ee:	4b92      	ldr	r3, [pc, #584]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d0f0      	beq.n	80016dc <HAL_RCC_OscConfig+0x2a8>
 80016fa:	e014      	b.n	8001726 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016fc:	f7ff fb44 	bl	8000d88 <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001704:	f7ff fb40 	bl	8000d88 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b64      	cmp	r3, #100	@ 0x64
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e262      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001716:	4b88      	ldr	r3, [pc, #544]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1f0      	bne.n	8001704 <HAL_RCC_OscConfig+0x2d0>
 8001722:	e000      	b.n	8001726 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001724:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d060      	beq.n	80017f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	2b04      	cmp	r3, #4
 8001736:	d005      	beq.n	8001744 <HAL_RCC_OscConfig+0x310>
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	2b0c      	cmp	r3, #12
 800173c:	d119      	bne.n	8001772 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	2b02      	cmp	r3, #2
 8001742:	d116      	bne.n	8001772 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001744:	4b7c      	ldr	r3, [pc, #496]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800174c:	2b00      	cmp	r3, #0
 800174e:	d005      	beq.n	800175c <HAL_RCC_OscConfig+0x328>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d101      	bne.n	800175c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e23f      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800175c:	4b76      	ldr	r3, [pc, #472]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	691b      	ldr	r3, [r3, #16]
 8001768:	061b      	lsls	r3, r3, #24
 800176a:	4973      	ldr	r1, [pc, #460]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 800176c:	4313      	orrs	r3, r2
 800176e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001770:	e040      	b.n	80017f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d023      	beq.n	80017c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800177a:	4b6f      	ldr	r3, [pc, #444]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a6e      	ldr	r2, [pc, #440]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 8001780:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001784:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001786:	f7ff faff 	bl	8000d88 <HAL_GetTick>
 800178a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800178c:	e008      	b.n	80017a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800178e:	f7ff fafb 	bl	8000d88 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e21d      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017a0:	4b65      	ldr	r3, [pc, #404]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d0f0      	beq.n	800178e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ac:	4b62      	ldr	r3, [pc, #392]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	691b      	ldr	r3, [r3, #16]
 80017b8:	061b      	lsls	r3, r3, #24
 80017ba:	495f      	ldr	r1, [pc, #380]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 80017bc:	4313      	orrs	r3, r2
 80017be:	604b      	str	r3, [r1, #4]
 80017c0:	e018      	b.n	80017f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017c2:	4b5d      	ldr	r3, [pc, #372]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a5c      	ldr	r2, [pc, #368]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 80017c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80017cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ce:	f7ff fadb 	bl	8000d88 <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017d6:	f7ff fad7 	bl	8000d88 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e1f9      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017e8:	4b53      	ldr	r3, [pc, #332]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1f0      	bne.n	80017d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0308 	and.w	r3, r3, #8
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d03c      	beq.n	800187a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	695b      	ldr	r3, [r3, #20]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d01c      	beq.n	8001842 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001808:	4b4b      	ldr	r3, [pc, #300]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 800180a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800180e:	4a4a      	ldr	r2, [pc, #296]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001818:	f7ff fab6 	bl	8000d88 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001820:	f7ff fab2 	bl	8000d88 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e1d4      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001832:	4b41      	ldr	r3, [pc, #260]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 8001834:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d0ef      	beq.n	8001820 <HAL_RCC_OscConfig+0x3ec>
 8001840:	e01b      	b.n	800187a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001842:	4b3d      	ldr	r3, [pc, #244]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 8001844:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001848:	4a3b      	ldr	r2, [pc, #236]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 800184a:	f023 0301 	bic.w	r3, r3, #1
 800184e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001852:	f7ff fa99 	bl	8000d88 <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800185a:	f7ff fa95 	bl	8000d88 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e1b7      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800186c:	4b32      	ldr	r3, [pc, #200]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 800186e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1ef      	bne.n	800185a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0304 	and.w	r3, r3, #4
 8001882:	2b00      	cmp	r3, #0
 8001884:	f000 80a6 	beq.w	80019d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001888:	2300      	movs	r3, #0
 800188a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800188c:	4b2a      	ldr	r3, [pc, #168]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 800188e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001890:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d10d      	bne.n	80018b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001898:	4b27      	ldr	r3, [pc, #156]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 800189a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800189c:	4a26      	ldr	r2, [pc, #152]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 800189e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80018a4:	4b24      	ldr	r3, [pc, #144]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 80018a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ac:	60bb      	str	r3, [r7, #8]
 80018ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018b0:	2301      	movs	r3, #1
 80018b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018b4:	4b21      	ldr	r3, [pc, #132]	@ (800193c <HAL_RCC_OscConfig+0x508>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d118      	bne.n	80018f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018c0:	4b1e      	ldr	r3, [pc, #120]	@ (800193c <HAL_RCC_OscConfig+0x508>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a1d      	ldr	r2, [pc, #116]	@ (800193c <HAL_RCC_OscConfig+0x508>)
 80018c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018cc:	f7ff fa5c 	bl	8000d88 <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018d4:	f7ff fa58 	bl	8000d88 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e17a      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018e6:	4b15      	ldr	r3, [pc, #84]	@ (800193c <HAL_RCC_OscConfig+0x508>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d0f0      	beq.n	80018d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d108      	bne.n	800190c <HAL_RCC_OscConfig+0x4d8>
 80018fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 80018fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001900:	4a0d      	ldr	r2, [pc, #52]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800190a:	e029      	b.n	8001960 <HAL_RCC_OscConfig+0x52c>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	2b05      	cmp	r3, #5
 8001912:	d115      	bne.n	8001940 <HAL_RCC_OscConfig+0x50c>
 8001914:	4b08      	ldr	r3, [pc, #32]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 8001916:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800191a:	4a07      	ldr	r2, [pc, #28]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 800191c:	f043 0304 	orr.w	r3, r3, #4
 8001920:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001924:	4b04      	ldr	r3, [pc, #16]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 8001926:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800192a:	4a03      	ldr	r2, [pc, #12]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001934:	e014      	b.n	8001960 <HAL_RCC_OscConfig+0x52c>
 8001936:	bf00      	nop
 8001938:	40021000 	.word	0x40021000
 800193c:	40007000 	.word	0x40007000
 8001940:	4b9c      	ldr	r3, [pc, #624]	@ (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001942:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001946:	4a9b      	ldr	r2, [pc, #620]	@ (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001948:	f023 0301 	bic.w	r3, r3, #1
 800194c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001950:	4b98      	ldr	r3, [pc, #608]	@ (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001952:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001956:	4a97      	ldr	r2, [pc, #604]	@ (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001958:	f023 0304 	bic.w	r3, r3, #4
 800195c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d016      	beq.n	8001996 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001968:	f7ff fa0e 	bl	8000d88 <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800196e:	e00a      	b.n	8001986 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001970:	f7ff fa0a 	bl	8000d88 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800197e:	4293      	cmp	r3, r2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e12a      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001986:	4b8b      	ldr	r3, [pc, #556]	@ (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001988:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d0ed      	beq.n	8001970 <HAL_RCC_OscConfig+0x53c>
 8001994:	e015      	b.n	80019c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001996:	f7ff f9f7 	bl	8000d88 <HAL_GetTick>
 800199a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800199c:	e00a      	b.n	80019b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800199e:	f7ff f9f3 	bl	8000d88 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e113      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019b4:	4b7f      	ldr	r3, [pc, #508]	@ (8001bb4 <HAL_RCC_OscConfig+0x780>)
 80019b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1ed      	bne.n	800199e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019c2:	7ffb      	ldrb	r3, [r7, #31]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d105      	bne.n	80019d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019c8:	4b7a      	ldr	r3, [pc, #488]	@ (8001bb4 <HAL_RCC_OscConfig+0x780>)
 80019ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019cc:	4a79      	ldr	r2, [pc, #484]	@ (8001bb4 <HAL_RCC_OscConfig+0x780>)
 80019ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019d2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f000 80fe 	beq.w	8001bda <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	f040 80d0 	bne.w	8001b88 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80019e8:	4b72      	ldr	r3, [pc, #456]	@ (8001bb4 <HAL_RCC_OscConfig+0x780>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	f003 0203 	and.w	r2, r3, #3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d130      	bne.n	8001a5e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a06:	3b01      	subs	r3, #1
 8001a08:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d127      	bne.n	8001a5e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a18:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d11f      	bne.n	8001a5e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001a28:	2a07      	cmp	r2, #7
 8001a2a:	bf14      	ite	ne
 8001a2c:	2201      	movne	r2, #1
 8001a2e:	2200      	moveq	r2, #0
 8001a30:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d113      	bne.n	8001a5e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a40:	085b      	lsrs	r3, r3, #1
 8001a42:	3b01      	subs	r3, #1
 8001a44:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d109      	bne.n	8001a5e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a54:	085b      	lsrs	r3, r3, #1
 8001a56:	3b01      	subs	r3, #1
 8001a58:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d06e      	beq.n	8001b3c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	2b0c      	cmp	r3, #12
 8001a62:	d069      	beq.n	8001b38 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a64:	4b53      	ldr	r3, [pc, #332]	@ (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d105      	bne.n	8001a7c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001a70:	4b50      	ldr	r3, [pc, #320]	@ (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e0ad      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a80:	4b4c      	ldr	r3, [pc, #304]	@ (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a4b      	ldr	r2, [pc, #300]	@ (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001a86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a8a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a8c:	f7ff f97c 	bl	8000d88 <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a94:	f7ff f978 	bl	8000d88 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e09a      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aa6:	4b43      	ldr	r3, [pc, #268]	@ (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1f0      	bne.n	8001a94 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ab2:	4b40      	ldr	r3, [pc, #256]	@ (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001ab4:	68da      	ldr	r2, [r3, #12]
 8001ab6:	4b40      	ldr	r3, [pc, #256]	@ (8001bb8 <HAL_RCC_OscConfig+0x784>)
 8001ab8:	4013      	ands	r3, r2
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001ac2:	3a01      	subs	r2, #1
 8001ac4:	0112      	lsls	r2, r2, #4
 8001ac6:	4311      	orrs	r1, r2
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001acc:	0212      	lsls	r2, r2, #8
 8001ace:	4311      	orrs	r1, r2
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001ad4:	0852      	lsrs	r2, r2, #1
 8001ad6:	3a01      	subs	r2, #1
 8001ad8:	0552      	lsls	r2, r2, #21
 8001ada:	4311      	orrs	r1, r2
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001ae0:	0852      	lsrs	r2, r2, #1
 8001ae2:	3a01      	subs	r2, #1
 8001ae4:	0652      	lsls	r2, r2, #25
 8001ae6:	4311      	orrs	r1, r2
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001aec:	0912      	lsrs	r2, r2, #4
 8001aee:	0452      	lsls	r2, r2, #17
 8001af0:	430a      	orrs	r2, r1
 8001af2:	4930      	ldr	r1, [pc, #192]	@ (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001af4:	4313      	orrs	r3, r2
 8001af6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001af8:	4b2e      	ldr	r3, [pc, #184]	@ (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a2d      	ldr	r2, [pc, #180]	@ (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001afe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b02:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b04:	4b2b      	ldr	r3, [pc, #172]	@ (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	4a2a      	ldr	r2, [pc, #168]	@ (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001b0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b0e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b10:	f7ff f93a 	bl	8000d88 <HAL_GetTick>
 8001b14:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b18:	f7ff f936 	bl	8000d88 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e058      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b2a:	4b22      	ldr	r3, [pc, #136]	@ (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d0f0      	beq.n	8001b18 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b36:	e050      	b.n	8001bda <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e04f      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b3c:	4b1d      	ldr	r3, [pc, #116]	@ (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d148      	bne.n	8001bda <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b48:	4b1a      	ldr	r3, [pc, #104]	@ (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a19      	ldr	r2, [pc, #100]	@ (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001b4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b52:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b54:	4b17      	ldr	r3, [pc, #92]	@ (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	4a16      	ldr	r2, [pc, #88]	@ (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001b5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b5e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b60:	f7ff f912 	bl	8000d88 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b68:	f7ff f90e 	bl	8000d88 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e030      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d0f0      	beq.n	8001b68 <HAL_RCC_OscConfig+0x734>
 8001b86:	e028      	b.n	8001bda <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	2b0c      	cmp	r3, #12
 8001b8c:	d023      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b8e:	4b09      	ldr	r3, [pc, #36]	@ (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a08      	ldr	r2, [pc, #32]	@ (8001bb4 <HAL_RCC_OscConfig+0x780>)
 8001b94:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9a:	f7ff f8f5 	bl	8000d88 <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ba0:	e00c      	b.n	8001bbc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba2:	f7ff f8f1 	bl	8000d88 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d905      	bls.n	8001bbc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e013      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bbc:	4b09      	ldr	r3, [pc, #36]	@ (8001be4 <HAL_RCC_OscConfig+0x7b0>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1ec      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001bc8:	4b06      	ldr	r3, [pc, #24]	@ (8001be4 <HAL_RCC_OscConfig+0x7b0>)
 8001bca:	68da      	ldr	r2, [r3, #12]
 8001bcc:	4905      	ldr	r1, [pc, #20]	@ (8001be4 <HAL_RCC_OscConfig+0x7b0>)
 8001bce:	4b06      	ldr	r3, [pc, #24]	@ (8001be8 <HAL_RCC_OscConfig+0x7b4>)
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	60cb      	str	r3, [r1, #12]
 8001bd4:	e001      	b.n	8001bda <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e000      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3720      	adds	r7, #32
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40021000 	.word	0x40021000
 8001be8:	feeefffc 	.word	0xfeeefffc

08001bec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d101      	bne.n	8001c00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e0e7      	b.n	8001dd0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c00:	4b75      	ldr	r3, [pc, #468]	@ (8001dd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0307 	and.w	r3, r3, #7
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d910      	bls.n	8001c30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0e:	4b72      	ldr	r3, [pc, #456]	@ (8001dd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f023 0207 	bic.w	r2, r3, #7
 8001c16:	4970      	ldr	r1, [pc, #448]	@ (8001dd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1e:	4b6e      	ldr	r3, [pc, #440]	@ (8001dd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d001      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e0cf      	b.n	8001dd0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d010      	beq.n	8001c5e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	4b66      	ldr	r3, [pc, #408]	@ (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d908      	bls.n	8001c5e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c4c:	4b63      	ldr	r3, [pc, #396]	@ (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	4960      	ldr	r1, [pc, #384]	@ (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d04c      	beq.n	8001d04 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2b03      	cmp	r3, #3
 8001c70:	d107      	bne.n	8001c82 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c72:	4b5a      	ldr	r3, [pc, #360]	@ (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d121      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e0a6      	b.n	8001dd0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d107      	bne.n	8001c9a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c8a:	4b54      	ldr	r3, [pc, #336]	@ (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d115      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e09a      	b.n	8001dd0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d107      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ca2:	4b4e      	ldr	r3, [pc, #312]	@ (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d109      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e08e      	b.n	8001dd0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cb2:	4b4a      	ldr	r3, [pc, #296]	@ (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e086      	b.n	8001dd0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cc2:	4b46      	ldr	r3, [pc, #280]	@ (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f023 0203 	bic.w	r2, r3, #3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	4943      	ldr	r1, [pc, #268]	@ (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cd4:	f7ff f858 	bl	8000d88 <HAL_GetTick>
 8001cd8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cda:	e00a      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cdc:	f7ff f854 	bl	8000d88 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e06e      	b.n	8001dd0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cf2:	4b3a      	ldr	r3, [pc, #232]	@ (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f003 020c 	and.w	r2, r3, #12
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d1eb      	bne.n	8001cdc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d010      	beq.n	8001d32 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	4b31      	ldr	r3, [pc, #196]	@ (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d208      	bcs.n	8001d32 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d20:	4b2e      	ldr	r3, [pc, #184]	@ (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	492b      	ldr	r1, [pc, #172]	@ (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d32:	4b29      	ldr	r3, [pc, #164]	@ (8001dd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d210      	bcs.n	8001d62 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d40:	4b25      	ldr	r3, [pc, #148]	@ (8001dd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f023 0207 	bic.w	r2, r3, #7
 8001d48:	4923      	ldr	r1, [pc, #140]	@ (8001dd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d50:	4b21      	ldr	r3, [pc, #132]	@ (8001dd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0307 	and.w	r3, r3, #7
 8001d58:	683a      	ldr	r2, [r7, #0]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d001      	beq.n	8001d62 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e036      	b.n	8001dd0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0304 	and.w	r3, r3, #4
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d008      	beq.n	8001d80 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d6e:	4b1b      	ldr	r3, [pc, #108]	@ (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	4918      	ldr	r1, [pc, #96]	@ (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0308 	and.w	r3, r3, #8
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d009      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d8c:	4b13      	ldr	r3, [pc, #76]	@ (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	4910      	ldr	r1, [pc, #64]	@ (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001da0:	f000 f824 	bl	8001dec <HAL_RCC_GetSysClockFreq>
 8001da4:	4602      	mov	r2, r0
 8001da6:	4b0d      	ldr	r3, [pc, #52]	@ (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	091b      	lsrs	r3, r3, #4
 8001dac:	f003 030f 	and.w	r3, r3, #15
 8001db0:	490b      	ldr	r1, [pc, #44]	@ (8001de0 <HAL_RCC_ClockConfig+0x1f4>)
 8001db2:	5ccb      	ldrb	r3, [r1, r3]
 8001db4:	f003 031f 	and.w	r3, r3, #31
 8001db8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dbc:	4a09      	ldr	r2, [pc, #36]	@ (8001de4 <HAL_RCC_ClockConfig+0x1f8>)
 8001dbe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001dc0:	4b09      	ldr	r3, [pc, #36]	@ (8001de8 <HAL_RCC_ClockConfig+0x1fc>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7fe ff8f 	bl	8000ce8 <HAL_InitTick>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	72fb      	strb	r3, [r7, #11]

  return status;
 8001dce:	7afb      	ldrb	r3, [r7, #11]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40022000 	.word	0x40022000
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	080052a4 	.word	0x080052a4
 8001de4:	20000000 	.word	0x20000000
 8001de8:	20000004 	.word	0x20000004

08001dec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b089      	sub	sp, #36	@ 0x24
 8001df0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001df2:	2300      	movs	r3, #0
 8001df4:	61fb      	str	r3, [r7, #28]
 8001df6:	2300      	movs	r3, #0
 8001df8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dfa:	4b3e      	ldr	r3, [pc, #248]	@ (8001ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 030c 	and.w	r3, r3, #12
 8001e02:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e04:	4b3b      	ldr	r3, [pc, #236]	@ (8001ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	f003 0303 	and.w	r3, r3, #3
 8001e0c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d005      	beq.n	8001e20 <HAL_RCC_GetSysClockFreq+0x34>
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	2b0c      	cmp	r3, #12
 8001e18:	d121      	bne.n	8001e5e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d11e      	bne.n	8001e5e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e20:	4b34      	ldr	r3, [pc, #208]	@ (8001ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0308 	and.w	r3, r3, #8
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d107      	bne.n	8001e3c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e2c:	4b31      	ldr	r3, [pc, #196]	@ (8001ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e32:	0a1b      	lsrs	r3, r3, #8
 8001e34:	f003 030f 	and.w	r3, r3, #15
 8001e38:	61fb      	str	r3, [r7, #28]
 8001e3a:	e005      	b.n	8001e48 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e3c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	091b      	lsrs	r3, r3, #4
 8001e42:	f003 030f 	and.w	r3, r3, #15
 8001e46:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e48:	4a2b      	ldr	r2, [pc, #172]	@ (8001ef8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e50:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d10d      	bne.n	8001e74 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e5c:	e00a      	b.n	8001e74 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	2b04      	cmp	r3, #4
 8001e62:	d102      	bne.n	8001e6a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e64:	4b25      	ldr	r3, [pc, #148]	@ (8001efc <HAL_RCC_GetSysClockFreq+0x110>)
 8001e66:	61bb      	str	r3, [r7, #24]
 8001e68:	e004      	b.n	8001e74 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	2b08      	cmp	r3, #8
 8001e6e:	d101      	bne.n	8001e74 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e70:	4b23      	ldr	r3, [pc, #140]	@ (8001f00 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e72:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	2b0c      	cmp	r3, #12
 8001e78:	d134      	bne.n	8001ee4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e7a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	f003 0303 	and.w	r3, r3, #3
 8001e82:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d003      	beq.n	8001e92 <HAL_RCC_GetSysClockFreq+0xa6>
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	2b03      	cmp	r3, #3
 8001e8e:	d003      	beq.n	8001e98 <HAL_RCC_GetSysClockFreq+0xac>
 8001e90:	e005      	b.n	8001e9e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e92:	4b1a      	ldr	r3, [pc, #104]	@ (8001efc <HAL_RCC_GetSysClockFreq+0x110>)
 8001e94:	617b      	str	r3, [r7, #20]
      break;
 8001e96:	e005      	b.n	8001ea4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e98:	4b19      	ldr	r3, [pc, #100]	@ (8001f00 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e9a:	617b      	str	r3, [r7, #20]
      break;
 8001e9c:	e002      	b.n	8001ea4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	617b      	str	r3, [r7, #20]
      break;
 8001ea2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ea4:	4b13      	ldr	r3, [pc, #76]	@ (8001ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	091b      	lsrs	r3, r3, #4
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	3301      	adds	r3, #1
 8001eb0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001eb2:	4b10      	ldr	r3, [pc, #64]	@ (8001ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	0a1b      	lsrs	r3, r3, #8
 8001eb8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	fb03 f202 	mul.w	r2, r3, r2
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001eca:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	0e5b      	lsrs	r3, r3, #25
 8001ed0:	f003 0303 	and.w	r3, r3, #3
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001eda:	697a      	ldr	r2, [r7, #20]
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ee4:	69bb      	ldr	r3, [r7, #24]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3724      	adds	r7, #36	@ 0x24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	080052bc 	.word	0x080052bc
 8001efc:	00f42400 	.word	0x00f42400
 8001f00:	007a1200 	.word	0x007a1200

08001f04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f08:	4b03      	ldr	r3, [pc, #12]	@ (8001f18 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	20000000 	.word	0x20000000

08001f1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f20:	f7ff fff0 	bl	8001f04 <HAL_RCC_GetHCLKFreq>
 8001f24:	4602      	mov	r2, r0
 8001f26:	4b06      	ldr	r3, [pc, #24]	@ (8001f40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	0a1b      	lsrs	r3, r3, #8
 8001f2c:	f003 0307 	and.w	r3, r3, #7
 8001f30:	4904      	ldr	r1, [pc, #16]	@ (8001f44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f32:	5ccb      	ldrb	r3, [r1, r3]
 8001f34:	f003 031f 	and.w	r3, r3, #31
 8001f38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40021000 	.word	0x40021000
 8001f44:	080052b4 	.word	0x080052b4

08001f48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f4c:	f7ff ffda 	bl	8001f04 <HAL_RCC_GetHCLKFreq>
 8001f50:	4602      	mov	r2, r0
 8001f52:	4b06      	ldr	r3, [pc, #24]	@ (8001f6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	0adb      	lsrs	r3, r3, #11
 8001f58:	f003 0307 	and.w	r3, r3, #7
 8001f5c:	4904      	ldr	r1, [pc, #16]	@ (8001f70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f5e:	5ccb      	ldrb	r3, [r1, r3]
 8001f60:	f003 031f 	and.w	r3, r3, #31
 8001f64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	080052b4 	.word	0x080052b4

08001f74 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f80:	4b2a      	ldr	r3, [pc, #168]	@ (800202c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d003      	beq.n	8001f94 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f8c:	f7ff f9ee 	bl	800136c <HAL_PWREx_GetVoltageRange>
 8001f90:	6178      	str	r0, [r7, #20]
 8001f92:	e014      	b.n	8001fbe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f94:	4b25      	ldr	r3, [pc, #148]	@ (800202c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f98:	4a24      	ldr	r2, [pc, #144]	@ (800202c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fa0:	4b22      	ldr	r3, [pc, #136]	@ (800202c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fa4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001fac:	f7ff f9de 	bl	800136c <HAL_PWREx_GetVoltageRange>
 8001fb0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001fb2:	4b1e      	ldr	r3, [pc, #120]	@ (800202c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fb6:	4a1d      	ldr	r2, [pc, #116]	@ (800202c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fb8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fbc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001fc4:	d10b      	bne.n	8001fde <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2b80      	cmp	r3, #128	@ 0x80
 8001fca:	d919      	bls.n	8002000 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2ba0      	cmp	r3, #160	@ 0xa0
 8001fd0:	d902      	bls.n	8001fd8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	613b      	str	r3, [r7, #16]
 8001fd6:	e013      	b.n	8002000 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fd8:	2301      	movs	r3, #1
 8001fda:	613b      	str	r3, [r7, #16]
 8001fdc:	e010      	b.n	8002000 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b80      	cmp	r3, #128	@ 0x80
 8001fe2:	d902      	bls.n	8001fea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	613b      	str	r3, [r7, #16]
 8001fe8:	e00a      	b.n	8002000 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b80      	cmp	r3, #128	@ 0x80
 8001fee:	d102      	bne.n	8001ff6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	613b      	str	r3, [r7, #16]
 8001ff4:	e004      	b.n	8002000 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2b70      	cmp	r3, #112	@ 0x70
 8001ffa:	d101      	bne.n	8002000 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002000:	4b0b      	ldr	r3, [pc, #44]	@ (8002030 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f023 0207 	bic.w	r2, r3, #7
 8002008:	4909      	ldr	r1, [pc, #36]	@ (8002030 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	4313      	orrs	r3, r2
 800200e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002010:	4b07      	ldr	r3, [pc, #28]	@ (8002030 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0307 	and.w	r3, r3, #7
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	429a      	cmp	r2, r3
 800201c:	d001      	beq.n	8002022 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e000      	b.n	8002024 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	3718      	adds	r7, #24
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40021000 	.word	0x40021000
 8002030:	40022000 	.word	0x40022000

08002034 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800203c:	2300      	movs	r3, #0
 800203e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002040:	2300      	movs	r3, #0
 8002042:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800204c:	2b00      	cmp	r3, #0
 800204e:	d041      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002054:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002058:	d02a      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800205a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800205e:	d824      	bhi.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002060:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002064:	d008      	beq.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002066:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800206a:	d81e      	bhi.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 800206c:	2b00      	cmp	r3, #0
 800206e:	d00a      	beq.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002070:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002074:	d010      	beq.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002076:	e018      	b.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002078:	4b86      	ldr	r3, [pc, #536]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	4a85      	ldr	r2, [pc, #532]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800207e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002082:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002084:	e015      	b.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	3304      	adds	r3, #4
 800208a:	2100      	movs	r1, #0
 800208c:	4618      	mov	r0, r3
 800208e:	f000 fabb 	bl	8002608 <RCCEx_PLLSAI1_Config>
 8002092:	4603      	mov	r3, r0
 8002094:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002096:	e00c      	b.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3320      	adds	r3, #32
 800209c:	2100      	movs	r1, #0
 800209e:	4618      	mov	r0, r3
 80020a0:	f000 fba6 	bl	80027f0 <RCCEx_PLLSAI2_Config>
 80020a4:	4603      	mov	r3, r0
 80020a6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020a8:	e003      	b.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	74fb      	strb	r3, [r7, #19]
      break;
 80020ae:	e000      	b.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80020b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020b2:	7cfb      	ldrb	r3, [r7, #19]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d10b      	bne.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020b8:	4b76      	ldr	r3, [pc, #472]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020be:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80020c6:	4973      	ldr	r1, [pc, #460]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80020ce:	e001      	b.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020d0:	7cfb      	ldrb	r3, [r7, #19]
 80020d2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d041      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80020e4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80020e8:	d02a      	beq.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80020ea:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80020ee:	d824      	bhi.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80020f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80020f4:	d008      	beq.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80020f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80020fa:	d81e      	bhi.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00a      	beq.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002100:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002104:	d010      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002106:	e018      	b.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002108:	4b62      	ldr	r3, [pc, #392]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	4a61      	ldr	r2, [pc, #388]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800210e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002112:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002114:	e015      	b.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	3304      	adds	r3, #4
 800211a:	2100      	movs	r1, #0
 800211c:	4618      	mov	r0, r3
 800211e:	f000 fa73 	bl	8002608 <RCCEx_PLLSAI1_Config>
 8002122:	4603      	mov	r3, r0
 8002124:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002126:	e00c      	b.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3320      	adds	r3, #32
 800212c:	2100      	movs	r1, #0
 800212e:	4618      	mov	r0, r3
 8002130:	f000 fb5e 	bl	80027f0 <RCCEx_PLLSAI2_Config>
 8002134:	4603      	mov	r3, r0
 8002136:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002138:	e003      	b.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	74fb      	strb	r3, [r7, #19]
      break;
 800213e:	e000      	b.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002140:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002142:	7cfb      	ldrb	r3, [r7, #19]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10b      	bne.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002148:	4b52      	ldr	r3, [pc, #328]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800214a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800214e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002156:	494f      	ldr	r1, [pc, #316]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002158:	4313      	orrs	r3, r2
 800215a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800215e:	e001      	b.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002160:	7cfb      	ldrb	r3, [r7, #19]
 8002162:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800216c:	2b00      	cmp	r3, #0
 800216e:	f000 80a0 	beq.w	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002172:	2300      	movs	r3, #0
 8002174:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002176:	4b47      	ldr	r3, [pc, #284]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800217a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002182:	2301      	movs	r3, #1
 8002184:	e000      	b.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002186:	2300      	movs	r3, #0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d00d      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800218c:	4b41      	ldr	r3, [pc, #260]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800218e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002190:	4a40      	ldr	r2, [pc, #256]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002192:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002196:	6593      	str	r3, [r2, #88]	@ 0x58
 8002198:	4b3e      	ldr	r3, [pc, #248]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800219a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800219c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021a0:	60bb      	str	r3, [r7, #8]
 80021a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021a4:	2301      	movs	r3, #1
 80021a6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021a8:	4b3b      	ldr	r3, [pc, #236]	@ (8002298 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a3a      	ldr	r2, [pc, #232]	@ (8002298 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021b4:	f7fe fde8 	bl	8000d88 <HAL_GetTick>
 80021b8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021ba:	e009      	b.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021bc:	f7fe fde4 	bl	8000d88 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d902      	bls.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	74fb      	strb	r3, [r7, #19]
        break;
 80021ce:	e005      	b.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021d0:	4b31      	ldr	r3, [pc, #196]	@ (8002298 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d0ef      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80021dc:	7cfb      	ldrb	r3, [r7, #19]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d15c      	bne.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021e2:	4b2c      	ldr	r3, [pc, #176]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021ec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d01f      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d019      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002200:	4b24      	ldr	r3, [pc, #144]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002202:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002206:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800220a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800220c:	4b21      	ldr	r3, [pc, #132]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800220e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002212:	4a20      	ldr	r2, [pc, #128]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002214:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002218:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800221c:	4b1d      	ldr	r3, [pc, #116]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800221e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002222:	4a1c      	ldr	r2, [pc, #112]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002224:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002228:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800222c:	4a19      	ldr	r2, [pc, #100]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b00      	cmp	r3, #0
 800223c:	d016      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223e:	f7fe fda3 	bl	8000d88 <HAL_GetTick>
 8002242:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002244:	e00b      	b.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002246:	f7fe fd9f 	bl	8000d88 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002254:	4293      	cmp	r3, r2
 8002256:	d902      	bls.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	74fb      	strb	r3, [r7, #19]
            break;
 800225c:	e006      	b.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800225e:	4b0d      	ldr	r3, [pc, #52]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002260:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d0ec      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800226c:	7cfb      	ldrb	r3, [r7, #19]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d10c      	bne.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002272:	4b08      	ldr	r3, [pc, #32]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002274:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002278:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002282:	4904      	ldr	r1, [pc, #16]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002284:	4313      	orrs	r3, r2
 8002286:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800228a:	e009      	b.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800228c:	7cfb      	ldrb	r3, [r7, #19]
 800228e:	74bb      	strb	r3, [r7, #18]
 8002290:	e006      	b.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002292:	bf00      	nop
 8002294:	40021000 	.word	0x40021000
 8002298:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800229c:	7cfb      	ldrb	r3, [r7, #19]
 800229e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022a0:	7c7b      	ldrb	r3, [r7, #17]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d105      	bne.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022a6:	4b9e      	ldr	r3, [pc, #632]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022aa:	4a9d      	ldr	r2, [pc, #628]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022b0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00a      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022be:	4b98      	ldr	r3, [pc, #608]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022c4:	f023 0203 	bic.w	r2, r3, #3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022cc:	4994      	ldr	r1, [pc, #592]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d00a      	beq.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022e0:	4b8f      	ldr	r3, [pc, #572]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022e6:	f023 020c 	bic.w	r2, r3, #12
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022ee:	498c      	ldr	r1, [pc, #560]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0304 	and.w	r3, r3, #4
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00a      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002302:	4b87      	ldr	r3, [pc, #540]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002304:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002308:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002310:	4983      	ldr	r1, [pc, #524]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002312:	4313      	orrs	r3, r2
 8002314:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0308 	and.w	r3, r3, #8
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00a      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002324:	4b7e      	ldr	r3, [pc, #504]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800232a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002332:	497b      	ldr	r1, [pc, #492]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002334:	4313      	orrs	r3, r2
 8002336:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0310 	and.w	r3, r3, #16
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00a      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002346:	4b76      	ldr	r3, [pc, #472]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002348:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800234c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002354:	4972      	ldr	r1, [pc, #456]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002356:	4313      	orrs	r3, r2
 8002358:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0320 	and.w	r3, r3, #32
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00a      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002368:	4b6d      	ldr	r3, [pc, #436]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800236a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800236e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002376:	496a      	ldr	r1, [pc, #424]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002378:	4313      	orrs	r3, r2
 800237a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00a      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800238a:	4b65      	ldr	r3, [pc, #404]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800238c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002390:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002398:	4961      	ldr	r1, [pc, #388]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800239a:	4313      	orrs	r3, r2
 800239c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d00a      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80023ac:	4b5c      	ldr	r3, [pc, #368]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023ba:	4959      	ldr	r1, [pc, #356]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00a      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023ce:	4b54      	ldr	r3, [pc, #336]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023d4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023dc:	4950      	ldr	r1, [pc, #320]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d00a      	beq.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023f0:	4b4b      	ldr	r3, [pc, #300]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023f6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023fe:	4948      	ldr	r1, [pc, #288]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002400:	4313      	orrs	r3, r2
 8002402:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00a      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002412:	4b43      	ldr	r3, [pc, #268]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002414:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002418:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002420:	493f      	ldr	r1, [pc, #252]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002422:	4313      	orrs	r3, r2
 8002424:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d028      	beq.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002434:	4b3a      	ldr	r3, [pc, #232]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800243a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002442:	4937      	ldr	r1, [pc, #220]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002444:	4313      	orrs	r3, r2
 8002446:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800244e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002452:	d106      	bne.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002454:	4b32      	ldr	r3, [pc, #200]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	4a31      	ldr	r2, [pc, #196]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800245a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800245e:	60d3      	str	r3, [r2, #12]
 8002460:	e011      	b.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002466:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800246a:	d10c      	bne.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3304      	adds	r3, #4
 8002470:	2101      	movs	r1, #1
 8002472:	4618      	mov	r0, r3
 8002474:	f000 f8c8 	bl	8002608 <RCCEx_PLLSAI1_Config>
 8002478:	4603      	mov	r3, r0
 800247a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800247c:	7cfb      	ldrb	r3, [r7, #19]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002482:	7cfb      	ldrb	r3, [r7, #19]
 8002484:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d028      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002492:	4b23      	ldr	r3, [pc, #140]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002494:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002498:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024a0:	491f      	ldr	r1, [pc, #124]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80024b0:	d106      	bne.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024b2:	4b1b      	ldr	r3, [pc, #108]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	4a1a      	ldr	r2, [pc, #104]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80024bc:	60d3      	str	r3, [r2, #12]
 80024be:	e011      	b.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80024c8:	d10c      	bne.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	3304      	adds	r3, #4
 80024ce:	2101      	movs	r1, #1
 80024d0:	4618      	mov	r0, r3
 80024d2:	f000 f899 	bl	8002608 <RCCEx_PLLSAI1_Config>
 80024d6:	4603      	mov	r3, r0
 80024d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024da:	7cfb      	ldrb	r3, [r7, #19]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80024e0:	7cfb      	ldrb	r3, [r7, #19]
 80024e2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d02b      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80024f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024fe:	4908      	ldr	r1, [pc, #32]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002500:	4313      	orrs	r3, r2
 8002502:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800250a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800250e:	d109      	bne.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002510:	4b03      	ldr	r3, [pc, #12]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	4a02      	ldr	r2, [pc, #8]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002516:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800251a:	60d3      	str	r3, [r2, #12]
 800251c:	e014      	b.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800251e:	bf00      	nop
 8002520:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002528:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800252c:	d10c      	bne.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	3304      	adds	r3, #4
 8002532:	2101      	movs	r1, #1
 8002534:	4618      	mov	r0, r3
 8002536:	f000 f867 	bl	8002608 <RCCEx_PLLSAI1_Config>
 800253a:	4603      	mov	r3, r0
 800253c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800253e:	7cfb      	ldrb	r3, [r7, #19]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002544:	7cfb      	ldrb	r3, [r7, #19]
 8002546:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d02f      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002554:	4b2b      	ldr	r3, [pc, #172]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002556:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800255a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002562:	4928      	ldr	r1, [pc, #160]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002564:	4313      	orrs	r3, r2
 8002566:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800256e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002572:	d10d      	bne.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	3304      	adds	r3, #4
 8002578:	2102      	movs	r1, #2
 800257a:	4618      	mov	r0, r3
 800257c:	f000 f844 	bl	8002608 <RCCEx_PLLSAI1_Config>
 8002580:	4603      	mov	r3, r0
 8002582:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002584:	7cfb      	ldrb	r3, [r7, #19]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d014      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800258a:	7cfb      	ldrb	r3, [r7, #19]
 800258c:	74bb      	strb	r3, [r7, #18]
 800258e:	e011      	b.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002594:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002598:	d10c      	bne.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	3320      	adds	r3, #32
 800259e:	2102      	movs	r1, #2
 80025a0:	4618      	mov	r0, r3
 80025a2:	f000 f925 	bl	80027f0 <RCCEx_PLLSAI2_Config>
 80025a6:	4603      	mov	r3, r0
 80025a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025aa:	7cfb      	ldrb	r3, [r7, #19]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80025b0:	7cfb      	ldrb	r3, [r7, #19]
 80025b2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d00a      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80025c0:	4b10      	ldr	r3, [pc, #64]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025c6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80025ce:	490d      	ldr	r1, [pc, #52]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00b      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80025e2:	4b08      	ldr	r3, [pc, #32]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025e8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80025f2:	4904      	ldr	r1, [pc, #16]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80025fa:	7cbb      	ldrb	r3, [r7, #18]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3718      	adds	r7, #24
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	40021000 	.word	0x40021000

08002608 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002612:	2300      	movs	r3, #0
 8002614:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002616:	4b75      	ldr	r3, [pc, #468]	@ (80027ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	f003 0303 	and.w	r3, r3, #3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d018      	beq.n	8002654 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002622:	4b72      	ldr	r3, [pc, #456]	@ (80027ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	f003 0203 	and.w	r2, r3, #3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	429a      	cmp	r2, r3
 8002630:	d10d      	bne.n	800264e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
       ||
 8002636:	2b00      	cmp	r3, #0
 8002638:	d009      	beq.n	800264e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800263a:	4b6c      	ldr	r3, [pc, #432]	@ (80027ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	091b      	lsrs	r3, r3, #4
 8002640:	f003 0307 	and.w	r3, r3, #7
 8002644:	1c5a      	adds	r2, r3, #1
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
       ||
 800264a:	429a      	cmp	r2, r3
 800264c:	d047      	beq.n	80026de <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	73fb      	strb	r3, [r7, #15]
 8002652:	e044      	b.n	80026de <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2b03      	cmp	r3, #3
 800265a:	d018      	beq.n	800268e <RCCEx_PLLSAI1_Config+0x86>
 800265c:	2b03      	cmp	r3, #3
 800265e:	d825      	bhi.n	80026ac <RCCEx_PLLSAI1_Config+0xa4>
 8002660:	2b01      	cmp	r3, #1
 8002662:	d002      	beq.n	800266a <RCCEx_PLLSAI1_Config+0x62>
 8002664:	2b02      	cmp	r3, #2
 8002666:	d009      	beq.n	800267c <RCCEx_PLLSAI1_Config+0x74>
 8002668:	e020      	b.n	80026ac <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800266a:	4b60      	ldr	r3, [pc, #384]	@ (80027ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d11d      	bne.n	80026b2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800267a:	e01a      	b.n	80026b2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800267c:	4b5b      	ldr	r3, [pc, #364]	@ (80027ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002684:	2b00      	cmp	r3, #0
 8002686:	d116      	bne.n	80026b6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800268c:	e013      	b.n	80026b6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800268e:	4b57      	ldr	r3, [pc, #348]	@ (80027ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d10f      	bne.n	80026ba <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800269a:	4b54      	ldr	r3, [pc, #336]	@ (80027ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d109      	bne.n	80026ba <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80026aa:	e006      	b.n	80026ba <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	73fb      	strb	r3, [r7, #15]
      break;
 80026b0:	e004      	b.n	80026bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026b2:	bf00      	nop
 80026b4:	e002      	b.n	80026bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026b6:	bf00      	nop
 80026b8:	e000      	b.n	80026bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80026bc:	7bfb      	ldrb	r3, [r7, #15]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d10d      	bne.n	80026de <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80026c2:	4b4a      	ldr	r3, [pc, #296]	@ (80027ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6819      	ldr	r1, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	3b01      	subs	r3, #1
 80026d4:	011b      	lsls	r3, r3, #4
 80026d6:	430b      	orrs	r3, r1
 80026d8:	4944      	ldr	r1, [pc, #272]	@ (80027ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80026de:	7bfb      	ldrb	r3, [r7, #15]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d17d      	bne.n	80027e0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80026e4:	4b41      	ldr	r3, [pc, #260]	@ (80027ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a40      	ldr	r2, [pc, #256]	@ (80027ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80026ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026f0:	f7fe fb4a 	bl	8000d88 <HAL_GetTick>
 80026f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026f6:	e009      	b.n	800270c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026f8:	f7fe fb46 	bl	8000d88 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b02      	cmp	r3, #2
 8002704:	d902      	bls.n	800270c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	73fb      	strb	r3, [r7, #15]
        break;
 800270a:	e005      	b.n	8002718 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800270c:	4b37      	ldr	r3, [pc, #220]	@ (80027ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1ef      	bne.n	80026f8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002718:	7bfb      	ldrb	r3, [r7, #15]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d160      	bne.n	80027e0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d111      	bne.n	8002748 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002724:	4b31      	ldr	r3, [pc, #196]	@ (80027ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800272c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	6892      	ldr	r2, [r2, #8]
 8002734:	0211      	lsls	r1, r2, #8
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	68d2      	ldr	r2, [r2, #12]
 800273a:	0912      	lsrs	r2, r2, #4
 800273c:	0452      	lsls	r2, r2, #17
 800273e:	430a      	orrs	r2, r1
 8002740:	492a      	ldr	r1, [pc, #168]	@ (80027ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002742:	4313      	orrs	r3, r2
 8002744:	610b      	str	r3, [r1, #16]
 8002746:	e027      	b.n	8002798 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d112      	bne.n	8002774 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800274e:	4b27      	ldr	r3, [pc, #156]	@ (80027ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002756:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	6892      	ldr	r2, [r2, #8]
 800275e:	0211      	lsls	r1, r2, #8
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	6912      	ldr	r2, [r2, #16]
 8002764:	0852      	lsrs	r2, r2, #1
 8002766:	3a01      	subs	r2, #1
 8002768:	0552      	lsls	r2, r2, #21
 800276a:	430a      	orrs	r2, r1
 800276c:	491f      	ldr	r1, [pc, #124]	@ (80027ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800276e:	4313      	orrs	r3, r2
 8002770:	610b      	str	r3, [r1, #16]
 8002772:	e011      	b.n	8002798 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002774:	4b1d      	ldr	r3, [pc, #116]	@ (80027ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800277c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	6892      	ldr	r2, [r2, #8]
 8002784:	0211      	lsls	r1, r2, #8
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	6952      	ldr	r2, [r2, #20]
 800278a:	0852      	lsrs	r2, r2, #1
 800278c:	3a01      	subs	r2, #1
 800278e:	0652      	lsls	r2, r2, #25
 8002790:	430a      	orrs	r2, r1
 8002792:	4916      	ldr	r1, [pc, #88]	@ (80027ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002794:	4313      	orrs	r3, r2
 8002796:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002798:	4b14      	ldr	r3, [pc, #80]	@ (80027ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a13      	ldr	r2, [pc, #76]	@ (80027ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800279e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80027a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a4:	f7fe faf0 	bl	8000d88 <HAL_GetTick>
 80027a8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027aa:	e009      	b.n	80027c0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027ac:	f7fe faec 	bl	8000d88 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d902      	bls.n	80027c0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	73fb      	strb	r3, [r7, #15]
          break;
 80027be:	e005      	b.n	80027cc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027c0:	4b0a      	ldr	r3, [pc, #40]	@ (80027ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0ef      	beq.n	80027ac <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80027cc:	7bfb      	ldrb	r3, [r7, #15]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d106      	bne.n	80027e0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80027d2:	4b06      	ldr	r3, [pc, #24]	@ (80027ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80027d4:	691a      	ldr	r2, [r3, #16]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	4904      	ldr	r1, [pc, #16]	@ (80027ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80027e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40021000 	.word	0x40021000

080027f0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027fa:	2300      	movs	r3, #0
 80027fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027fe:	4b6a      	ldr	r3, [pc, #424]	@ (80029a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	f003 0303 	and.w	r3, r3, #3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d018      	beq.n	800283c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800280a:	4b67      	ldr	r3, [pc, #412]	@ (80029a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	f003 0203 	and.w	r2, r3, #3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	429a      	cmp	r2, r3
 8002818:	d10d      	bne.n	8002836 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
       ||
 800281e:	2b00      	cmp	r3, #0
 8002820:	d009      	beq.n	8002836 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002822:	4b61      	ldr	r3, [pc, #388]	@ (80029a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	091b      	lsrs	r3, r3, #4
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	1c5a      	adds	r2, r3, #1
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
       ||
 8002832:	429a      	cmp	r2, r3
 8002834:	d047      	beq.n	80028c6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	73fb      	strb	r3, [r7, #15]
 800283a:	e044      	b.n	80028c6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2b03      	cmp	r3, #3
 8002842:	d018      	beq.n	8002876 <RCCEx_PLLSAI2_Config+0x86>
 8002844:	2b03      	cmp	r3, #3
 8002846:	d825      	bhi.n	8002894 <RCCEx_PLLSAI2_Config+0xa4>
 8002848:	2b01      	cmp	r3, #1
 800284a:	d002      	beq.n	8002852 <RCCEx_PLLSAI2_Config+0x62>
 800284c:	2b02      	cmp	r3, #2
 800284e:	d009      	beq.n	8002864 <RCCEx_PLLSAI2_Config+0x74>
 8002850:	e020      	b.n	8002894 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002852:	4b55      	ldr	r3, [pc, #340]	@ (80029a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d11d      	bne.n	800289a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002862:	e01a      	b.n	800289a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002864:	4b50      	ldr	r3, [pc, #320]	@ (80029a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800286c:	2b00      	cmp	r3, #0
 800286e:	d116      	bne.n	800289e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002874:	e013      	b.n	800289e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002876:	4b4c      	ldr	r3, [pc, #304]	@ (80029a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10f      	bne.n	80028a2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002882:	4b49      	ldr	r3, [pc, #292]	@ (80029a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d109      	bne.n	80028a2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002892:	e006      	b.n	80028a2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	73fb      	strb	r3, [r7, #15]
      break;
 8002898:	e004      	b.n	80028a4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800289a:	bf00      	nop
 800289c:	e002      	b.n	80028a4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800289e:	bf00      	nop
 80028a0:	e000      	b.n	80028a4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80028a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80028a4:	7bfb      	ldrb	r3, [r7, #15]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d10d      	bne.n	80028c6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80028aa:	4b3f      	ldr	r3, [pc, #252]	@ (80029a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6819      	ldr	r1, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	3b01      	subs	r3, #1
 80028bc:	011b      	lsls	r3, r3, #4
 80028be:	430b      	orrs	r3, r1
 80028c0:	4939      	ldr	r1, [pc, #228]	@ (80029a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d167      	bne.n	800299c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80028cc:	4b36      	ldr	r3, [pc, #216]	@ (80029a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a35      	ldr	r2, [pc, #212]	@ (80029a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028d8:	f7fe fa56 	bl	8000d88 <HAL_GetTick>
 80028dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80028de:	e009      	b.n	80028f4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80028e0:	f7fe fa52 	bl	8000d88 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d902      	bls.n	80028f4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	73fb      	strb	r3, [r7, #15]
        break;
 80028f2:	e005      	b.n	8002900 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80028f4:	4b2c      	ldr	r3, [pc, #176]	@ (80029a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1ef      	bne.n	80028e0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002900:	7bfb      	ldrb	r3, [r7, #15]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d14a      	bne.n	800299c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d111      	bne.n	8002930 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800290c:	4b26      	ldr	r3, [pc, #152]	@ (80029a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002914:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	6892      	ldr	r2, [r2, #8]
 800291c:	0211      	lsls	r1, r2, #8
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	68d2      	ldr	r2, [r2, #12]
 8002922:	0912      	lsrs	r2, r2, #4
 8002924:	0452      	lsls	r2, r2, #17
 8002926:	430a      	orrs	r2, r1
 8002928:	491f      	ldr	r1, [pc, #124]	@ (80029a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800292a:	4313      	orrs	r3, r2
 800292c:	614b      	str	r3, [r1, #20]
 800292e:	e011      	b.n	8002954 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002930:	4b1d      	ldr	r3, [pc, #116]	@ (80029a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002938:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	6892      	ldr	r2, [r2, #8]
 8002940:	0211      	lsls	r1, r2, #8
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	6912      	ldr	r2, [r2, #16]
 8002946:	0852      	lsrs	r2, r2, #1
 8002948:	3a01      	subs	r2, #1
 800294a:	0652      	lsls	r2, r2, #25
 800294c:	430a      	orrs	r2, r1
 800294e:	4916      	ldr	r1, [pc, #88]	@ (80029a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002950:	4313      	orrs	r3, r2
 8002952:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002954:	4b14      	ldr	r3, [pc, #80]	@ (80029a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a13      	ldr	r2, [pc, #76]	@ (80029a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800295a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800295e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002960:	f7fe fa12 	bl	8000d88 <HAL_GetTick>
 8002964:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002966:	e009      	b.n	800297c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002968:	f7fe fa0e 	bl	8000d88 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d902      	bls.n	800297c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	73fb      	strb	r3, [r7, #15]
          break;
 800297a:	e005      	b.n	8002988 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800297c:	4b0a      	ldr	r3, [pc, #40]	@ (80029a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d0ef      	beq.n	8002968 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002988:	7bfb      	ldrb	r3, [r7, #15]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d106      	bne.n	800299c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800298e:	4b06      	ldr	r3, [pc, #24]	@ (80029a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002990:	695a      	ldr	r2, [r3, #20]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	4904      	ldr	r1, [pc, #16]	@ (80029a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002998:	4313      	orrs	r3, r2
 800299a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800299c:	7bfb      	ldrb	r3, [r7, #15]
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40021000 	.word	0x40021000

080029ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e095      	b.n	8002aea <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d108      	bne.n	80029d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80029ce:	d009      	beq.n	80029e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	61da      	str	r2, [r3, #28]
 80029d6:	e005      	b.n	80029e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d106      	bne.n	8002a04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f7fd ff32 	bl	8000868 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2202      	movs	r2, #2
 8002a08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a1a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002a24:	d902      	bls.n	8002a2c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002a26:	2300      	movs	r3, #0
 8002a28:	60fb      	str	r3, [r7, #12]
 8002a2a:	e002      	b.n	8002a32 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002a2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a30:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002a3a:	d007      	beq.n	8002a4c <HAL_SPI_Init+0xa0>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002a44:	d002      	beq.n	8002a4c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002a5c:	431a      	orrs	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	431a      	orrs	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	695b      	ldr	r3, [r3, #20]
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	431a      	orrs	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	69db      	ldr	r3, [r3, #28]
 8002a80:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a84:	431a      	orrs	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a8e:	ea42 0103 	orr.w	r1, r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a96:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	0c1b      	lsrs	r3, r3, #16
 8002aa8:	f003 0204 	and.w	r2, r3, #4
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab0:	f003 0310 	and.w	r3, r3, #16
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aba:	f003 0308 	and.w	r3, r3, #8
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002ac8:	ea42 0103 	orr.w	r1, r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b088      	sub	sp, #32
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	60f8      	str	r0, [r7, #12]
 8002afa:	60b9      	str	r1, [r7, #8]
 8002afc:	603b      	str	r3, [r7, #0]
 8002afe:	4613      	mov	r3, r2
 8002b00:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b02:	f7fe f941 	bl	8000d88 <HAL_GetTick>
 8002b06:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002b08:	88fb      	ldrh	r3, [r7, #6]
 8002b0a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d001      	beq.n	8002b1c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002b18:	2302      	movs	r3, #2
 8002b1a:	e15c      	b.n	8002dd6 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d002      	beq.n	8002b28 <HAL_SPI_Transmit+0x36>
 8002b22:	88fb      	ldrh	r3, [r7, #6]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d101      	bne.n	8002b2c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e154      	b.n	8002dd6 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d101      	bne.n	8002b3a <HAL_SPI_Transmit+0x48>
 8002b36:	2302      	movs	r3, #2
 8002b38:	e14d      	b.n	8002dd6 <HAL_SPI_Transmit+0x2e4>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2203      	movs	r2, #3
 8002b46:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	68ba      	ldr	r2, [r7, #8]
 8002b54:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	88fa      	ldrh	r2, [r7, #6]
 8002b5a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	88fa      	ldrh	r2, [r7, #6]
 8002b60:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b8c:	d10f      	bne.n	8002bae <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b9c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002bac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bb8:	2b40      	cmp	r3, #64	@ 0x40
 8002bba:	d007      	beq.n	8002bcc <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002bca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002bd4:	d952      	bls.n	8002c7c <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d002      	beq.n	8002be4 <HAL_SPI_Transmit+0xf2>
 8002bde:	8b7b      	ldrh	r3, [r7, #26]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d145      	bne.n	8002c70 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002be8:	881a      	ldrh	r2, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bf4:	1c9a      	adds	r2, r3, #2
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	3b01      	subs	r3, #1
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002c08:	e032      	b.n	8002c70 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d112      	bne.n	8002c3e <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c1c:	881a      	ldrh	r2, [r3, #0]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c28:	1c9a      	adds	r2, r3, #2
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	3b01      	subs	r3, #1
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002c3c:	e018      	b.n	8002c70 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c3e:	f7fe f8a3 	bl	8000d88 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d803      	bhi.n	8002c56 <HAL_SPI_Transmit+0x164>
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c54:	d102      	bne.n	8002c5c <HAL_SPI_Transmit+0x16a>
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d109      	bne.n	8002c70 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e0b2      	b.n	8002dd6 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1c7      	bne.n	8002c0a <HAL_SPI_Transmit+0x118>
 8002c7a:	e083      	b.n	8002d84 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d002      	beq.n	8002c8a <HAL_SPI_Transmit+0x198>
 8002c84:	8b7b      	ldrh	r3, [r7, #26]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d177      	bne.n	8002d7a <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d912      	bls.n	8002cba <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c98:	881a      	ldrh	r2, [r3, #0]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ca4:	1c9a      	adds	r2, r3, #2
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	3b02      	subs	r3, #2
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002cb8:	e05f      	b.n	8002d7a <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	330c      	adds	r3, #12
 8002cc4:	7812      	ldrb	r2, [r2, #0]
 8002cc6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ccc:	1c5a      	adds	r2, r3, #1
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	b29a      	uxth	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002ce0:	e04b      	b.n	8002d7a <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d12b      	bne.n	8002d48 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d912      	bls.n	8002d20 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cfe:	881a      	ldrh	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d0a:	1c9a      	adds	r2, r3, #2
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	3b02      	subs	r3, #2
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002d1e:	e02c      	b.n	8002d7a <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	330c      	adds	r3, #12
 8002d2a:	7812      	ldrb	r2, [r2, #0]
 8002d2c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d32:	1c5a      	adds	r2, r3, #1
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002d46:	e018      	b.n	8002d7a <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d48:	f7fe f81e 	bl	8000d88 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	683a      	ldr	r2, [r7, #0]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d803      	bhi.n	8002d60 <HAL_SPI_Transmit+0x26e>
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d5e:	d102      	bne.n	8002d66 <HAL_SPI_Transmit+0x274>
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d109      	bne.n	8002d7a <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e02d      	b.n	8002dd6 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1ae      	bne.n	8002ce2 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d84:	69fa      	ldr	r2, [r7, #28]
 8002d86:	6839      	ldr	r1, [r7, #0]
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f000 fcf5 	bl	8003778 <SPI_EndRxTxTransaction>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d002      	beq.n	8002d9a <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2220      	movs	r2, #32
 8002d98:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d10a      	bne.n	8002db8 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002da2:	2300      	movs	r3, #0
 8002da4:	617b      	str	r3, [r7, #20]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	617b      	str	r3, [r7, #20]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	617b      	str	r3, [r7, #20]
 8002db6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d001      	beq.n	8002dd4 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e000      	b.n	8002dd6 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
  }
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3720      	adds	r7, #32
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b088      	sub	sp, #32
 8002de2:	af02      	add	r7, sp, #8
 8002de4:	60f8      	str	r0, [r7, #12]
 8002de6:	60b9      	str	r1, [r7, #8]
 8002de8:	603b      	str	r3, [r7, #0]
 8002dea:	4613      	mov	r3, r2
 8002dec:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d001      	beq.n	8002dfe <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	e123      	b.n	8003046 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e06:	d112      	bne.n	8002e2e <HAL_SPI_Receive+0x50>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10e      	bne.n	8002e2e <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2204      	movs	r2, #4
 8002e14:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002e18:	88fa      	ldrh	r2, [r7, #6]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	9300      	str	r3, [sp, #0]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	68ba      	ldr	r2, [r7, #8]
 8002e22:	68b9      	ldr	r1, [r7, #8]
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f000 f912 	bl	800304e <HAL_SPI_TransmitReceive>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	e10b      	b.n	8003046 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e2e:	f7fd ffab 	bl	8000d88 <HAL_GetTick>
 8002e32:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d002      	beq.n	8002e40 <HAL_SPI_Receive+0x62>
 8002e3a:	88fb      	ldrh	r3, [r7, #6]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d101      	bne.n	8002e44 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e100      	b.n	8003046 <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d101      	bne.n	8002e52 <HAL_SPI_Receive+0x74>
 8002e4e:	2302      	movs	r3, #2
 8002e50:	e0f9      	b.n	8003046 <HAL_SPI_Receive+0x268>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2204      	movs	r2, #4
 8002e5e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	68ba      	ldr	r2, [r7, #8]
 8002e6c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	88fa      	ldrh	r2, [r7, #6]
 8002e72:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	88fa      	ldrh	r2, [r7, #6]
 8002e7a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2200      	movs	r2, #0
 8002e82:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002ea4:	d908      	bls.n	8002eb8 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	685a      	ldr	r2, [r3, #4]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002eb4:	605a      	str	r2, [r3, #4]
 8002eb6:	e007      	b.n	8002ec8 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	685a      	ldr	r2, [r3, #4]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002ec6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ed0:	d10f      	bne.n	8002ef2 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ee0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002ef0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002efc:	2b40      	cmp	r3, #64	@ 0x40
 8002efe:	d007      	beq.n	8002f10 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f0e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f18:	d875      	bhi.n	8003006 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002f1a:	e037      	b.n	8002f8c <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d117      	bne.n	8002f5a <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f103 020c 	add.w	r2, r3, #12
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f36:	7812      	ldrb	r2, [r2, #0]
 8002f38:	b2d2      	uxtb	r2, r2
 8002f3a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f40:	1c5a      	adds	r2, r3, #1
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002f58:	e018      	b.n	8002f8c <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f5a:	f7fd ff15 	bl	8000d88 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d803      	bhi.n	8002f72 <HAL_SPI_Receive+0x194>
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f70:	d102      	bne.n	8002f78 <HAL_SPI_Receive+0x19a>
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d109      	bne.n	8002f8c <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e05c      	b.n	8003046 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1c1      	bne.n	8002f1c <HAL_SPI_Receive+0x13e>
 8002f98:	e03b      	b.n	8003012 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d115      	bne.n	8002fd4 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68da      	ldr	r2, [r3, #12]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb2:	b292      	uxth	r2, r2
 8002fb4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fba:	1c9a      	adds	r2, r3, #2
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002fd2:	e018      	b.n	8003006 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fd4:	f7fd fed8 	bl	8000d88 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d803      	bhi.n	8002fec <HAL_SPI_Receive+0x20e>
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fea:	d102      	bne.n	8002ff2 <HAL_SPI_Receive+0x214>
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d109      	bne.n	8003006 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e01f      	b.n	8003046 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800300c:	b29b      	uxth	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1c3      	bne.n	8002f9a <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	6839      	ldr	r1, [r7, #0]
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f000 fb56 	bl	80036c8 <SPI_EndRxTransaction>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d002      	beq.n	8003028 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2220      	movs	r2, #32
 8003026:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e000      	b.n	8003046 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8003044:	2300      	movs	r3, #0
  }
}
 8003046:	4618      	mov	r0, r3
 8003048:	3718      	adds	r7, #24
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b08a      	sub	sp, #40	@ 0x28
 8003052:	af00      	add	r7, sp, #0
 8003054:	60f8      	str	r0, [r7, #12]
 8003056:	60b9      	str	r1, [r7, #8]
 8003058:	607a      	str	r2, [r7, #4]
 800305a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800305c:	2301      	movs	r3, #1
 800305e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003060:	f7fd fe92 	bl	8000d88 <HAL_GetTick>
 8003064:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800306c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003074:	887b      	ldrh	r3, [r7, #2]
 8003076:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8003078:	887b      	ldrh	r3, [r7, #2]
 800307a:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800307c:	7ffb      	ldrb	r3, [r7, #31]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d00c      	beq.n	800309c <HAL_SPI_TransmitReceive+0x4e>
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003088:	d106      	bne.n	8003098 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d102      	bne.n	8003098 <HAL_SPI_TransmitReceive+0x4a>
 8003092:	7ffb      	ldrb	r3, [r7, #31]
 8003094:	2b04      	cmp	r3, #4
 8003096:	d001      	beq.n	800309c <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003098:	2302      	movs	r3, #2
 800309a:	e1f3      	b.n	8003484 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d005      	beq.n	80030ae <HAL_SPI_TransmitReceive+0x60>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d002      	beq.n	80030ae <HAL_SPI_TransmitReceive+0x60>
 80030a8:	887b      	ldrh	r3, [r7, #2]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e1e8      	b.n	8003484 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d101      	bne.n	80030c0 <HAL_SPI_TransmitReceive+0x72>
 80030bc:	2302      	movs	r3, #2
 80030be:	e1e1      	b.n	8003484 <HAL_SPI_TransmitReceive+0x436>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b04      	cmp	r3, #4
 80030d2:	d003      	beq.n	80030dc <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2205      	movs	r2, #5
 80030d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	887a      	ldrh	r2, [r7, #2]
 80030ec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	887a      	ldrh	r2, [r7, #2]
 80030f4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	68ba      	ldr	r2, [r7, #8]
 80030fc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	887a      	ldrh	r2, [r7, #2]
 8003102:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	887a      	ldrh	r2, [r7, #2]
 8003108:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800311e:	d802      	bhi.n	8003126 <HAL_SPI_TransmitReceive+0xd8>
 8003120:	8abb      	ldrh	r3, [r7, #20]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d908      	bls.n	8003138 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003134:	605a      	str	r2, [r3, #4]
 8003136:	e007      	b.n	8003148 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685a      	ldr	r2, [r3, #4]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003146:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003152:	2b40      	cmp	r3, #64	@ 0x40
 8003154:	d007      	beq.n	8003166 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003164:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800316e:	f240 8083 	bls.w	8003278 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d002      	beq.n	8003180 <HAL_SPI_TransmitReceive+0x132>
 800317a:	8afb      	ldrh	r3, [r7, #22]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d16f      	bne.n	8003260 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003184:	881a      	ldrh	r2, [r3, #0]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003190:	1c9a      	adds	r2, r3, #2
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800319a:	b29b      	uxth	r3, r3
 800319c:	3b01      	subs	r3, #1
 800319e:	b29a      	uxth	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031a4:	e05c      	b.n	8003260 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d11b      	bne.n	80031ec <HAL_SPI_TransmitReceive+0x19e>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d016      	beq.n	80031ec <HAL_SPI_TransmitReceive+0x19e>
 80031be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d113      	bne.n	80031ec <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031c8:	881a      	ldrh	r2, [r3, #0]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031d4:	1c9a      	adds	r2, r3, #2
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031de:	b29b      	uxth	r3, r3
 80031e0:	3b01      	subs	r3, #1
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80031e8:	2300      	movs	r3, #0
 80031ea:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d11c      	bne.n	8003234 <HAL_SPI_TransmitReceive+0x1e6>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003200:	b29b      	uxth	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d016      	beq.n	8003234 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68da      	ldr	r2, [r3, #12]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003210:	b292      	uxth	r2, r2
 8003212:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003218:	1c9a      	adds	r2, r3, #2
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003224:	b29b      	uxth	r3, r3
 8003226:	3b01      	subs	r3, #1
 8003228:	b29a      	uxth	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003230:	2301      	movs	r3, #1
 8003232:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003234:	f7fd fda8 	bl	8000d88 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	6a3b      	ldr	r3, [r7, #32]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003240:	429a      	cmp	r2, r3
 8003242:	d80d      	bhi.n	8003260 <HAL_SPI_TransmitReceive+0x212>
 8003244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800324a:	d009      	beq.n	8003260 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e111      	b.n	8003484 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003264:	b29b      	uxth	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d19d      	bne.n	80031a6 <HAL_SPI_TransmitReceive+0x158>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003270:	b29b      	uxth	r3, r3
 8003272:	2b00      	cmp	r3, #0
 8003274:	d197      	bne.n	80031a6 <HAL_SPI_TransmitReceive+0x158>
 8003276:	e0e5      	b.n	8003444 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d003      	beq.n	8003288 <HAL_SPI_TransmitReceive+0x23a>
 8003280:	8afb      	ldrh	r3, [r7, #22]
 8003282:	2b01      	cmp	r3, #1
 8003284:	f040 80d1 	bne.w	800342a <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800328c:	b29b      	uxth	r3, r3
 800328e:	2b01      	cmp	r3, #1
 8003290:	d912      	bls.n	80032b8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003296:	881a      	ldrh	r2, [r3, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032a2:	1c9a      	adds	r2, r3, #2
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	3b02      	subs	r3, #2
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80032b6:	e0b8      	b.n	800342a <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	330c      	adds	r3, #12
 80032c2:	7812      	ldrb	r2, [r2, #0]
 80032c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032ca:	1c5a      	adds	r2, r3, #1
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	3b01      	subs	r3, #1
 80032d8:	b29a      	uxth	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032de:	e0a4      	b.n	800342a <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d134      	bne.n	8003358 <HAL_SPI_TransmitReceive+0x30a>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d02f      	beq.n	8003358 <HAL_SPI_TransmitReceive+0x30a>
 80032f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d12c      	bne.n	8003358 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003302:	b29b      	uxth	r3, r3
 8003304:	2b01      	cmp	r3, #1
 8003306:	d912      	bls.n	800332e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800330c:	881a      	ldrh	r2, [r3, #0]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003318:	1c9a      	adds	r2, r3, #2
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003322:	b29b      	uxth	r3, r3
 8003324:	3b02      	subs	r3, #2
 8003326:	b29a      	uxth	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800332c:	e012      	b.n	8003354 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	330c      	adds	r3, #12
 8003338:	7812      	ldrb	r2, [r2, #0]
 800333a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003340:	1c5a      	adds	r2, r3, #1
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800334a:	b29b      	uxth	r3, r3
 800334c:	3b01      	subs	r3, #1
 800334e:	b29a      	uxth	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003354:	2300      	movs	r3, #0
 8003356:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b01      	cmp	r3, #1
 8003364:	d148      	bne.n	80033f8 <HAL_SPI_TransmitReceive+0x3aa>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800336c:	b29b      	uxth	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d042      	beq.n	80033f8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003378:	b29b      	uxth	r3, r3
 800337a:	2b01      	cmp	r3, #1
 800337c:	d923      	bls.n	80033c6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68da      	ldr	r2, [r3, #12]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003388:	b292      	uxth	r2, r2
 800338a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003390:	1c9a      	adds	r2, r3, #2
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800339c:	b29b      	uxth	r3, r3
 800339e:	3b02      	subs	r3, #2
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d81f      	bhi.n	80033f4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	685a      	ldr	r2, [r3, #4]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80033c2:	605a      	str	r2, [r3, #4]
 80033c4:	e016      	b.n	80033f4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f103 020c 	add.w	r2, r3, #12
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d2:	7812      	ldrb	r2, [r2, #0]
 80033d4:	b2d2      	uxtb	r2, r2
 80033d6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033dc:	1c5a      	adds	r2, r3, #1
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	3b01      	subs	r3, #1
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80033f4:	2301      	movs	r3, #1
 80033f6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80033f8:	f7fd fcc6 	bl	8000d88 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	6a3b      	ldr	r3, [r7, #32]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003404:	429a      	cmp	r2, r3
 8003406:	d803      	bhi.n	8003410 <HAL_SPI_TransmitReceive+0x3c2>
 8003408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800340a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800340e:	d102      	bne.n	8003416 <HAL_SPI_TransmitReceive+0x3c8>
 8003410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003412:	2b00      	cmp	r3, #0
 8003414:	d109      	bne.n	800342a <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e02c      	b.n	8003484 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800342e:	b29b      	uxth	r3, r3
 8003430:	2b00      	cmp	r3, #0
 8003432:	f47f af55 	bne.w	80032e0 <HAL_SPI_TransmitReceive+0x292>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800343c:	b29b      	uxth	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	f47f af4e 	bne.w	80032e0 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003444:	6a3a      	ldr	r2, [r7, #32]
 8003446:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f000 f995 	bl	8003778 <SPI_EndRxTxTransaction>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d008      	beq.n	8003466 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2220      	movs	r2, #32
 8003458:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e00e      	b.n	8003484 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e000      	b.n	8003484 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8003482:	2300      	movs	r3, #0
  }
}
 8003484:	4618      	mov	r0, r3
 8003486:	3728      	adds	r7, #40	@ 0x28
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b088      	sub	sp, #32
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	603b      	str	r3, [r7, #0]
 8003498:	4613      	mov	r3, r2
 800349a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800349c:	f7fd fc74 	bl	8000d88 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034a4:	1a9b      	subs	r3, r3, r2
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	4413      	add	r3, r2
 80034aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80034ac:	f7fd fc6c 	bl	8000d88 <HAL_GetTick>
 80034b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80034b2:	4b39      	ldr	r3, [pc, #228]	@ (8003598 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	015b      	lsls	r3, r3, #5
 80034b8:	0d1b      	lsrs	r3, r3, #20
 80034ba:	69fa      	ldr	r2, [r7, #28]
 80034bc:	fb02 f303 	mul.w	r3, r2, r3
 80034c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034c2:	e054      	b.n	800356e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ca:	d050      	beq.n	800356e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80034cc:	f7fd fc5c 	bl	8000d88 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	69fa      	ldr	r2, [r7, #28]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d902      	bls.n	80034e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d13d      	bne.n	800355e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80034f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034fa:	d111      	bne.n	8003520 <SPI_WaitFlagStateUntilTimeout+0x94>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003504:	d004      	beq.n	8003510 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800350e:	d107      	bne.n	8003520 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800351e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003524:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003528:	d10f      	bne.n	800354a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003538:	601a      	str	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003548:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e017      	b.n	800358e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d101      	bne.n	8003568 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003564:	2300      	movs	r3, #0
 8003566:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	3b01      	subs	r3, #1
 800356c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	689a      	ldr	r2, [r3, #8]
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	4013      	ands	r3, r2
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	429a      	cmp	r2, r3
 800357c:	bf0c      	ite	eq
 800357e:	2301      	moveq	r3, #1
 8003580:	2300      	movne	r3, #0
 8003582:	b2db      	uxtb	r3, r3
 8003584:	461a      	mov	r2, r3
 8003586:	79fb      	ldrb	r3, [r7, #7]
 8003588:	429a      	cmp	r2, r3
 800358a:	d19b      	bne.n	80034c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3720      	adds	r7, #32
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	20000000 	.word	0x20000000

0800359c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b08a      	sub	sp, #40	@ 0x28
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
 80035a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80035aa:	2300      	movs	r3, #0
 80035ac:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80035ae:	f7fd fbeb 	bl	8000d88 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035b6:	1a9b      	subs	r3, r3, r2
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	4413      	add	r3, r2
 80035bc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80035be:	f7fd fbe3 	bl	8000d88 <HAL_GetTick>
 80035c2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	330c      	adds	r3, #12
 80035ca:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80035cc:	4b3d      	ldr	r3, [pc, #244]	@ (80036c4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	4613      	mov	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	4413      	add	r3, r2
 80035d6:	00da      	lsls	r2, r3, #3
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	0d1b      	lsrs	r3, r3, #20
 80035dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035de:	fb02 f303 	mul.w	r3, r2, r3
 80035e2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80035e4:	e060      	b.n	80036a8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80035ec:	d107      	bne.n	80035fe <SPI_WaitFifoStateUntilTimeout+0x62>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d104      	bne.n	80035fe <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80035fc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003604:	d050      	beq.n	80036a8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003606:	f7fd fbbf 	bl	8000d88 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	6a3b      	ldr	r3, [r7, #32]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003612:	429a      	cmp	r2, r3
 8003614:	d902      	bls.n	800361c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003618:	2b00      	cmp	r3, #0
 800361a:	d13d      	bne.n	8003698 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	685a      	ldr	r2, [r3, #4]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800362a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003634:	d111      	bne.n	800365a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800363e:	d004      	beq.n	800364a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003648:	d107      	bne.n	800365a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003658:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800365e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003662:	d10f      	bne.n	8003684 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003682:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e010      	b.n	80036ba <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800369e:	2300      	movs	r3, #0
 80036a0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	3b01      	subs	r3, #1
 80036a6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	689a      	ldr	r2, [r3, #8]
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	4013      	ands	r3, r2
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d196      	bne.n	80035e6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3728      	adds	r7, #40	@ 0x28
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	20000000 	.word	0x20000000

080036c8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af02      	add	r7, sp, #8
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036dc:	d111      	bne.n	8003702 <SPI_EndRxTransaction+0x3a>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036e6:	d004      	beq.n	80036f2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036f0:	d107      	bne.n	8003702 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003700:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	2200      	movs	r2, #0
 800370a:	2180      	movs	r1, #128	@ 0x80
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f7ff febd 	bl	800348c <SPI_WaitFlagStateUntilTimeout>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d007      	beq.n	8003728 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800371c:	f043 0220 	orr.w	r2, r3, #32
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e023      	b.n	8003770 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003730:	d11d      	bne.n	800376e <SPI_EndRxTransaction+0xa6>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800373a:	d004      	beq.n	8003746 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003744:	d113      	bne.n	800376e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	2200      	movs	r2, #0
 800374e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f7ff ff22 	bl	800359c <SPI_WaitFifoStateUntilTimeout>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d007      	beq.n	800376e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003762:	f043 0220 	orr.w	r2, r3, #32
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e000      	b.n	8003770 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b086      	sub	sp, #24
 800377c:	af02      	add	r7, sp, #8
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	2200      	movs	r2, #0
 800378c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f7ff ff03 	bl	800359c <SPI_WaitFifoStateUntilTimeout>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d007      	beq.n	80037ac <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037a0:	f043 0220 	orr.w	r2, r3, #32
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e027      	b.n	80037fc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	9300      	str	r3, [sp, #0]
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	2200      	movs	r2, #0
 80037b4:	2180      	movs	r1, #128	@ 0x80
 80037b6:	68f8      	ldr	r0, [r7, #12]
 80037b8:	f7ff fe68 	bl	800348c <SPI_WaitFlagStateUntilTimeout>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d007      	beq.n	80037d2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037c6:	f043 0220 	orr.w	r2, r3, #32
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e014      	b.n	80037fc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	9300      	str	r3, [sp, #0]
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	2200      	movs	r2, #0
 80037da:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f7ff fedc 	bl	800359c <SPI_WaitFifoStateUntilTimeout>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d007      	beq.n	80037fa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037ee:	f043 0220 	orr.w	r2, r3, #32
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e000      	b.n	80037fc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3710      	adds	r7, #16
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e040      	b.n	8003898 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800381a:	2b00      	cmp	r3, #0
 800381c:	d106      	bne.n	800382c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f7fd f9b8 	bl	8000b9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2224      	movs	r2, #36	@ 0x24
 8003830:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 0201 	bic.w	r2, r2, #1
 8003840:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003846:	2b00      	cmp	r3, #0
 8003848:	d002      	beq.n	8003850 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 fb6a 	bl	8003f24 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 f8af 	bl	80039b4 <UART_SetConfig>
 8003856:	4603      	mov	r3, r0
 8003858:	2b01      	cmp	r3, #1
 800385a:	d101      	bne.n	8003860 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e01b      	b.n	8003898 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800386e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	689a      	ldr	r2, [r3, #8]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800387e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f042 0201 	orr.w	r2, r2, #1
 800388e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 fbe9 	bl	8004068 <UART_CheckIdleState>
 8003896:	4603      	mov	r3, r0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3708      	adds	r7, #8
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b08a      	sub	sp, #40	@ 0x28
 80038a4:	af02      	add	r7, sp, #8
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	603b      	str	r3, [r7, #0]
 80038ac:	4613      	mov	r3, r2
 80038ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038b4:	2b20      	cmp	r3, #32
 80038b6:	d177      	bne.n	80039a8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d002      	beq.n	80038c4 <HAL_UART_Transmit+0x24>
 80038be:	88fb      	ldrh	r3, [r7, #6]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d101      	bne.n	80038c8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e070      	b.n	80039aa <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2221      	movs	r2, #33	@ 0x21
 80038d4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038d6:	f7fd fa57 	bl	8000d88 <HAL_GetTick>
 80038da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	88fa      	ldrh	r2, [r7, #6]
 80038e0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	88fa      	ldrh	r2, [r7, #6]
 80038e8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038f4:	d108      	bne.n	8003908 <HAL_UART_Transmit+0x68>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d104      	bne.n	8003908 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80038fe:	2300      	movs	r3, #0
 8003900:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	61bb      	str	r3, [r7, #24]
 8003906:	e003      	b.n	8003910 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800390c:	2300      	movs	r3, #0
 800390e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003910:	e02f      	b.n	8003972 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	9300      	str	r3, [sp, #0]
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	2200      	movs	r2, #0
 800391a:	2180      	movs	r1, #128	@ 0x80
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f000 fc4b 	bl	80041b8 <UART_WaitOnFlagUntilTimeout>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d004      	beq.n	8003932 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2220      	movs	r2, #32
 800392c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e03b      	b.n	80039aa <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10b      	bne.n	8003950 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	881a      	ldrh	r2, [r3, #0]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003944:	b292      	uxth	r2, r2
 8003946:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	3302      	adds	r3, #2
 800394c:	61bb      	str	r3, [r7, #24]
 800394e:	e007      	b.n	8003960 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	781a      	ldrb	r2, [r3, #0]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	3301      	adds	r3, #1
 800395e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003966:	b29b      	uxth	r3, r3
 8003968:	3b01      	subs	r3, #1
 800396a:	b29a      	uxth	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003978:	b29b      	uxth	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1c9      	bne.n	8003912 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	9300      	str	r3, [sp, #0]
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	2200      	movs	r2, #0
 8003986:	2140      	movs	r1, #64	@ 0x40
 8003988:	68f8      	ldr	r0, [r7, #12]
 800398a:	f000 fc15 	bl	80041b8 <UART_WaitOnFlagUntilTimeout>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d004      	beq.n	800399e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2220      	movs	r2, #32
 8003998:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e005      	b.n	80039aa <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2220      	movs	r2, #32
 80039a2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80039a4:	2300      	movs	r3, #0
 80039a6:	e000      	b.n	80039aa <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80039a8:	2302      	movs	r3, #2
  }
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3720      	adds	r7, #32
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
	...

080039b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039b8:	b08a      	sub	sp, #40	@ 0x28
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80039be:	2300      	movs	r3, #0
 80039c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	689a      	ldr	r2, [r3, #8]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	431a      	orrs	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	431a      	orrs	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	69db      	ldr	r3, [r3, #28]
 80039d8:	4313      	orrs	r3, r2
 80039da:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	4ba4      	ldr	r3, [pc, #656]	@ (8003c74 <UART_SetConfig+0x2c0>)
 80039e4:	4013      	ands	r3, r2
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	6812      	ldr	r2, [r2, #0]
 80039ea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80039ec:	430b      	orrs	r3, r1
 80039ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	68da      	ldr	r2, [r3, #12]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	430a      	orrs	r2, r1
 8003a04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a99      	ldr	r2, [pc, #612]	@ (8003c78 <UART_SetConfig+0x2c4>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d004      	beq.n	8003a20 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6a1b      	ldr	r3, [r3, #32]
 8003a1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a30:	430a      	orrs	r2, r1
 8003a32:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a90      	ldr	r2, [pc, #576]	@ (8003c7c <UART_SetConfig+0x2c8>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d126      	bne.n	8003a8c <UART_SetConfig+0xd8>
 8003a3e:	4b90      	ldr	r3, [pc, #576]	@ (8003c80 <UART_SetConfig+0x2cc>)
 8003a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a44:	f003 0303 	and.w	r3, r3, #3
 8003a48:	2b03      	cmp	r3, #3
 8003a4a:	d81b      	bhi.n	8003a84 <UART_SetConfig+0xd0>
 8003a4c:	a201      	add	r2, pc, #4	@ (adr r2, 8003a54 <UART_SetConfig+0xa0>)
 8003a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a52:	bf00      	nop
 8003a54:	08003a65 	.word	0x08003a65
 8003a58:	08003a75 	.word	0x08003a75
 8003a5c:	08003a6d 	.word	0x08003a6d
 8003a60:	08003a7d 	.word	0x08003a7d
 8003a64:	2301      	movs	r3, #1
 8003a66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a6a:	e116      	b.n	8003c9a <UART_SetConfig+0x2e6>
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a72:	e112      	b.n	8003c9a <UART_SetConfig+0x2e6>
 8003a74:	2304      	movs	r3, #4
 8003a76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a7a:	e10e      	b.n	8003c9a <UART_SetConfig+0x2e6>
 8003a7c:	2308      	movs	r3, #8
 8003a7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a82:	e10a      	b.n	8003c9a <UART_SetConfig+0x2e6>
 8003a84:	2310      	movs	r3, #16
 8003a86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a8a:	e106      	b.n	8003c9a <UART_SetConfig+0x2e6>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a7c      	ldr	r2, [pc, #496]	@ (8003c84 <UART_SetConfig+0x2d0>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d138      	bne.n	8003b08 <UART_SetConfig+0x154>
 8003a96:	4b7a      	ldr	r3, [pc, #488]	@ (8003c80 <UART_SetConfig+0x2cc>)
 8003a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a9c:	f003 030c 	and.w	r3, r3, #12
 8003aa0:	2b0c      	cmp	r3, #12
 8003aa2:	d82d      	bhi.n	8003b00 <UART_SetConfig+0x14c>
 8003aa4:	a201      	add	r2, pc, #4	@ (adr r2, 8003aac <UART_SetConfig+0xf8>)
 8003aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aaa:	bf00      	nop
 8003aac:	08003ae1 	.word	0x08003ae1
 8003ab0:	08003b01 	.word	0x08003b01
 8003ab4:	08003b01 	.word	0x08003b01
 8003ab8:	08003b01 	.word	0x08003b01
 8003abc:	08003af1 	.word	0x08003af1
 8003ac0:	08003b01 	.word	0x08003b01
 8003ac4:	08003b01 	.word	0x08003b01
 8003ac8:	08003b01 	.word	0x08003b01
 8003acc:	08003ae9 	.word	0x08003ae9
 8003ad0:	08003b01 	.word	0x08003b01
 8003ad4:	08003b01 	.word	0x08003b01
 8003ad8:	08003b01 	.word	0x08003b01
 8003adc:	08003af9 	.word	0x08003af9
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ae6:	e0d8      	b.n	8003c9a <UART_SetConfig+0x2e6>
 8003ae8:	2302      	movs	r3, #2
 8003aea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003aee:	e0d4      	b.n	8003c9a <UART_SetConfig+0x2e6>
 8003af0:	2304      	movs	r3, #4
 8003af2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003af6:	e0d0      	b.n	8003c9a <UART_SetConfig+0x2e6>
 8003af8:	2308      	movs	r3, #8
 8003afa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003afe:	e0cc      	b.n	8003c9a <UART_SetConfig+0x2e6>
 8003b00:	2310      	movs	r3, #16
 8003b02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b06:	e0c8      	b.n	8003c9a <UART_SetConfig+0x2e6>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a5e      	ldr	r2, [pc, #376]	@ (8003c88 <UART_SetConfig+0x2d4>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d125      	bne.n	8003b5e <UART_SetConfig+0x1aa>
 8003b12:	4b5b      	ldr	r3, [pc, #364]	@ (8003c80 <UART_SetConfig+0x2cc>)
 8003b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b18:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003b1c:	2b30      	cmp	r3, #48	@ 0x30
 8003b1e:	d016      	beq.n	8003b4e <UART_SetConfig+0x19a>
 8003b20:	2b30      	cmp	r3, #48	@ 0x30
 8003b22:	d818      	bhi.n	8003b56 <UART_SetConfig+0x1a2>
 8003b24:	2b20      	cmp	r3, #32
 8003b26:	d00a      	beq.n	8003b3e <UART_SetConfig+0x18a>
 8003b28:	2b20      	cmp	r3, #32
 8003b2a:	d814      	bhi.n	8003b56 <UART_SetConfig+0x1a2>
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d002      	beq.n	8003b36 <UART_SetConfig+0x182>
 8003b30:	2b10      	cmp	r3, #16
 8003b32:	d008      	beq.n	8003b46 <UART_SetConfig+0x192>
 8003b34:	e00f      	b.n	8003b56 <UART_SetConfig+0x1a2>
 8003b36:	2300      	movs	r3, #0
 8003b38:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b3c:	e0ad      	b.n	8003c9a <UART_SetConfig+0x2e6>
 8003b3e:	2302      	movs	r3, #2
 8003b40:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b44:	e0a9      	b.n	8003c9a <UART_SetConfig+0x2e6>
 8003b46:	2304      	movs	r3, #4
 8003b48:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b4c:	e0a5      	b.n	8003c9a <UART_SetConfig+0x2e6>
 8003b4e:	2308      	movs	r3, #8
 8003b50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b54:	e0a1      	b.n	8003c9a <UART_SetConfig+0x2e6>
 8003b56:	2310      	movs	r3, #16
 8003b58:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b5c:	e09d      	b.n	8003c9a <UART_SetConfig+0x2e6>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a4a      	ldr	r2, [pc, #296]	@ (8003c8c <UART_SetConfig+0x2d8>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d125      	bne.n	8003bb4 <UART_SetConfig+0x200>
 8003b68:	4b45      	ldr	r3, [pc, #276]	@ (8003c80 <UART_SetConfig+0x2cc>)
 8003b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b6e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003b72:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b74:	d016      	beq.n	8003ba4 <UART_SetConfig+0x1f0>
 8003b76:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b78:	d818      	bhi.n	8003bac <UART_SetConfig+0x1f8>
 8003b7a:	2b80      	cmp	r3, #128	@ 0x80
 8003b7c:	d00a      	beq.n	8003b94 <UART_SetConfig+0x1e0>
 8003b7e:	2b80      	cmp	r3, #128	@ 0x80
 8003b80:	d814      	bhi.n	8003bac <UART_SetConfig+0x1f8>
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d002      	beq.n	8003b8c <UART_SetConfig+0x1d8>
 8003b86:	2b40      	cmp	r3, #64	@ 0x40
 8003b88:	d008      	beq.n	8003b9c <UART_SetConfig+0x1e8>
 8003b8a:	e00f      	b.n	8003bac <UART_SetConfig+0x1f8>
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b92:	e082      	b.n	8003c9a <UART_SetConfig+0x2e6>
 8003b94:	2302      	movs	r3, #2
 8003b96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b9a:	e07e      	b.n	8003c9a <UART_SetConfig+0x2e6>
 8003b9c:	2304      	movs	r3, #4
 8003b9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ba2:	e07a      	b.n	8003c9a <UART_SetConfig+0x2e6>
 8003ba4:	2308      	movs	r3, #8
 8003ba6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003baa:	e076      	b.n	8003c9a <UART_SetConfig+0x2e6>
 8003bac:	2310      	movs	r3, #16
 8003bae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bb2:	e072      	b.n	8003c9a <UART_SetConfig+0x2e6>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a35      	ldr	r2, [pc, #212]	@ (8003c90 <UART_SetConfig+0x2dc>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d12a      	bne.n	8003c14 <UART_SetConfig+0x260>
 8003bbe:	4b30      	ldr	r3, [pc, #192]	@ (8003c80 <UART_SetConfig+0x2cc>)
 8003bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bc4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bc8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bcc:	d01a      	beq.n	8003c04 <UART_SetConfig+0x250>
 8003bce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bd2:	d81b      	bhi.n	8003c0c <UART_SetConfig+0x258>
 8003bd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bd8:	d00c      	beq.n	8003bf4 <UART_SetConfig+0x240>
 8003bda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bde:	d815      	bhi.n	8003c0c <UART_SetConfig+0x258>
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d003      	beq.n	8003bec <UART_SetConfig+0x238>
 8003be4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003be8:	d008      	beq.n	8003bfc <UART_SetConfig+0x248>
 8003bea:	e00f      	b.n	8003c0c <UART_SetConfig+0x258>
 8003bec:	2300      	movs	r3, #0
 8003bee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bf2:	e052      	b.n	8003c9a <UART_SetConfig+0x2e6>
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bfa:	e04e      	b.n	8003c9a <UART_SetConfig+0x2e6>
 8003bfc:	2304      	movs	r3, #4
 8003bfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c02:	e04a      	b.n	8003c9a <UART_SetConfig+0x2e6>
 8003c04:	2308      	movs	r3, #8
 8003c06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c0a:	e046      	b.n	8003c9a <UART_SetConfig+0x2e6>
 8003c0c:	2310      	movs	r3, #16
 8003c0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c12:	e042      	b.n	8003c9a <UART_SetConfig+0x2e6>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a17      	ldr	r2, [pc, #92]	@ (8003c78 <UART_SetConfig+0x2c4>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d13a      	bne.n	8003c94 <UART_SetConfig+0x2e0>
 8003c1e:	4b18      	ldr	r3, [pc, #96]	@ (8003c80 <UART_SetConfig+0x2cc>)
 8003c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c24:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003c28:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003c2c:	d01a      	beq.n	8003c64 <UART_SetConfig+0x2b0>
 8003c2e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003c32:	d81b      	bhi.n	8003c6c <UART_SetConfig+0x2b8>
 8003c34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c38:	d00c      	beq.n	8003c54 <UART_SetConfig+0x2a0>
 8003c3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c3e:	d815      	bhi.n	8003c6c <UART_SetConfig+0x2b8>
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d003      	beq.n	8003c4c <UART_SetConfig+0x298>
 8003c44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c48:	d008      	beq.n	8003c5c <UART_SetConfig+0x2a8>
 8003c4a:	e00f      	b.n	8003c6c <UART_SetConfig+0x2b8>
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c52:	e022      	b.n	8003c9a <UART_SetConfig+0x2e6>
 8003c54:	2302      	movs	r3, #2
 8003c56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c5a:	e01e      	b.n	8003c9a <UART_SetConfig+0x2e6>
 8003c5c:	2304      	movs	r3, #4
 8003c5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c62:	e01a      	b.n	8003c9a <UART_SetConfig+0x2e6>
 8003c64:	2308      	movs	r3, #8
 8003c66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c6a:	e016      	b.n	8003c9a <UART_SetConfig+0x2e6>
 8003c6c:	2310      	movs	r3, #16
 8003c6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c72:	e012      	b.n	8003c9a <UART_SetConfig+0x2e6>
 8003c74:	efff69f3 	.word	0xefff69f3
 8003c78:	40008000 	.word	0x40008000
 8003c7c:	40013800 	.word	0x40013800
 8003c80:	40021000 	.word	0x40021000
 8003c84:	40004400 	.word	0x40004400
 8003c88:	40004800 	.word	0x40004800
 8003c8c:	40004c00 	.word	0x40004c00
 8003c90:	40005000 	.word	0x40005000
 8003c94:	2310      	movs	r3, #16
 8003c96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a9f      	ldr	r2, [pc, #636]	@ (8003f1c <UART_SetConfig+0x568>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d17a      	bne.n	8003d9a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ca4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003ca8:	2b08      	cmp	r3, #8
 8003caa:	d824      	bhi.n	8003cf6 <UART_SetConfig+0x342>
 8003cac:	a201      	add	r2, pc, #4	@ (adr r2, 8003cb4 <UART_SetConfig+0x300>)
 8003cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb2:	bf00      	nop
 8003cb4:	08003cd9 	.word	0x08003cd9
 8003cb8:	08003cf7 	.word	0x08003cf7
 8003cbc:	08003ce1 	.word	0x08003ce1
 8003cc0:	08003cf7 	.word	0x08003cf7
 8003cc4:	08003ce7 	.word	0x08003ce7
 8003cc8:	08003cf7 	.word	0x08003cf7
 8003ccc:	08003cf7 	.word	0x08003cf7
 8003cd0:	08003cf7 	.word	0x08003cf7
 8003cd4:	08003cef 	.word	0x08003cef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cd8:	f7fe f920 	bl	8001f1c <HAL_RCC_GetPCLK1Freq>
 8003cdc:	61f8      	str	r0, [r7, #28]
        break;
 8003cde:	e010      	b.n	8003d02 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ce0:	4b8f      	ldr	r3, [pc, #572]	@ (8003f20 <UART_SetConfig+0x56c>)
 8003ce2:	61fb      	str	r3, [r7, #28]
        break;
 8003ce4:	e00d      	b.n	8003d02 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ce6:	f7fe f881 	bl	8001dec <HAL_RCC_GetSysClockFreq>
 8003cea:	61f8      	str	r0, [r7, #28]
        break;
 8003cec:	e009      	b.n	8003d02 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cf2:	61fb      	str	r3, [r7, #28]
        break;
 8003cf4:	e005      	b.n	8003d02 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003d00:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f000 80fb 	beq.w	8003f00 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	685a      	ldr	r2, [r3, #4]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	005b      	lsls	r3, r3, #1
 8003d12:	4413      	add	r3, r2
 8003d14:	69fa      	ldr	r2, [r7, #28]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d305      	bcc.n	8003d26 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d20:	69fa      	ldr	r2, [r7, #28]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d903      	bls.n	8003d2e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003d2c:	e0e8      	b.n	8003f00 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	2200      	movs	r2, #0
 8003d32:	461c      	mov	r4, r3
 8003d34:	4615      	mov	r5, r2
 8003d36:	f04f 0200 	mov.w	r2, #0
 8003d3a:	f04f 0300 	mov.w	r3, #0
 8003d3e:	022b      	lsls	r3, r5, #8
 8003d40:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003d44:	0222      	lsls	r2, r4, #8
 8003d46:	68f9      	ldr	r1, [r7, #12]
 8003d48:	6849      	ldr	r1, [r1, #4]
 8003d4a:	0849      	lsrs	r1, r1, #1
 8003d4c:	2000      	movs	r0, #0
 8003d4e:	4688      	mov	r8, r1
 8003d50:	4681      	mov	r9, r0
 8003d52:	eb12 0a08 	adds.w	sl, r2, r8
 8003d56:	eb43 0b09 	adc.w	fp, r3, r9
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	603b      	str	r3, [r7, #0]
 8003d62:	607a      	str	r2, [r7, #4]
 8003d64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d68:	4650      	mov	r0, sl
 8003d6a:	4659      	mov	r1, fp
 8003d6c:	f7fc fa80 	bl	8000270 <__aeabi_uldivmod>
 8003d70:	4602      	mov	r2, r0
 8003d72:	460b      	mov	r3, r1
 8003d74:	4613      	mov	r3, r2
 8003d76:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d7e:	d308      	bcc.n	8003d92 <UART_SetConfig+0x3de>
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d86:	d204      	bcs.n	8003d92 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	60da      	str	r2, [r3, #12]
 8003d90:	e0b6      	b.n	8003f00 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003d98:	e0b2      	b.n	8003f00 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	69db      	ldr	r3, [r3, #28]
 8003d9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003da2:	d15e      	bne.n	8003e62 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003da4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003da8:	2b08      	cmp	r3, #8
 8003daa:	d828      	bhi.n	8003dfe <UART_SetConfig+0x44a>
 8003dac:	a201      	add	r2, pc, #4	@ (adr r2, 8003db4 <UART_SetConfig+0x400>)
 8003dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db2:	bf00      	nop
 8003db4:	08003dd9 	.word	0x08003dd9
 8003db8:	08003de1 	.word	0x08003de1
 8003dbc:	08003de9 	.word	0x08003de9
 8003dc0:	08003dff 	.word	0x08003dff
 8003dc4:	08003def 	.word	0x08003def
 8003dc8:	08003dff 	.word	0x08003dff
 8003dcc:	08003dff 	.word	0x08003dff
 8003dd0:	08003dff 	.word	0x08003dff
 8003dd4:	08003df7 	.word	0x08003df7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dd8:	f7fe f8a0 	bl	8001f1c <HAL_RCC_GetPCLK1Freq>
 8003ddc:	61f8      	str	r0, [r7, #28]
        break;
 8003dde:	e014      	b.n	8003e0a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003de0:	f7fe f8b2 	bl	8001f48 <HAL_RCC_GetPCLK2Freq>
 8003de4:	61f8      	str	r0, [r7, #28]
        break;
 8003de6:	e010      	b.n	8003e0a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003de8:	4b4d      	ldr	r3, [pc, #308]	@ (8003f20 <UART_SetConfig+0x56c>)
 8003dea:	61fb      	str	r3, [r7, #28]
        break;
 8003dec:	e00d      	b.n	8003e0a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dee:	f7fd fffd 	bl	8001dec <HAL_RCC_GetSysClockFreq>
 8003df2:	61f8      	str	r0, [r7, #28]
        break;
 8003df4:	e009      	b.n	8003e0a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003df6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003dfa:	61fb      	str	r3, [r7, #28]
        break;
 8003dfc:	e005      	b.n	8003e0a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003e08:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d077      	beq.n	8003f00 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	005a      	lsls	r2, r3, #1
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	085b      	lsrs	r3, r3, #1
 8003e1a:	441a      	add	r2, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e24:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	2b0f      	cmp	r3, #15
 8003e2a:	d916      	bls.n	8003e5a <UART_SetConfig+0x4a6>
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e32:	d212      	bcs.n	8003e5a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	f023 030f 	bic.w	r3, r3, #15
 8003e3c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	085b      	lsrs	r3, r3, #1
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	f003 0307 	and.w	r3, r3, #7
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	8afb      	ldrh	r3, [r7, #22]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	8afa      	ldrh	r2, [r7, #22]
 8003e56:	60da      	str	r2, [r3, #12]
 8003e58:	e052      	b.n	8003f00 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003e60:	e04e      	b.n	8003f00 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e62:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003e66:	2b08      	cmp	r3, #8
 8003e68:	d827      	bhi.n	8003eba <UART_SetConfig+0x506>
 8003e6a:	a201      	add	r2, pc, #4	@ (adr r2, 8003e70 <UART_SetConfig+0x4bc>)
 8003e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e70:	08003e95 	.word	0x08003e95
 8003e74:	08003e9d 	.word	0x08003e9d
 8003e78:	08003ea5 	.word	0x08003ea5
 8003e7c:	08003ebb 	.word	0x08003ebb
 8003e80:	08003eab 	.word	0x08003eab
 8003e84:	08003ebb 	.word	0x08003ebb
 8003e88:	08003ebb 	.word	0x08003ebb
 8003e8c:	08003ebb 	.word	0x08003ebb
 8003e90:	08003eb3 	.word	0x08003eb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e94:	f7fe f842 	bl	8001f1c <HAL_RCC_GetPCLK1Freq>
 8003e98:	61f8      	str	r0, [r7, #28]
        break;
 8003e9a:	e014      	b.n	8003ec6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e9c:	f7fe f854 	bl	8001f48 <HAL_RCC_GetPCLK2Freq>
 8003ea0:	61f8      	str	r0, [r7, #28]
        break;
 8003ea2:	e010      	b.n	8003ec6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ea4:	4b1e      	ldr	r3, [pc, #120]	@ (8003f20 <UART_SetConfig+0x56c>)
 8003ea6:	61fb      	str	r3, [r7, #28]
        break;
 8003ea8:	e00d      	b.n	8003ec6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eaa:	f7fd ff9f 	bl	8001dec <HAL_RCC_GetSysClockFreq>
 8003eae:	61f8      	str	r0, [r7, #28]
        break;
 8003eb0:	e009      	b.n	8003ec6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003eb6:	61fb      	str	r3, [r7, #28]
        break;
 8003eb8:	e005      	b.n	8003ec6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003ec4:	bf00      	nop
    }

    if (pclk != 0U)
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d019      	beq.n	8003f00 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	085a      	lsrs	r2, r3, #1
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	441a      	add	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ede:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	2b0f      	cmp	r3, #15
 8003ee4:	d909      	bls.n	8003efa <UART_SetConfig+0x546>
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003eec:	d205      	bcs.n	8003efa <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	b29a      	uxth	r2, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	60da      	str	r2, [r3, #12]
 8003ef8:	e002      	b.n	8003f00 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003f0c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3728      	adds	r7, #40	@ 0x28
 8003f14:	46bd      	mov	sp, r7
 8003f16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f1a:	bf00      	nop
 8003f1c:	40008000 	.word	0x40008000
 8003f20:	00f42400 	.word	0x00f42400

08003f24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f30:	f003 0308 	and.w	r3, r3, #8
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00a      	beq.n	8003f4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00a      	beq.n	8003f70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f74:	f003 0302 	and.w	r3, r3, #2
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d00a      	beq.n	8003f92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f96:	f003 0304 	and.w	r3, r3, #4
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00a      	beq.n	8003fb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb8:	f003 0310 	and.w	r3, r3, #16
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d00a      	beq.n	8003fd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fda:	f003 0320 	and.w	r3, r3, #32
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00a      	beq.n	8003ff8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004000:	2b00      	cmp	r3, #0
 8004002:	d01a      	beq.n	800403a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	430a      	orrs	r2, r1
 8004018:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800401e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004022:	d10a      	bne.n	800403a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	430a      	orrs	r2, r1
 8004038:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800403e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00a      	beq.n	800405c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	430a      	orrs	r2, r1
 800405a:	605a      	str	r2, [r3, #4]
  }
}
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b098      	sub	sp, #96	@ 0x60
 800406c:	af02      	add	r7, sp, #8
 800406e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004078:	f7fc fe86 	bl	8000d88 <HAL_GetTick>
 800407c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0308 	and.w	r3, r3, #8
 8004088:	2b08      	cmp	r3, #8
 800408a:	d12e      	bne.n	80040ea <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800408c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004090:	9300      	str	r3, [sp, #0]
 8004092:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004094:	2200      	movs	r2, #0
 8004096:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 f88c 	bl	80041b8 <UART_WaitOnFlagUntilTimeout>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d021      	beq.n	80040ea <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040ae:	e853 3f00 	ldrex	r3, [r3]
 80040b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80040b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	461a      	mov	r2, r3
 80040c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80040c6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80040ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040cc:	e841 2300 	strex	r3, r2, [r1]
 80040d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80040d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d1e6      	bne.n	80040a6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2220      	movs	r2, #32
 80040dc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e062      	b.n	80041b0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0304 	and.w	r3, r3, #4
 80040f4:	2b04      	cmp	r3, #4
 80040f6:	d149      	bne.n	800418c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004100:	2200      	movs	r2, #0
 8004102:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f856 	bl	80041b8 <UART_WaitOnFlagUntilTimeout>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d03c      	beq.n	800418c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411a:	e853 3f00 	ldrex	r3, [r3]
 800411e:	623b      	str	r3, [r7, #32]
   return(result);
 8004120:	6a3b      	ldr	r3, [r7, #32]
 8004122:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004126:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	461a      	mov	r2, r3
 800412e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004130:	633b      	str	r3, [r7, #48]	@ 0x30
 8004132:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004134:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004136:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004138:	e841 2300 	strex	r3, r2, [r1]
 800413c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800413e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1e6      	bne.n	8004112 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	3308      	adds	r3, #8
 800414a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	e853 3f00 	ldrex	r3, [r3]
 8004152:	60fb      	str	r3, [r7, #12]
   return(result);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f023 0301 	bic.w	r3, r3, #1
 800415a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	3308      	adds	r3, #8
 8004162:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004164:	61fa      	str	r2, [r7, #28]
 8004166:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004168:	69b9      	ldr	r1, [r7, #24]
 800416a:	69fa      	ldr	r2, [r7, #28]
 800416c:	e841 2300 	strex	r3, r2, [r1]
 8004170:	617b      	str	r3, [r7, #20]
   return(result);
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d1e5      	bne.n	8004144 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2220      	movs	r2, #32
 800417c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e011      	b.n	80041b0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2220      	movs	r2, #32
 8004190:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2220      	movs	r2, #32
 8004196:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3758      	adds	r7, #88	@ 0x58
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	603b      	str	r3, [r7, #0]
 80041c4:	4613      	mov	r3, r2
 80041c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041c8:	e04f      	b.n	800426a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d0:	d04b      	beq.n	800426a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041d2:	f7fc fdd9 	bl	8000d88 <HAL_GetTick>
 80041d6:	4602      	mov	r2, r0
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d302      	bcc.n	80041e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e04e      	b.n	800428a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0304 	and.w	r3, r3, #4
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d037      	beq.n	800426a <UART_WaitOnFlagUntilTimeout+0xb2>
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	2b80      	cmp	r3, #128	@ 0x80
 80041fe:	d034      	beq.n	800426a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	2b40      	cmp	r3, #64	@ 0x40
 8004204:	d031      	beq.n	800426a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	69db      	ldr	r3, [r3, #28]
 800420c:	f003 0308 	and.w	r3, r3, #8
 8004210:	2b08      	cmp	r3, #8
 8004212:	d110      	bne.n	8004236 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2208      	movs	r2, #8
 800421a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f000 f838 	bl	8004292 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2208      	movs	r2, #8
 8004226:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e029      	b.n	800428a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	69db      	ldr	r3, [r3, #28]
 800423c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004240:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004244:	d111      	bne.n	800426a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800424e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f000 f81e 	bl	8004292 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2220      	movs	r2, #32
 800425a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e00f      	b.n	800428a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	69da      	ldr	r2, [r3, #28]
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	4013      	ands	r3, r2
 8004274:	68ba      	ldr	r2, [r7, #8]
 8004276:	429a      	cmp	r2, r3
 8004278:	bf0c      	ite	eq
 800427a:	2301      	moveq	r3, #1
 800427c:	2300      	movne	r3, #0
 800427e:	b2db      	uxtb	r3, r3
 8004280:	461a      	mov	r2, r3
 8004282:	79fb      	ldrb	r3, [r7, #7]
 8004284:	429a      	cmp	r2, r3
 8004286:	d0a0      	beq.n	80041ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004292:	b480      	push	{r7}
 8004294:	b095      	sub	sp, #84	@ 0x54
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042a2:	e853 3f00 	ldrex	r3, [r3]
 80042a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80042a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	461a      	mov	r2, r3
 80042b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80042ba:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80042be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80042c0:	e841 2300 	strex	r3, r2, [r1]
 80042c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80042c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1e6      	bne.n	800429a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	3308      	adds	r3, #8
 80042d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d4:	6a3b      	ldr	r3, [r7, #32]
 80042d6:	e853 3f00 	ldrex	r3, [r3]
 80042da:	61fb      	str	r3, [r7, #28]
   return(result);
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	f023 0301 	bic.w	r3, r3, #1
 80042e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	3308      	adds	r3, #8
 80042ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042f4:	e841 2300 	strex	r3, r2, [r1]
 80042f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80042fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1e5      	bne.n	80042cc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004304:	2b01      	cmp	r3, #1
 8004306:	d118      	bne.n	800433a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	e853 3f00 	ldrex	r3, [r3]
 8004314:	60bb      	str	r3, [r7, #8]
   return(result);
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	f023 0310 	bic.w	r3, r3, #16
 800431c:	647b      	str	r3, [r7, #68]	@ 0x44
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	461a      	mov	r2, r3
 8004324:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004326:	61bb      	str	r3, [r7, #24]
 8004328:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432a:	6979      	ldr	r1, [r7, #20]
 800432c:	69ba      	ldr	r2, [r7, #24]
 800432e:	e841 2300 	strex	r3, r2, [r1]
 8004332:	613b      	str	r3, [r7, #16]
   return(result);
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1e6      	bne.n	8004308 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2220      	movs	r2, #32
 800433e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800434e:	bf00      	nop
 8004350:	3754      	adds	r7, #84	@ 0x54
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr
	...

0800435c <std>:
 800435c:	2300      	movs	r3, #0
 800435e:	b510      	push	{r4, lr}
 8004360:	4604      	mov	r4, r0
 8004362:	e9c0 3300 	strd	r3, r3, [r0]
 8004366:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800436a:	6083      	str	r3, [r0, #8]
 800436c:	8181      	strh	r1, [r0, #12]
 800436e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004370:	81c2      	strh	r2, [r0, #14]
 8004372:	6183      	str	r3, [r0, #24]
 8004374:	4619      	mov	r1, r3
 8004376:	2208      	movs	r2, #8
 8004378:	305c      	adds	r0, #92	@ 0x5c
 800437a:	f000 f9f9 	bl	8004770 <memset>
 800437e:	4b0d      	ldr	r3, [pc, #52]	@ (80043b4 <std+0x58>)
 8004380:	6263      	str	r3, [r4, #36]	@ 0x24
 8004382:	4b0d      	ldr	r3, [pc, #52]	@ (80043b8 <std+0x5c>)
 8004384:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004386:	4b0d      	ldr	r3, [pc, #52]	@ (80043bc <std+0x60>)
 8004388:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800438a:	4b0d      	ldr	r3, [pc, #52]	@ (80043c0 <std+0x64>)
 800438c:	6323      	str	r3, [r4, #48]	@ 0x30
 800438e:	4b0d      	ldr	r3, [pc, #52]	@ (80043c4 <std+0x68>)
 8004390:	6224      	str	r4, [r4, #32]
 8004392:	429c      	cmp	r4, r3
 8004394:	d006      	beq.n	80043a4 <std+0x48>
 8004396:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800439a:	4294      	cmp	r4, r2
 800439c:	d002      	beq.n	80043a4 <std+0x48>
 800439e:	33d0      	adds	r3, #208	@ 0xd0
 80043a0:	429c      	cmp	r4, r3
 80043a2:	d105      	bne.n	80043b0 <std+0x54>
 80043a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80043a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043ac:	f000 ba58 	b.w	8004860 <__retarget_lock_init_recursive>
 80043b0:	bd10      	pop	{r4, pc}
 80043b2:	bf00      	nop
 80043b4:	080045c1 	.word	0x080045c1
 80043b8:	080045e3 	.word	0x080045e3
 80043bc:	0800461b 	.word	0x0800461b
 80043c0:	0800463f 	.word	0x0800463f
 80043c4:	20000178 	.word	0x20000178

080043c8 <stdio_exit_handler>:
 80043c8:	4a02      	ldr	r2, [pc, #8]	@ (80043d4 <stdio_exit_handler+0xc>)
 80043ca:	4903      	ldr	r1, [pc, #12]	@ (80043d8 <stdio_exit_handler+0x10>)
 80043cc:	4803      	ldr	r0, [pc, #12]	@ (80043dc <stdio_exit_handler+0x14>)
 80043ce:	f000 b869 	b.w	80044a4 <_fwalk_sglue>
 80043d2:	bf00      	nop
 80043d4:	2000000c 	.word	0x2000000c
 80043d8:	08005101 	.word	0x08005101
 80043dc:	2000001c 	.word	0x2000001c

080043e0 <cleanup_stdio>:
 80043e0:	6841      	ldr	r1, [r0, #4]
 80043e2:	4b0c      	ldr	r3, [pc, #48]	@ (8004414 <cleanup_stdio+0x34>)
 80043e4:	4299      	cmp	r1, r3
 80043e6:	b510      	push	{r4, lr}
 80043e8:	4604      	mov	r4, r0
 80043ea:	d001      	beq.n	80043f0 <cleanup_stdio+0x10>
 80043ec:	f000 fe88 	bl	8005100 <_fflush_r>
 80043f0:	68a1      	ldr	r1, [r4, #8]
 80043f2:	4b09      	ldr	r3, [pc, #36]	@ (8004418 <cleanup_stdio+0x38>)
 80043f4:	4299      	cmp	r1, r3
 80043f6:	d002      	beq.n	80043fe <cleanup_stdio+0x1e>
 80043f8:	4620      	mov	r0, r4
 80043fa:	f000 fe81 	bl	8005100 <_fflush_r>
 80043fe:	68e1      	ldr	r1, [r4, #12]
 8004400:	4b06      	ldr	r3, [pc, #24]	@ (800441c <cleanup_stdio+0x3c>)
 8004402:	4299      	cmp	r1, r3
 8004404:	d004      	beq.n	8004410 <cleanup_stdio+0x30>
 8004406:	4620      	mov	r0, r4
 8004408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800440c:	f000 be78 	b.w	8005100 <_fflush_r>
 8004410:	bd10      	pop	{r4, pc}
 8004412:	bf00      	nop
 8004414:	20000178 	.word	0x20000178
 8004418:	200001e0 	.word	0x200001e0
 800441c:	20000248 	.word	0x20000248

08004420 <global_stdio_init.part.0>:
 8004420:	b510      	push	{r4, lr}
 8004422:	4b0b      	ldr	r3, [pc, #44]	@ (8004450 <global_stdio_init.part.0+0x30>)
 8004424:	4c0b      	ldr	r4, [pc, #44]	@ (8004454 <global_stdio_init.part.0+0x34>)
 8004426:	4a0c      	ldr	r2, [pc, #48]	@ (8004458 <global_stdio_init.part.0+0x38>)
 8004428:	601a      	str	r2, [r3, #0]
 800442a:	4620      	mov	r0, r4
 800442c:	2200      	movs	r2, #0
 800442e:	2104      	movs	r1, #4
 8004430:	f7ff ff94 	bl	800435c <std>
 8004434:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004438:	2201      	movs	r2, #1
 800443a:	2109      	movs	r1, #9
 800443c:	f7ff ff8e 	bl	800435c <std>
 8004440:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004444:	2202      	movs	r2, #2
 8004446:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800444a:	2112      	movs	r1, #18
 800444c:	f7ff bf86 	b.w	800435c <std>
 8004450:	200002b0 	.word	0x200002b0
 8004454:	20000178 	.word	0x20000178
 8004458:	080043c9 	.word	0x080043c9

0800445c <__sfp_lock_acquire>:
 800445c:	4801      	ldr	r0, [pc, #4]	@ (8004464 <__sfp_lock_acquire+0x8>)
 800445e:	f000 ba00 	b.w	8004862 <__retarget_lock_acquire_recursive>
 8004462:	bf00      	nop
 8004464:	200002b9 	.word	0x200002b9

08004468 <__sfp_lock_release>:
 8004468:	4801      	ldr	r0, [pc, #4]	@ (8004470 <__sfp_lock_release+0x8>)
 800446a:	f000 b9fb 	b.w	8004864 <__retarget_lock_release_recursive>
 800446e:	bf00      	nop
 8004470:	200002b9 	.word	0x200002b9

08004474 <__sinit>:
 8004474:	b510      	push	{r4, lr}
 8004476:	4604      	mov	r4, r0
 8004478:	f7ff fff0 	bl	800445c <__sfp_lock_acquire>
 800447c:	6a23      	ldr	r3, [r4, #32]
 800447e:	b11b      	cbz	r3, 8004488 <__sinit+0x14>
 8004480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004484:	f7ff bff0 	b.w	8004468 <__sfp_lock_release>
 8004488:	4b04      	ldr	r3, [pc, #16]	@ (800449c <__sinit+0x28>)
 800448a:	6223      	str	r3, [r4, #32]
 800448c:	4b04      	ldr	r3, [pc, #16]	@ (80044a0 <__sinit+0x2c>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1f5      	bne.n	8004480 <__sinit+0xc>
 8004494:	f7ff ffc4 	bl	8004420 <global_stdio_init.part.0>
 8004498:	e7f2      	b.n	8004480 <__sinit+0xc>
 800449a:	bf00      	nop
 800449c:	080043e1 	.word	0x080043e1
 80044a0:	200002b0 	.word	0x200002b0

080044a4 <_fwalk_sglue>:
 80044a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044a8:	4607      	mov	r7, r0
 80044aa:	4688      	mov	r8, r1
 80044ac:	4614      	mov	r4, r2
 80044ae:	2600      	movs	r6, #0
 80044b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80044b4:	f1b9 0901 	subs.w	r9, r9, #1
 80044b8:	d505      	bpl.n	80044c6 <_fwalk_sglue+0x22>
 80044ba:	6824      	ldr	r4, [r4, #0]
 80044bc:	2c00      	cmp	r4, #0
 80044be:	d1f7      	bne.n	80044b0 <_fwalk_sglue+0xc>
 80044c0:	4630      	mov	r0, r6
 80044c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044c6:	89ab      	ldrh	r3, [r5, #12]
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d907      	bls.n	80044dc <_fwalk_sglue+0x38>
 80044cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80044d0:	3301      	adds	r3, #1
 80044d2:	d003      	beq.n	80044dc <_fwalk_sglue+0x38>
 80044d4:	4629      	mov	r1, r5
 80044d6:	4638      	mov	r0, r7
 80044d8:	47c0      	blx	r8
 80044da:	4306      	orrs	r6, r0
 80044dc:	3568      	adds	r5, #104	@ 0x68
 80044de:	e7e9      	b.n	80044b4 <_fwalk_sglue+0x10>

080044e0 <iprintf>:
 80044e0:	b40f      	push	{r0, r1, r2, r3}
 80044e2:	b507      	push	{r0, r1, r2, lr}
 80044e4:	4906      	ldr	r1, [pc, #24]	@ (8004500 <iprintf+0x20>)
 80044e6:	ab04      	add	r3, sp, #16
 80044e8:	6808      	ldr	r0, [r1, #0]
 80044ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80044ee:	6881      	ldr	r1, [r0, #8]
 80044f0:	9301      	str	r3, [sp, #4]
 80044f2:	f000 fadb 	bl	8004aac <_vfiprintf_r>
 80044f6:	b003      	add	sp, #12
 80044f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80044fc:	b004      	add	sp, #16
 80044fe:	4770      	bx	lr
 8004500:	20000018 	.word	0x20000018

08004504 <_puts_r>:
 8004504:	6a03      	ldr	r3, [r0, #32]
 8004506:	b570      	push	{r4, r5, r6, lr}
 8004508:	6884      	ldr	r4, [r0, #8]
 800450a:	4605      	mov	r5, r0
 800450c:	460e      	mov	r6, r1
 800450e:	b90b      	cbnz	r3, 8004514 <_puts_r+0x10>
 8004510:	f7ff ffb0 	bl	8004474 <__sinit>
 8004514:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004516:	07db      	lsls	r3, r3, #31
 8004518:	d405      	bmi.n	8004526 <_puts_r+0x22>
 800451a:	89a3      	ldrh	r3, [r4, #12]
 800451c:	0598      	lsls	r0, r3, #22
 800451e:	d402      	bmi.n	8004526 <_puts_r+0x22>
 8004520:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004522:	f000 f99e 	bl	8004862 <__retarget_lock_acquire_recursive>
 8004526:	89a3      	ldrh	r3, [r4, #12]
 8004528:	0719      	lsls	r1, r3, #28
 800452a:	d502      	bpl.n	8004532 <_puts_r+0x2e>
 800452c:	6923      	ldr	r3, [r4, #16]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d135      	bne.n	800459e <_puts_r+0x9a>
 8004532:	4621      	mov	r1, r4
 8004534:	4628      	mov	r0, r5
 8004536:	f000 f8c5 	bl	80046c4 <__swsetup_r>
 800453a:	b380      	cbz	r0, 800459e <_puts_r+0x9a>
 800453c:	f04f 35ff 	mov.w	r5, #4294967295
 8004540:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004542:	07da      	lsls	r2, r3, #31
 8004544:	d405      	bmi.n	8004552 <_puts_r+0x4e>
 8004546:	89a3      	ldrh	r3, [r4, #12]
 8004548:	059b      	lsls	r3, r3, #22
 800454a:	d402      	bmi.n	8004552 <_puts_r+0x4e>
 800454c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800454e:	f000 f989 	bl	8004864 <__retarget_lock_release_recursive>
 8004552:	4628      	mov	r0, r5
 8004554:	bd70      	pop	{r4, r5, r6, pc}
 8004556:	2b00      	cmp	r3, #0
 8004558:	da04      	bge.n	8004564 <_puts_r+0x60>
 800455a:	69a2      	ldr	r2, [r4, #24]
 800455c:	429a      	cmp	r2, r3
 800455e:	dc17      	bgt.n	8004590 <_puts_r+0x8c>
 8004560:	290a      	cmp	r1, #10
 8004562:	d015      	beq.n	8004590 <_puts_r+0x8c>
 8004564:	6823      	ldr	r3, [r4, #0]
 8004566:	1c5a      	adds	r2, r3, #1
 8004568:	6022      	str	r2, [r4, #0]
 800456a:	7019      	strb	r1, [r3, #0]
 800456c:	68a3      	ldr	r3, [r4, #8]
 800456e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004572:	3b01      	subs	r3, #1
 8004574:	60a3      	str	r3, [r4, #8]
 8004576:	2900      	cmp	r1, #0
 8004578:	d1ed      	bne.n	8004556 <_puts_r+0x52>
 800457a:	2b00      	cmp	r3, #0
 800457c:	da11      	bge.n	80045a2 <_puts_r+0x9e>
 800457e:	4622      	mov	r2, r4
 8004580:	210a      	movs	r1, #10
 8004582:	4628      	mov	r0, r5
 8004584:	f000 f85f 	bl	8004646 <__swbuf_r>
 8004588:	3001      	adds	r0, #1
 800458a:	d0d7      	beq.n	800453c <_puts_r+0x38>
 800458c:	250a      	movs	r5, #10
 800458e:	e7d7      	b.n	8004540 <_puts_r+0x3c>
 8004590:	4622      	mov	r2, r4
 8004592:	4628      	mov	r0, r5
 8004594:	f000 f857 	bl	8004646 <__swbuf_r>
 8004598:	3001      	adds	r0, #1
 800459a:	d1e7      	bne.n	800456c <_puts_r+0x68>
 800459c:	e7ce      	b.n	800453c <_puts_r+0x38>
 800459e:	3e01      	subs	r6, #1
 80045a0:	e7e4      	b.n	800456c <_puts_r+0x68>
 80045a2:	6823      	ldr	r3, [r4, #0]
 80045a4:	1c5a      	adds	r2, r3, #1
 80045a6:	6022      	str	r2, [r4, #0]
 80045a8:	220a      	movs	r2, #10
 80045aa:	701a      	strb	r2, [r3, #0]
 80045ac:	e7ee      	b.n	800458c <_puts_r+0x88>
	...

080045b0 <puts>:
 80045b0:	4b02      	ldr	r3, [pc, #8]	@ (80045bc <puts+0xc>)
 80045b2:	4601      	mov	r1, r0
 80045b4:	6818      	ldr	r0, [r3, #0]
 80045b6:	f7ff bfa5 	b.w	8004504 <_puts_r>
 80045ba:	bf00      	nop
 80045bc:	20000018 	.word	0x20000018

080045c0 <__sread>:
 80045c0:	b510      	push	{r4, lr}
 80045c2:	460c      	mov	r4, r1
 80045c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045c8:	f000 f8fc 	bl	80047c4 <_read_r>
 80045cc:	2800      	cmp	r0, #0
 80045ce:	bfab      	itete	ge
 80045d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80045d2:	89a3      	ldrhlt	r3, [r4, #12]
 80045d4:	181b      	addge	r3, r3, r0
 80045d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80045da:	bfac      	ite	ge
 80045dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80045de:	81a3      	strhlt	r3, [r4, #12]
 80045e0:	bd10      	pop	{r4, pc}

080045e2 <__swrite>:
 80045e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045e6:	461f      	mov	r7, r3
 80045e8:	898b      	ldrh	r3, [r1, #12]
 80045ea:	05db      	lsls	r3, r3, #23
 80045ec:	4605      	mov	r5, r0
 80045ee:	460c      	mov	r4, r1
 80045f0:	4616      	mov	r6, r2
 80045f2:	d505      	bpl.n	8004600 <__swrite+0x1e>
 80045f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045f8:	2302      	movs	r3, #2
 80045fa:	2200      	movs	r2, #0
 80045fc:	f000 f8d0 	bl	80047a0 <_lseek_r>
 8004600:	89a3      	ldrh	r3, [r4, #12]
 8004602:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004606:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800460a:	81a3      	strh	r3, [r4, #12]
 800460c:	4632      	mov	r2, r6
 800460e:	463b      	mov	r3, r7
 8004610:	4628      	mov	r0, r5
 8004612:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004616:	f000 b8e7 	b.w	80047e8 <_write_r>

0800461a <__sseek>:
 800461a:	b510      	push	{r4, lr}
 800461c:	460c      	mov	r4, r1
 800461e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004622:	f000 f8bd 	bl	80047a0 <_lseek_r>
 8004626:	1c43      	adds	r3, r0, #1
 8004628:	89a3      	ldrh	r3, [r4, #12]
 800462a:	bf15      	itete	ne
 800462c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800462e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004632:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004636:	81a3      	strheq	r3, [r4, #12]
 8004638:	bf18      	it	ne
 800463a:	81a3      	strhne	r3, [r4, #12]
 800463c:	bd10      	pop	{r4, pc}

0800463e <__sclose>:
 800463e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004642:	f000 b89d 	b.w	8004780 <_close_r>

08004646 <__swbuf_r>:
 8004646:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004648:	460e      	mov	r6, r1
 800464a:	4614      	mov	r4, r2
 800464c:	4605      	mov	r5, r0
 800464e:	b118      	cbz	r0, 8004658 <__swbuf_r+0x12>
 8004650:	6a03      	ldr	r3, [r0, #32]
 8004652:	b90b      	cbnz	r3, 8004658 <__swbuf_r+0x12>
 8004654:	f7ff ff0e 	bl	8004474 <__sinit>
 8004658:	69a3      	ldr	r3, [r4, #24]
 800465a:	60a3      	str	r3, [r4, #8]
 800465c:	89a3      	ldrh	r3, [r4, #12]
 800465e:	071a      	lsls	r2, r3, #28
 8004660:	d501      	bpl.n	8004666 <__swbuf_r+0x20>
 8004662:	6923      	ldr	r3, [r4, #16]
 8004664:	b943      	cbnz	r3, 8004678 <__swbuf_r+0x32>
 8004666:	4621      	mov	r1, r4
 8004668:	4628      	mov	r0, r5
 800466a:	f000 f82b 	bl	80046c4 <__swsetup_r>
 800466e:	b118      	cbz	r0, 8004678 <__swbuf_r+0x32>
 8004670:	f04f 37ff 	mov.w	r7, #4294967295
 8004674:	4638      	mov	r0, r7
 8004676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004678:	6823      	ldr	r3, [r4, #0]
 800467a:	6922      	ldr	r2, [r4, #16]
 800467c:	1a98      	subs	r0, r3, r2
 800467e:	6963      	ldr	r3, [r4, #20]
 8004680:	b2f6      	uxtb	r6, r6
 8004682:	4283      	cmp	r3, r0
 8004684:	4637      	mov	r7, r6
 8004686:	dc05      	bgt.n	8004694 <__swbuf_r+0x4e>
 8004688:	4621      	mov	r1, r4
 800468a:	4628      	mov	r0, r5
 800468c:	f000 fd38 	bl	8005100 <_fflush_r>
 8004690:	2800      	cmp	r0, #0
 8004692:	d1ed      	bne.n	8004670 <__swbuf_r+0x2a>
 8004694:	68a3      	ldr	r3, [r4, #8]
 8004696:	3b01      	subs	r3, #1
 8004698:	60a3      	str	r3, [r4, #8]
 800469a:	6823      	ldr	r3, [r4, #0]
 800469c:	1c5a      	adds	r2, r3, #1
 800469e:	6022      	str	r2, [r4, #0]
 80046a0:	701e      	strb	r6, [r3, #0]
 80046a2:	6962      	ldr	r2, [r4, #20]
 80046a4:	1c43      	adds	r3, r0, #1
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d004      	beq.n	80046b4 <__swbuf_r+0x6e>
 80046aa:	89a3      	ldrh	r3, [r4, #12]
 80046ac:	07db      	lsls	r3, r3, #31
 80046ae:	d5e1      	bpl.n	8004674 <__swbuf_r+0x2e>
 80046b0:	2e0a      	cmp	r6, #10
 80046b2:	d1df      	bne.n	8004674 <__swbuf_r+0x2e>
 80046b4:	4621      	mov	r1, r4
 80046b6:	4628      	mov	r0, r5
 80046b8:	f000 fd22 	bl	8005100 <_fflush_r>
 80046bc:	2800      	cmp	r0, #0
 80046be:	d0d9      	beq.n	8004674 <__swbuf_r+0x2e>
 80046c0:	e7d6      	b.n	8004670 <__swbuf_r+0x2a>
	...

080046c4 <__swsetup_r>:
 80046c4:	b538      	push	{r3, r4, r5, lr}
 80046c6:	4b29      	ldr	r3, [pc, #164]	@ (800476c <__swsetup_r+0xa8>)
 80046c8:	4605      	mov	r5, r0
 80046ca:	6818      	ldr	r0, [r3, #0]
 80046cc:	460c      	mov	r4, r1
 80046ce:	b118      	cbz	r0, 80046d8 <__swsetup_r+0x14>
 80046d0:	6a03      	ldr	r3, [r0, #32]
 80046d2:	b90b      	cbnz	r3, 80046d8 <__swsetup_r+0x14>
 80046d4:	f7ff fece 	bl	8004474 <__sinit>
 80046d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046dc:	0719      	lsls	r1, r3, #28
 80046de:	d422      	bmi.n	8004726 <__swsetup_r+0x62>
 80046e0:	06da      	lsls	r2, r3, #27
 80046e2:	d407      	bmi.n	80046f4 <__swsetup_r+0x30>
 80046e4:	2209      	movs	r2, #9
 80046e6:	602a      	str	r2, [r5, #0]
 80046e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046ec:	81a3      	strh	r3, [r4, #12]
 80046ee:	f04f 30ff 	mov.w	r0, #4294967295
 80046f2:	e033      	b.n	800475c <__swsetup_r+0x98>
 80046f4:	0758      	lsls	r0, r3, #29
 80046f6:	d512      	bpl.n	800471e <__swsetup_r+0x5a>
 80046f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80046fa:	b141      	cbz	r1, 800470e <__swsetup_r+0x4a>
 80046fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004700:	4299      	cmp	r1, r3
 8004702:	d002      	beq.n	800470a <__swsetup_r+0x46>
 8004704:	4628      	mov	r0, r5
 8004706:	f000 f8af 	bl	8004868 <_free_r>
 800470a:	2300      	movs	r3, #0
 800470c:	6363      	str	r3, [r4, #52]	@ 0x34
 800470e:	89a3      	ldrh	r3, [r4, #12]
 8004710:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004714:	81a3      	strh	r3, [r4, #12]
 8004716:	2300      	movs	r3, #0
 8004718:	6063      	str	r3, [r4, #4]
 800471a:	6923      	ldr	r3, [r4, #16]
 800471c:	6023      	str	r3, [r4, #0]
 800471e:	89a3      	ldrh	r3, [r4, #12]
 8004720:	f043 0308 	orr.w	r3, r3, #8
 8004724:	81a3      	strh	r3, [r4, #12]
 8004726:	6923      	ldr	r3, [r4, #16]
 8004728:	b94b      	cbnz	r3, 800473e <__swsetup_r+0x7a>
 800472a:	89a3      	ldrh	r3, [r4, #12]
 800472c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004730:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004734:	d003      	beq.n	800473e <__swsetup_r+0x7a>
 8004736:	4621      	mov	r1, r4
 8004738:	4628      	mov	r0, r5
 800473a:	f000 fd2f 	bl	800519c <__smakebuf_r>
 800473e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004742:	f013 0201 	ands.w	r2, r3, #1
 8004746:	d00a      	beq.n	800475e <__swsetup_r+0x9a>
 8004748:	2200      	movs	r2, #0
 800474a:	60a2      	str	r2, [r4, #8]
 800474c:	6962      	ldr	r2, [r4, #20]
 800474e:	4252      	negs	r2, r2
 8004750:	61a2      	str	r2, [r4, #24]
 8004752:	6922      	ldr	r2, [r4, #16]
 8004754:	b942      	cbnz	r2, 8004768 <__swsetup_r+0xa4>
 8004756:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800475a:	d1c5      	bne.n	80046e8 <__swsetup_r+0x24>
 800475c:	bd38      	pop	{r3, r4, r5, pc}
 800475e:	0799      	lsls	r1, r3, #30
 8004760:	bf58      	it	pl
 8004762:	6962      	ldrpl	r2, [r4, #20]
 8004764:	60a2      	str	r2, [r4, #8]
 8004766:	e7f4      	b.n	8004752 <__swsetup_r+0x8e>
 8004768:	2000      	movs	r0, #0
 800476a:	e7f7      	b.n	800475c <__swsetup_r+0x98>
 800476c:	20000018 	.word	0x20000018

08004770 <memset>:
 8004770:	4402      	add	r2, r0
 8004772:	4603      	mov	r3, r0
 8004774:	4293      	cmp	r3, r2
 8004776:	d100      	bne.n	800477a <memset+0xa>
 8004778:	4770      	bx	lr
 800477a:	f803 1b01 	strb.w	r1, [r3], #1
 800477e:	e7f9      	b.n	8004774 <memset+0x4>

08004780 <_close_r>:
 8004780:	b538      	push	{r3, r4, r5, lr}
 8004782:	4d06      	ldr	r5, [pc, #24]	@ (800479c <_close_r+0x1c>)
 8004784:	2300      	movs	r3, #0
 8004786:	4604      	mov	r4, r0
 8004788:	4608      	mov	r0, r1
 800478a:	602b      	str	r3, [r5, #0]
 800478c:	f7fc f95a 	bl	8000a44 <_close>
 8004790:	1c43      	adds	r3, r0, #1
 8004792:	d102      	bne.n	800479a <_close_r+0x1a>
 8004794:	682b      	ldr	r3, [r5, #0]
 8004796:	b103      	cbz	r3, 800479a <_close_r+0x1a>
 8004798:	6023      	str	r3, [r4, #0]
 800479a:	bd38      	pop	{r3, r4, r5, pc}
 800479c:	200002b4 	.word	0x200002b4

080047a0 <_lseek_r>:
 80047a0:	b538      	push	{r3, r4, r5, lr}
 80047a2:	4d07      	ldr	r5, [pc, #28]	@ (80047c0 <_lseek_r+0x20>)
 80047a4:	4604      	mov	r4, r0
 80047a6:	4608      	mov	r0, r1
 80047a8:	4611      	mov	r1, r2
 80047aa:	2200      	movs	r2, #0
 80047ac:	602a      	str	r2, [r5, #0]
 80047ae:	461a      	mov	r2, r3
 80047b0:	f7fc f96f 	bl	8000a92 <_lseek>
 80047b4:	1c43      	adds	r3, r0, #1
 80047b6:	d102      	bne.n	80047be <_lseek_r+0x1e>
 80047b8:	682b      	ldr	r3, [r5, #0]
 80047ba:	b103      	cbz	r3, 80047be <_lseek_r+0x1e>
 80047bc:	6023      	str	r3, [r4, #0]
 80047be:	bd38      	pop	{r3, r4, r5, pc}
 80047c0:	200002b4 	.word	0x200002b4

080047c4 <_read_r>:
 80047c4:	b538      	push	{r3, r4, r5, lr}
 80047c6:	4d07      	ldr	r5, [pc, #28]	@ (80047e4 <_read_r+0x20>)
 80047c8:	4604      	mov	r4, r0
 80047ca:	4608      	mov	r0, r1
 80047cc:	4611      	mov	r1, r2
 80047ce:	2200      	movs	r2, #0
 80047d0:	602a      	str	r2, [r5, #0]
 80047d2:	461a      	mov	r2, r3
 80047d4:	f7fc f8fd 	bl	80009d2 <_read>
 80047d8:	1c43      	adds	r3, r0, #1
 80047da:	d102      	bne.n	80047e2 <_read_r+0x1e>
 80047dc:	682b      	ldr	r3, [r5, #0]
 80047de:	b103      	cbz	r3, 80047e2 <_read_r+0x1e>
 80047e0:	6023      	str	r3, [r4, #0]
 80047e2:	bd38      	pop	{r3, r4, r5, pc}
 80047e4:	200002b4 	.word	0x200002b4

080047e8 <_write_r>:
 80047e8:	b538      	push	{r3, r4, r5, lr}
 80047ea:	4d07      	ldr	r5, [pc, #28]	@ (8004808 <_write_r+0x20>)
 80047ec:	4604      	mov	r4, r0
 80047ee:	4608      	mov	r0, r1
 80047f0:	4611      	mov	r1, r2
 80047f2:	2200      	movs	r2, #0
 80047f4:	602a      	str	r2, [r5, #0]
 80047f6:	461a      	mov	r2, r3
 80047f8:	f7fc f908 	bl	8000a0c <_write>
 80047fc:	1c43      	adds	r3, r0, #1
 80047fe:	d102      	bne.n	8004806 <_write_r+0x1e>
 8004800:	682b      	ldr	r3, [r5, #0]
 8004802:	b103      	cbz	r3, 8004806 <_write_r+0x1e>
 8004804:	6023      	str	r3, [r4, #0]
 8004806:	bd38      	pop	{r3, r4, r5, pc}
 8004808:	200002b4 	.word	0x200002b4

0800480c <__errno>:
 800480c:	4b01      	ldr	r3, [pc, #4]	@ (8004814 <__errno+0x8>)
 800480e:	6818      	ldr	r0, [r3, #0]
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	20000018 	.word	0x20000018

08004818 <__libc_init_array>:
 8004818:	b570      	push	{r4, r5, r6, lr}
 800481a:	4d0d      	ldr	r5, [pc, #52]	@ (8004850 <__libc_init_array+0x38>)
 800481c:	4c0d      	ldr	r4, [pc, #52]	@ (8004854 <__libc_init_array+0x3c>)
 800481e:	1b64      	subs	r4, r4, r5
 8004820:	10a4      	asrs	r4, r4, #2
 8004822:	2600      	movs	r6, #0
 8004824:	42a6      	cmp	r6, r4
 8004826:	d109      	bne.n	800483c <__libc_init_array+0x24>
 8004828:	4d0b      	ldr	r5, [pc, #44]	@ (8004858 <__libc_init_array+0x40>)
 800482a:	4c0c      	ldr	r4, [pc, #48]	@ (800485c <__libc_init_array+0x44>)
 800482c:	f000 fd24 	bl	8005278 <_init>
 8004830:	1b64      	subs	r4, r4, r5
 8004832:	10a4      	asrs	r4, r4, #2
 8004834:	2600      	movs	r6, #0
 8004836:	42a6      	cmp	r6, r4
 8004838:	d105      	bne.n	8004846 <__libc_init_array+0x2e>
 800483a:	bd70      	pop	{r4, r5, r6, pc}
 800483c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004840:	4798      	blx	r3
 8004842:	3601      	adds	r6, #1
 8004844:	e7ee      	b.n	8004824 <__libc_init_array+0xc>
 8004846:	f855 3b04 	ldr.w	r3, [r5], #4
 800484a:	4798      	blx	r3
 800484c:	3601      	adds	r6, #1
 800484e:	e7f2      	b.n	8004836 <__libc_init_array+0x1e>
 8004850:	08005328 	.word	0x08005328
 8004854:	08005328 	.word	0x08005328
 8004858:	08005328 	.word	0x08005328
 800485c:	0800532c 	.word	0x0800532c

08004860 <__retarget_lock_init_recursive>:
 8004860:	4770      	bx	lr

08004862 <__retarget_lock_acquire_recursive>:
 8004862:	4770      	bx	lr

08004864 <__retarget_lock_release_recursive>:
 8004864:	4770      	bx	lr
	...

08004868 <_free_r>:
 8004868:	b538      	push	{r3, r4, r5, lr}
 800486a:	4605      	mov	r5, r0
 800486c:	2900      	cmp	r1, #0
 800486e:	d041      	beq.n	80048f4 <_free_r+0x8c>
 8004870:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004874:	1f0c      	subs	r4, r1, #4
 8004876:	2b00      	cmp	r3, #0
 8004878:	bfb8      	it	lt
 800487a:	18e4      	addlt	r4, r4, r3
 800487c:	f000 f8e0 	bl	8004a40 <__malloc_lock>
 8004880:	4a1d      	ldr	r2, [pc, #116]	@ (80048f8 <_free_r+0x90>)
 8004882:	6813      	ldr	r3, [r2, #0]
 8004884:	b933      	cbnz	r3, 8004894 <_free_r+0x2c>
 8004886:	6063      	str	r3, [r4, #4]
 8004888:	6014      	str	r4, [r2, #0]
 800488a:	4628      	mov	r0, r5
 800488c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004890:	f000 b8dc 	b.w	8004a4c <__malloc_unlock>
 8004894:	42a3      	cmp	r3, r4
 8004896:	d908      	bls.n	80048aa <_free_r+0x42>
 8004898:	6820      	ldr	r0, [r4, #0]
 800489a:	1821      	adds	r1, r4, r0
 800489c:	428b      	cmp	r3, r1
 800489e:	bf01      	itttt	eq
 80048a0:	6819      	ldreq	r1, [r3, #0]
 80048a2:	685b      	ldreq	r3, [r3, #4]
 80048a4:	1809      	addeq	r1, r1, r0
 80048a6:	6021      	streq	r1, [r4, #0]
 80048a8:	e7ed      	b.n	8004886 <_free_r+0x1e>
 80048aa:	461a      	mov	r2, r3
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	b10b      	cbz	r3, 80048b4 <_free_r+0x4c>
 80048b0:	42a3      	cmp	r3, r4
 80048b2:	d9fa      	bls.n	80048aa <_free_r+0x42>
 80048b4:	6811      	ldr	r1, [r2, #0]
 80048b6:	1850      	adds	r0, r2, r1
 80048b8:	42a0      	cmp	r0, r4
 80048ba:	d10b      	bne.n	80048d4 <_free_r+0x6c>
 80048bc:	6820      	ldr	r0, [r4, #0]
 80048be:	4401      	add	r1, r0
 80048c0:	1850      	adds	r0, r2, r1
 80048c2:	4283      	cmp	r3, r0
 80048c4:	6011      	str	r1, [r2, #0]
 80048c6:	d1e0      	bne.n	800488a <_free_r+0x22>
 80048c8:	6818      	ldr	r0, [r3, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	6053      	str	r3, [r2, #4]
 80048ce:	4408      	add	r0, r1
 80048d0:	6010      	str	r0, [r2, #0]
 80048d2:	e7da      	b.n	800488a <_free_r+0x22>
 80048d4:	d902      	bls.n	80048dc <_free_r+0x74>
 80048d6:	230c      	movs	r3, #12
 80048d8:	602b      	str	r3, [r5, #0]
 80048da:	e7d6      	b.n	800488a <_free_r+0x22>
 80048dc:	6820      	ldr	r0, [r4, #0]
 80048de:	1821      	adds	r1, r4, r0
 80048e0:	428b      	cmp	r3, r1
 80048e2:	bf04      	itt	eq
 80048e4:	6819      	ldreq	r1, [r3, #0]
 80048e6:	685b      	ldreq	r3, [r3, #4]
 80048e8:	6063      	str	r3, [r4, #4]
 80048ea:	bf04      	itt	eq
 80048ec:	1809      	addeq	r1, r1, r0
 80048ee:	6021      	streq	r1, [r4, #0]
 80048f0:	6054      	str	r4, [r2, #4]
 80048f2:	e7ca      	b.n	800488a <_free_r+0x22>
 80048f4:	bd38      	pop	{r3, r4, r5, pc}
 80048f6:	bf00      	nop
 80048f8:	200002c0 	.word	0x200002c0

080048fc <sbrk_aligned>:
 80048fc:	b570      	push	{r4, r5, r6, lr}
 80048fe:	4e0f      	ldr	r6, [pc, #60]	@ (800493c <sbrk_aligned+0x40>)
 8004900:	460c      	mov	r4, r1
 8004902:	6831      	ldr	r1, [r6, #0]
 8004904:	4605      	mov	r5, r0
 8004906:	b911      	cbnz	r1, 800490e <sbrk_aligned+0x12>
 8004908:	f000 fca6 	bl	8005258 <_sbrk_r>
 800490c:	6030      	str	r0, [r6, #0]
 800490e:	4621      	mov	r1, r4
 8004910:	4628      	mov	r0, r5
 8004912:	f000 fca1 	bl	8005258 <_sbrk_r>
 8004916:	1c43      	adds	r3, r0, #1
 8004918:	d103      	bne.n	8004922 <sbrk_aligned+0x26>
 800491a:	f04f 34ff 	mov.w	r4, #4294967295
 800491e:	4620      	mov	r0, r4
 8004920:	bd70      	pop	{r4, r5, r6, pc}
 8004922:	1cc4      	adds	r4, r0, #3
 8004924:	f024 0403 	bic.w	r4, r4, #3
 8004928:	42a0      	cmp	r0, r4
 800492a:	d0f8      	beq.n	800491e <sbrk_aligned+0x22>
 800492c:	1a21      	subs	r1, r4, r0
 800492e:	4628      	mov	r0, r5
 8004930:	f000 fc92 	bl	8005258 <_sbrk_r>
 8004934:	3001      	adds	r0, #1
 8004936:	d1f2      	bne.n	800491e <sbrk_aligned+0x22>
 8004938:	e7ef      	b.n	800491a <sbrk_aligned+0x1e>
 800493a:	bf00      	nop
 800493c:	200002bc 	.word	0x200002bc

08004940 <_malloc_r>:
 8004940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004944:	1ccd      	adds	r5, r1, #3
 8004946:	f025 0503 	bic.w	r5, r5, #3
 800494a:	3508      	adds	r5, #8
 800494c:	2d0c      	cmp	r5, #12
 800494e:	bf38      	it	cc
 8004950:	250c      	movcc	r5, #12
 8004952:	2d00      	cmp	r5, #0
 8004954:	4606      	mov	r6, r0
 8004956:	db01      	blt.n	800495c <_malloc_r+0x1c>
 8004958:	42a9      	cmp	r1, r5
 800495a:	d904      	bls.n	8004966 <_malloc_r+0x26>
 800495c:	230c      	movs	r3, #12
 800495e:	6033      	str	r3, [r6, #0]
 8004960:	2000      	movs	r0, #0
 8004962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004966:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004a3c <_malloc_r+0xfc>
 800496a:	f000 f869 	bl	8004a40 <__malloc_lock>
 800496e:	f8d8 3000 	ldr.w	r3, [r8]
 8004972:	461c      	mov	r4, r3
 8004974:	bb44      	cbnz	r4, 80049c8 <_malloc_r+0x88>
 8004976:	4629      	mov	r1, r5
 8004978:	4630      	mov	r0, r6
 800497a:	f7ff ffbf 	bl	80048fc <sbrk_aligned>
 800497e:	1c43      	adds	r3, r0, #1
 8004980:	4604      	mov	r4, r0
 8004982:	d158      	bne.n	8004a36 <_malloc_r+0xf6>
 8004984:	f8d8 4000 	ldr.w	r4, [r8]
 8004988:	4627      	mov	r7, r4
 800498a:	2f00      	cmp	r7, #0
 800498c:	d143      	bne.n	8004a16 <_malloc_r+0xd6>
 800498e:	2c00      	cmp	r4, #0
 8004990:	d04b      	beq.n	8004a2a <_malloc_r+0xea>
 8004992:	6823      	ldr	r3, [r4, #0]
 8004994:	4639      	mov	r1, r7
 8004996:	4630      	mov	r0, r6
 8004998:	eb04 0903 	add.w	r9, r4, r3
 800499c:	f000 fc5c 	bl	8005258 <_sbrk_r>
 80049a0:	4581      	cmp	r9, r0
 80049a2:	d142      	bne.n	8004a2a <_malloc_r+0xea>
 80049a4:	6821      	ldr	r1, [r4, #0]
 80049a6:	1a6d      	subs	r5, r5, r1
 80049a8:	4629      	mov	r1, r5
 80049aa:	4630      	mov	r0, r6
 80049ac:	f7ff ffa6 	bl	80048fc <sbrk_aligned>
 80049b0:	3001      	adds	r0, #1
 80049b2:	d03a      	beq.n	8004a2a <_malloc_r+0xea>
 80049b4:	6823      	ldr	r3, [r4, #0]
 80049b6:	442b      	add	r3, r5
 80049b8:	6023      	str	r3, [r4, #0]
 80049ba:	f8d8 3000 	ldr.w	r3, [r8]
 80049be:	685a      	ldr	r2, [r3, #4]
 80049c0:	bb62      	cbnz	r2, 8004a1c <_malloc_r+0xdc>
 80049c2:	f8c8 7000 	str.w	r7, [r8]
 80049c6:	e00f      	b.n	80049e8 <_malloc_r+0xa8>
 80049c8:	6822      	ldr	r2, [r4, #0]
 80049ca:	1b52      	subs	r2, r2, r5
 80049cc:	d420      	bmi.n	8004a10 <_malloc_r+0xd0>
 80049ce:	2a0b      	cmp	r2, #11
 80049d0:	d917      	bls.n	8004a02 <_malloc_r+0xc2>
 80049d2:	1961      	adds	r1, r4, r5
 80049d4:	42a3      	cmp	r3, r4
 80049d6:	6025      	str	r5, [r4, #0]
 80049d8:	bf18      	it	ne
 80049da:	6059      	strne	r1, [r3, #4]
 80049dc:	6863      	ldr	r3, [r4, #4]
 80049de:	bf08      	it	eq
 80049e0:	f8c8 1000 	streq.w	r1, [r8]
 80049e4:	5162      	str	r2, [r4, r5]
 80049e6:	604b      	str	r3, [r1, #4]
 80049e8:	4630      	mov	r0, r6
 80049ea:	f000 f82f 	bl	8004a4c <__malloc_unlock>
 80049ee:	f104 000b 	add.w	r0, r4, #11
 80049f2:	1d23      	adds	r3, r4, #4
 80049f4:	f020 0007 	bic.w	r0, r0, #7
 80049f8:	1ac2      	subs	r2, r0, r3
 80049fa:	bf1c      	itt	ne
 80049fc:	1a1b      	subne	r3, r3, r0
 80049fe:	50a3      	strne	r3, [r4, r2]
 8004a00:	e7af      	b.n	8004962 <_malloc_r+0x22>
 8004a02:	6862      	ldr	r2, [r4, #4]
 8004a04:	42a3      	cmp	r3, r4
 8004a06:	bf0c      	ite	eq
 8004a08:	f8c8 2000 	streq.w	r2, [r8]
 8004a0c:	605a      	strne	r2, [r3, #4]
 8004a0e:	e7eb      	b.n	80049e8 <_malloc_r+0xa8>
 8004a10:	4623      	mov	r3, r4
 8004a12:	6864      	ldr	r4, [r4, #4]
 8004a14:	e7ae      	b.n	8004974 <_malloc_r+0x34>
 8004a16:	463c      	mov	r4, r7
 8004a18:	687f      	ldr	r7, [r7, #4]
 8004a1a:	e7b6      	b.n	800498a <_malloc_r+0x4a>
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	42a3      	cmp	r3, r4
 8004a22:	d1fb      	bne.n	8004a1c <_malloc_r+0xdc>
 8004a24:	2300      	movs	r3, #0
 8004a26:	6053      	str	r3, [r2, #4]
 8004a28:	e7de      	b.n	80049e8 <_malloc_r+0xa8>
 8004a2a:	230c      	movs	r3, #12
 8004a2c:	6033      	str	r3, [r6, #0]
 8004a2e:	4630      	mov	r0, r6
 8004a30:	f000 f80c 	bl	8004a4c <__malloc_unlock>
 8004a34:	e794      	b.n	8004960 <_malloc_r+0x20>
 8004a36:	6005      	str	r5, [r0, #0]
 8004a38:	e7d6      	b.n	80049e8 <_malloc_r+0xa8>
 8004a3a:	bf00      	nop
 8004a3c:	200002c0 	.word	0x200002c0

08004a40 <__malloc_lock>:
 8004a40:	4801      	ldr	r0, [pc, #4]	@ (8004a48 <__malloc_lock+0x8>)
 8004a42:	f7ff bf0e 	b.w	8004862 <__retarget_lock_acquire_recursive>
 8004a46:	bf00      	nop
 8004a48:	200002b8 	.word	0x200002b8

08004a4c <__malloc_unlock>:
 8004a4c:	4801      	ldr	r0, [pc, #4]	@ (8004a54 <__malloc_unlock+0x8>)
 8004a4e:	f7ff bf09 	b.w	8004864 <__retarget_lock_release_recursive>
 8004a52:	bf00      	nop
 8004a54:	200002b8 	.word	0x200002b8

08004a58 <__sfputc_r>:
 8004a58:	6893      	ldr	r3, [r2, #8]
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	b410      	push	{r4}
 8004a60:	6093      	str	r3, [r2, #8]
 8004a62:	da08      	bge.n	8004a76 <__sfputc_r+0x1e>
 8004a64:	6994      	ldr	r4, [r2, #24]
 8004a66:	42a3      	cmp	r3, r4
 8004a68:	db01      	blt.n	8004a6e <__sfputc_r+0x16>
 8004a6a:	290a      	cmp	r1, #10
 8004a6c:	d103      	bne.n	8004a76 <__sfputc_r+0x1e>
 8004a6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a72:	f7ff bde8 	b.w	8004646 <__swbuf_r>
 8004a76:	6813      	ldr	r3, [r2, #0]
 8004a78:	1c58      	adds	r0, r3, #1
 8004a7a:	6010      	str	r0, [r2, #0]
 8004a7c:	7019      	strb	r1, [r3, #0]
 8004a7e:	4608      	mov	r0, r1
 8004a80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <__sfputs_r>:
 8004a86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a88:	4606      	mov	r6, r0
 8004a8a:	460f      	mov	r7, r1
 8004a8c:	4614      	mov	r4, r2
 8004a8e:	18d5      	adds	r5, r2, r3
 8004a90:	42ac      	cmp	r4, r5
 8004a92:	d101      	bne.n	8004a98 <__sfputs_r+0x12>
 8004a94:	2000      	movs	r0, #0
 8004a96:	e007      	b.n	8004aa8 <__sfputs_r+0x22>
 8004a98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a9c:	463a      	mov	r2, r7
 8004a9e:	4630      	mov	r0, r6
 8004aa0:	f7ff ffda 	bl	8004a58 <__sfputc_r>
 8004aa4:	1c43      	adds	r3, r0, #1
 8004aa6:	d1f3      	bne.n	8004a90 <__sfputs_r+0xa>
 8004aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004aac <_vfiprintf_r>:
 8004aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ab0:	460d      	mov	r5, r1
 8004ab2:	b09d      	sub	sp, #116	@ 0x74
 8004ab4:	4614      	mov	r4, r2
 8004ab6:	4698      	mov	r8, r3
 8004ab8:	4606      	mov	r6, r0
 8004aba:	b118      	cbz	r0, 8004ac4 <_vfiprintf_r+0x18>
 8004abc:	6a03      	ldr	r3, [r0, #32]
 8004abe:	b90b      	cbnz	r3, 8004ac4 <_vfiprintf_r+0x18>
 8004ac0:	f7ff fcd8 	bl	8004474 <__sinit>
 8004ac4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004ac6:	07d9      	lsls	r1, r3, #31
 8004ac8:	d405      	bmi.n	8004ad6 <_vfiprintf_r+0x2a>
 8004aca:	89ab      	ldrh	r3, [r5, #12]
 8004acc:	059a      	lsls	r2, r3, #22
 8004ace:	d402      	bmi.n	8004ad6 <_vfiprintf_r+0x2a>
 8004ad0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004ad2:	f7ff fec6 	bl	8004862 <__retarget_lock_acquire_recursive>
 8004ad6:	89ab      	ldrh	r3, [r5, #12]
 8004ad8:	071b      	lsls	r3, r3, #28
 8004ada:	d501      	bpl.n	8004ae0 <_vfiprintf_r+0x34>
 8004adc:	692b      	ldr	r3, [r5, #16]
 8004ade:	b99b      	cbnz	r3, 8004b08 <_vfiprintf_r+0x5c>
 8004ae0:	4629      	mov	r1, r5
 8004ae2:	4630      	mov	r0, r6
 8004ae4:	f7ff fdee 	bl	80046c4 <__swsetup_r>
 8004ae8:	b170      	cbz	r0, 8004b08 <_vfiprintf_r+0x5c>
 8004aea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004aec:	07dc      	lsls	r4, r3, #31
 8004aee:	d504      	bpl.n	8004afa <_vfiprintf_r+0x4e>
 8004af0:	f04f 30ff 	mov.w	r0, #4294967295
 8004af4:	b01d      	add	sp, #116	@ 0x74
 8004af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004afa:	89ab      	ldrh	r3, [r5, #12]
 8004afc:	0598      	lsls	r0, r3, #22
 8004afe:	d4f7      	bmi.n	8004af0 <_vfiprintf_r+0x44>
 8004b00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004b02:	f7ff feaf 	bl	8004864 <__retarget_lock_release_recursive>
 8004b06:	e7f3      	b.n	8004af0 <_vfiprintf_r+0x44>
 8004b08:	2300      	movs	r3, #0
 8004b0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b0c:	2320      	movs	r3, #32
 8004b0e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004b12:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b16:	2330      	movs	r3, #48	@ 0x30
 8004b18:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004cc8 <_vfiprintf_r+0x21c>
 8004b1c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004b20:	f04f 0901 	mov.w	r9, #1
 8004b24:	4623      	mov	r3, r4
 8004b26:	469a      	mov	sl, r3
 8004b28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b2c:	b10a      	cbz	r2, 8004b32 <_vfiprintf_r+0x86>
 8004b2e:	2a25      	cmp	r2, #37	@ 0x25
 8004b30:	d1f9      	bne.n	8004b26 <_vfiprintf_r+0x7a>
 8004b32:	ebba 0b04 	subs.w	fp, sl, r4
 8004b36:	d00b      	beq.n	8004b50 <_vfiprintf_r+0xa4>
 8004b38:	465b      	mov	r3, fp
 8004b3a:	4622      	mov	r2, r4
 8004b3c:	4629      	mov	r1, r5
 8004b3e:	4630      	mov	r0, r6
 8004b40:	f7ff ffa1 	bl	8004a86 <__sfputs_r>
 8004b44:	3001      	adds	r0, #1
 8004b46:	f000 80a7 	beq.w	8004c98 <_vfiprintf_r+0x1ec>
 8004b4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004b4c:	445a      	add	r2, fp
 8004b4e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004b50:	f89a 3000 	ldrb.w	r3, [sl]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	f000 809f 	beq.w	8004c98 <_vfiprintf_r+0x1ec>
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8004b60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b64:	f10a 0a01 	add.w	sl, sl, #1
 8004b68:	9304      	str	r3, [sp, #16]
 8004b6a:	9307      	str	r3, [sp, #28]
 8004b6c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004b70:	931a      	str	r3, [sp, #104]	@ 0x68
 8004b72:	4654      	mov	r4, sl
 8004b74:	2205      	movs	r2, #5
 8004b76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b7a:	4853      	ldr	r0, [pc, #332]	@ (8004cc8 <_vfiprintf_r+0x21c>)
 8004b7c:	f7fb fb28 	bl	80001d0 <memchr>
 8004b80:	9a04      	ldr	r2, [sp, #16]
 8004b82:	b9d8      	cbnz	r0, 8004bbc <_vfiprintf_r+0x110>
 8004b84:	06d1      	lsls	r1, r2, #27
 8004b86:	bf44      	itt	mi
 8004b88:	2320      	movmi	r3, #32
 8004b8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004b8e:	0713      	lsls	r3, r2, #28
 8004b90:	bf44      	itt	mi
 8004b92:	232b      	movmi	r3, #43	@ 0x2b
 8004b94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004b98:	f89a 3000 	ldrb.w	r3, [sl]
 8004b9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b9e:	d015      	beq.n	8004bcc <_vfiprintf_r+0x120>
 8004ba0:	9a07      	ldr	r2, [sp, #28]
 8004ba2:	4654      	mov	r4, sl
 8004ba4:	2000      	movs	r0, #0
 8004ba6:	f04f 0c0a 	mov.w	ip, #10
 8004baa:	4621      	mov	r1, r4
 8004bac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004bb0:	3b30      	subs	r3, #48	@ 0x30
 8004bb2:	2b09      	cmp	r3, #9
 8004bb4:	d94b      	bls.n	8004c4e <_vfiprintf_r+0x1a2>
 8004bb6:	b1b0      	cbz	r0, 8004be6 <_vfiprintf_r+0x13a>
 8004bb8:	9207      	str	r2, [sp, #28]
 8004bba:	e014      	b.n	8004be6 <_vfiprintf_r+0x13a>
 8004bbc:	eba0 0308 	sub.w	r3, r0, r8
 8004bc0:	fa09 f303 	lsl.w	r3, r9, r3
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	9304      	str	r3, [sp, #16]
 8004bc8:	46a2      	mov	sl, r4
 8004bca:	e7d2      	b.n	8004b72 <_vfiprintf_r+0xc6>
 8004bcc:	9b03      	ldr	r3, [sp, #12]
 8004bce:	1d19      	adds	r1, r3, #4
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	9103      	str	r1, [sp, #12]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	bfbb      	ittet	lt
 8004bd8:	425b      	neglt	r3, r3
 8004bda:	f042 0202 	orrlt.w	r2, r2, #2
 8004bde:	9307      	strge	r3, [sp, #28]
 8004be0:	9307      	strlt	r3, [sp, #28]
 8004be2:	bfb8      	it	lt
 8004be4:	9204      	strlt	r2, [sp, #16]
 8004be6:	7823      	ldrb	r3, [r4, #0]
 8004be8:	2b2e      	cmp	r3, #46	@ 0x2e
 8004bea:	d10a      	bne.n	8004c02 <_vfiprintf_r+0x156>
 8004bec:	7863      	ldrb	r3, [r4, #1]
 8004bee:	2b2a      	cmp	r3, #42	@ 0x2a
 8004bf0:	d132      	bne.n	8004c58 <_vfiprintf_r+0x1ac>
 8004bf2:	9b03      	ldr	r3, [sp, #12]
 8004bf4:	1d1a      	adds	r2, r3, #4
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	9203      	str	r2, [sp, #12]
 8004bfa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004bfe:	3402      	adds	r4, #2
 8004c00:	9305      	str	r3, [sp, #20]
 8004c02:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004cd8 <_vfiprintf_r+0x22c>
 8004c06:	7821      	ldrb	r1, [r4, #0]
 8004c08:	2203      	movs	r2, #3
 8004c0a:	4650      	mov	r0, sl
 8004c0c:	f7fb fae0 	bl	80001d0 <memchr>
 8004c10:	b138      	cbz	r0, 8004c22 <_vfiprintf_r+0x176>
 8004c12:	9b04      	ldr	r3, [sp, #16]
 8004c14:	eba0 000a 	sub.w	r0, r0, sl
 8004c18:	2240      	movs	r2, #64	@ 0x40
 8004c1a:	4082      	lsls	r2, r0
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	3401      	adds	r4, #1
 8004c20:	9304      	str	r3, [sp, #16]
 8004c22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c26:	4829      	ldr	r0, [pc, #164]	@ (8004ccc <_vfiprintf_r+0x220>)
 8004c28:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004c2c:	2206      	movs	r2, #6
 8004c2e:	f7fb facf 	bl	80001d0 <memchr>
 8004c32:	2800      	cmp	r0, #0
 8004c34:	d03f      	beq.n	8004cb6 <_vfiprintf_r+0x20a>
 8004c36:	4b26      	ldr	r3, [pc, #152]	@ (8004cd0 <_vfiprintf_r+0x224>)
 8004c38:	bb1b      	cbnz	r3, 8004c82 <_vfiprintf_r+0x1d6>
 8004c3a:	9b03      	ldr	r3, [sp, #12]
 8004c3c:	3307      	adds	r3, #7
 8004c3e:	f023 0307 	bic.w	r3, r3, #7
 8004c42:	3308      	adds	r3, #8
 8004c44:	9303      	str	r3, [sp, #12]
 8004c46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c48:	443b      	add	r3, r7
 8004c4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c4c:	e76a      	b.n	8004b24 <_vfiprintf_r+0x78>
 8004c4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c52:	460c      	mov	r4, r1
 8004c54:	2001      	movs	r0, #1
 8004c56:	e7a8      	b.n	8004baa <_vfiprintf_r+0xfe>
 8004c58:	2300      	movs	r3, #0
 8004c5a:	3401      	adds	r4, #1
 8004c5c:	9305      	str	r3, [sp, #20]
 8004c5e:	4619      	mov	r1, r3
 8004c60:	f04f 0c0a 	mov.w	ip, #10
 8004c64:	4620      	mov	r0, r4
 8004c66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c6a:	3a30      	subs	r2, #48	@ 0x30
 8004c6c:	2a09      	cmp	r2, #9
 8004c6e:	d903      	bls.n	8004c78 <_vfiprintf_r+0x1cc>
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d0c6      	beq.n	8004c02 <_vfiprintf_r+0x156>
 8004c74:	9105      	str	r1, [sp, #20]
 8004c76:	e7c4      	b.n	8004c02 <_vfiprintf_r+0x156>
 8004c78:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c7c:	4604      	mov	r4, r0
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e7f0      	b.n	8004c64 <_vfiprintf_r+0x1b8>
 8004c82:	ab03      	add	r3, sp, #12
 8004c84:	9300      	str	r3, [sp, #0]
 8004c86:	462a      	mov	r2, r5
 8004c88:	4b12      	ldr	r3, [pc, #72]	@ (8004cd4 <_vfiprintf_r+0x228>)
 8004c8a:	a904      	add	r1, sp, #16
 8004c8c:	4630      	mov	r0, r6
 8004c8e:	f3af 8000 	nop.w
 8004c92:	4607      	mov	r7, r0
 8004c94:	1c78      	adds	r0, r7, #1
 8004c96:	d1d6      	bne.n	8004c46 <_vfiprintf_r+0x19a>
 8004c98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004c9a:	07d9      	lsls	r1, r3, #31
 8004c9c:	d405      	bmi.n	8004caa <_vfiprintf_r+0x1fe>
 8004c9e:	89ab      	ldrh	r3, [r5, #12]
 8004ca0:	059a      	lsls	r2, r3, #22
 8004ca2:	d402      	bmi.n	8004caa <_vfiprintf_r+0x1fe>
 8004ca4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004ca6:	f7ff fddd 	bl	8004864 <__retarget_lock_release_recursive>
 8004caa:	89ab      	ldrh	r3, [r5, #12]
 8004cac:	065b      	lsls	r3, r3, #25
 8004cae:	f53f af1f 	bmi.w	8004af0 <_vfiprintf_r+0x44>
 8004cb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004cb4:	e71e      	b.n	8004af4 <_vfiprintf_r+0x48>
 8004cb6:	ab03      	add	r3, sp, #12
 8004cb8:	9300      	str	r3, [sp, #0]
 8004cba:	462a      	mov	r2, r5
 8004cbc:	4b05      	ldr	r3, [pc, #20]	@ (8004cd4 <_vfiprintf_r+0x228>)
 8004cbe:	a904      	add	r1, sp, #16
 8004cc0:	4630      	mov	r0, r6
 8004cc2:	f000 f879 	bl	8004db8 <_printf_i>
 8004cc6:	e7e4      	b.n	8004c92 <_vfiprintf_r+0x1e6>
 8004cc8:	080052ec 	.word	0x080052ec
 8004ccc:	080052f6 	.word	0x080052f6
 8004cd0:	00000000 	.word	0x00000000
 8004cd4:	08004a87 	.word	0x08004a87
 8004cd8:	080052f2 	.word	0x080052f2

08004cdc <_printf_common>:
 8004cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ce0:	4616      	mov	r6, r2
 8004ce2:	4698      	mov	r8, r3
 8004ce4:	688a      	ldr	r2, [r1, #8]
 8004ce6:	690b      	ldr	r3, [r1, #16]
 8004ce8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004cec:	4293      	cmp	r3, r2
 8004cee:	bfb8      	it	lt
 8004cf0:	4613      	movlt	r3, r2
 8004cf2:	6033      	str	r3, [r6, #0]
 8004cf4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004cf8:	4607      	mov	r7, r0
 8004cfa:	460c      	mov	r4, r1
 8004cfc:	b10a      	cbz	r2, 8004d02 <_printf_common+0x26>
 8004cfe:	3301      	adds	r3, #1
 8004d00:	6033      	str	r3, [r6, #0]
 8004d02:	6823      	ldr	r3, [r4, #0]
 8004d04:	0699      	lsls	r1, r3, #26
 8004d06:	bf42      	ittt	mi
 8004d08:	6833      	ldrmi	r3, [r6, #0]
 8004d0a:	3302      	addmi	r3, #2
 8004d0c:	6033      	strmi	r3, [r6, #0]
 8004d0e:	6825      	ldr	r5, [r4, #0]
 8004d10:	f015 0506 	ands.w	r5, r5, #6
 8004d14:	d106      	bne.n	8004d24 <_printf_common+0x48>
 8004d16:	f104 0a19 	add.w	sl, r4, #25
 8004d1a:	68e3      	ldr	r3, [r4, #12]
 8004d1c:	6832      	ldr	r2, [r6, #0]
 8004d1e:	1a9b      	subs	r3, r3, r2
 8004d20:	42ab      	cmp	r3, r5
 8004d22:	dc26      	bgt.n	8004d72 <_printf_common+0x96>
 8004d24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004d28:	6822      	ldr	r2, [r4, #0]
 8004d2a:	3b00      	subs	r3, #0
 8004d2c:	bf18      	it	ne
 8004d2e:	2301      	movne	r3, #1
 8004d30:	0692      	lsls	r2, r2, #26
 8004d32:	d42b      	bmi.n	8004d8c <_printf_common+0xb0>
 8004d34:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004d38:	4641      	mov	r1, r8
 8004d3a:	4638      	mov	r0, r7
 8004d3c:	47c8      	blx	r9
 8004d3e:	3001      	adds	r0, #1
 8004d40:	d01e      	beq.n	8004d80 <_printf_common+0xa4>
 8004d42:	6823      	ldr	r3, [r4, #0]
 8004d44:	6922      	ldr	r2, [r4, #16]
 8004d46:	f003 0306 	and.w	r3, r3, #6
 8004d4a:	2b04      	cmp	r3, #4
 8004d4c:	bf02      	ittt	eq
 8004d4e:	68e5      	ldreq	r5, [r4, #12]
 8004d50:	6833      	ldreq	r3, [r6, #0]
 8004d52:	1aed      	subeq	r5, r5, r3
 8004d54:	68a3      	ldr	r3, [r4, #8]
 8004d56:	bf0c      	ite	eq
 8004d58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d5c:	2500      	movne	r5, #0
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	bfc4      	itt	gt
 8004d62:	1a9b      	subgt	r3, r3, r2
 8004d64:	18ed      	addgt	r5, r5, r3
 8004d66:	2600      	movs	r6, #0
 8004d68:	341a      	adds	r4, #26
 8004d6a:	42b5      	cmp	r5, r6
 8004d6c:	d11a      	bne.n	8004da4 <_printf_common+0xc8>
 8004d6e:	2000      	movs	r0, #0
 8004d70:	e008      	b.n	8004d84 <_printf_common+0xa8>
 8004d72:	2301      	movs	r3, #1
 8004d74:	4652      	mov	r2, sl
 8004d76:	4641      	mov	r1, r8
 8004d78:	4638      	mov	r0, r7
 8004d7a:	47c8      	blx	r9
 8004d7c:	3001      	adds	r0, #1
 8004d7e:	d103      	bne.n	8004d88 <_printf_common+0xac>
 8004d80:	f04f 30ff 	mov.w	r0, #4294967295
 8004d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d88:	3501      	adds	r5, #1
 8004d8a:	e7c6      	b.n	8004d1a <_printf_common+0x3e>
 8004d8c:	18e1      	adds	r1, r4, r3
 8004d8e:	1c5a      	adds	r2, r3, #1
 8004d90:	2030      	movs	r0, #48	@ 0x30
 8004d92:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004d96:	4422      	add	r2, r4
 8004d98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004d9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004da0:	3302      	adds	r3, #2
 8004da2:	e7c7      	b.n	8004d34 <_printf_common+0x58>
 8004da4:	2301      	movs	r3, #1
 8004da6:	4622      	mov	r2, r4
 8004da8:	4641      	mov	r1, r8
 8004daa:	4638      	mov	r0, r7
 8004dac:	47c8      	blx	r9
 8004dae:	3001      	adds	r0, #1
 8004db0:	d0e6      	beq.n	8004d80 <_printf_common+0xa4>
 8004db2:	3601      	adds	r6, #1
 8004db4:	e7d9      	b.n	8004d6a <_printf_common+0x8e>
	...

08004db8 <_printf_i>:
 8004db8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004dbc:	7e0f      	ldrb	r7, [r1, #24]
 8004dbe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004dc0:	2f78      	cmp	r7, #120	@ 0x78
 8004dc2:	4691      	mov	r9, r2
 8004dc4:	4680      	mov	r8, r0
 8004dc6:	460c      	mov	r4, r1
 8004dc8:	469a      	mov	sl, r3
 8004dca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004dce:	d807      	bhi.n	8004de0 <_printf_i+0x28>
 8004dd0:	2f62      	cmp	r7, #98	@ 0x62
 8004dd2:	d80a      	bhi.n	8004dea <_printf_i+0x32>
 8004dd4:	2f00      	cmp	r7, #0
 8004dd6:	f000 80d2 	beq.w	8004f7e <_printf_i+0x1c6>
 8004dda:	2f58      	cmp	r7, #88	@ 0x58
 8004ddc:	f000 80b9 	beq.w	8004f52 <_printf_i+0x19a>
 8004de0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004de4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004de8:	e03a      	b.n	8004e60 <_printf_i+0xa8>
 8004dea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004dee:	2b15      	cmp	r3, #21
 8004df0:	d8f6      	bhi.n	8004de0 <_printf_i+0x28>
 8004df2:	a101      	add	r1, pc, #4	@ (adr r1, 8004df8 <_printf_i+0x40>)
 8004df4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004df8:	08004e51 	.word	0x08004e51
 8004dfc:	08004e65 	.word	0x08004e65
 8004e00:	08004de1 	.word	0x08004de1
 8004e04:	08004de1 	.word	0x08004de1
 8004e08:	08004de1 	.word	0x08004de1
 8004e0c:	08004de1 	.word	0x08004de1
 8004e10:	08004e65 	.word	0x08004e65
 8004e14:	08004de1 	.word	0x08004de1
 8004e18:	08004de1 	.word	0x08004de1
 8004e1c:	08004de1 	.word	0x08004de1
 8004e20:	08004de1 	.word	0x08004de1
 8004e24:	08004f65 	.word	0x08004f65
 8004e28:	08004e8f 	.word	0x08004e8f
 8004e2c:	08004f1f 	.word	0x08004f1f
 8004e30:	08004de1 	.word	0x08004de1
 8004e34:	08004de1 	.word	0x08004de1
 8004e38:	08004f87 	.word	0x08004f87
 8004e3c:	08004de1 	.word	0x08004de1
 8004e40:	08004e8f 	.word	0x08004e8f
 8004e44:	08004de1 	.word	0x08004de1
 8004e48:	08004de1 	.word	0x08004de1
 8004e4c:	08004f27 	.word	0x08004f27
 8004e50:	6833      	ldr	r3, [r6, #0]
 8004e52:	1d1a      	adds	r2, r3, #4
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	6032      	str	r2, [r6, #0]
 8004e58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004e60:	2301      	movs	r3, #1
 8004e62:	e09d      	b.n	8004fa0 <_printf_i+0x1e8>
 8004e64:	6833      	ldr	r3, [r6, #0]
 8004e66:	6820      	ldr	r0, [r4, #0]
 8004e68:	1d19      	adds	r1, r3, #4
 8004e6a:	6031      	str	r1, [r6, #0]
 8004e6c:	0606      	lsls	r6, r0, #24
 8004e6e:	d501      	bpl.n	8004e74 <_printf_i+0xbc>
 8004e70:	681d      	ldr	r5, [r3, #0]
 8004e72:	e003      	b.n	8004e7c <_printf_i+0xc4>
 8004e74:	0645      	lsls	r5, r0, #25
 8004e76:	d5fb      	bpl.n	8004e70 <_printf_i+0xb8>
 8004e78:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004e7c:	2d00      	cmp	r5, #0
 8004e7e:	da03      	bge.n	8004e88 <_printf_i+0xd0>
 8004e80:	232d      	movs	r3, #45	@ 0x2d
 8004e82:	426d      	negs	r5, r5
 8004e84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e88:	4859      	ldr	r0, [pc, #356]	@ (8004ff0 <_printf_i+0x238>)
 8004e8a:	230a      	movs	r3, #10
 8004e8c:	e011      	b.n	8004eb2 <_printf_i+0xfa>
 8004e8e:	6821      	ldr	r1, [r4, #0]
 8004e90:	6833      	ldr	r3, [r6, #0]
 8004e92:	0608      	lsls	r0, r1, #24
 8004e94:	f853 5b04 	ldr.w	r5, [r3], #4
 8004e98:	d402      	bmi.n	8004ea0 <_printf_i+0xe8>
 8004e9a:	0649      	lsls	r1, r1, #25
 8004e9c:	bf48      	it	mi
 8004e9e:	b2ad      	uxthmi	r5, r5
 8004ea0:	2f6f      	cmp	r7, #111	@ 0x6f
 8004ea2:	4853      	ldr	r0, [pc, #332]	@ (8004ff0 <_printf_i+0x238>)
 8004ea4:	6033      	str	r3, [r6, #0]
 8004ea6:	bf14      	ite	ne
 8004ea8:	230a      	movne	r3, #10
 8004eaa:	2308      	moveq	r3, #8
 8004eac:	2100      	movs	r1, #0
 8004eae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004eb2:	6866      	ldr	r6, [r4, #4]
 8004eb4:	60a6      	str	r6, [r4, #8]
 8004eb6:	2e00      	cmp	r6, #0
 8004eb8:	bfa2      	ittt	ge
 8004eba:	6821      	ldrge	r1, [r4, #0]
 8004ebc:	f021 0104 	bicge.w	r1, r1, #4
 8004ec0:	6021      	strge	r1, [r4, #0]
 8004ec2:	b90d      	cbnz	r5, 8004ec8 <_printf_i+0x110>
 8004ec4:	2e00      	cmp	r6, #0
 8004ec6:	d04b      	beq.n	8004f60 <_printf_i+0x1a8>
 8004ec8:	4616      	mov	r6, r2
 8004eca:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ece:	fb03 5711 	mls	r7, r3, r1, r5
 8004ed2:	5dc7      	ldrb	r7, [r0, r7]
 8004ed4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ed8:	462f      	mov	r7, r5
 8004eda:	42bb      	cmp	r3, r7
 8004edc:	460d      	mov	r5, r1
 8004ede:	d9f4      	bls.n	8004eca <_printf_i+0x112>
 8004ee0:	2b08      	cmp	r3, #8
 8004ee2:	d10b      	bne.n	8004efc <_printf_i+0x144>
 8004ee4:	6823      	ldr	r3, [r4, #0]
 8004ee6:	07df      	lsls	r7, r3, #31
 8004ee8:	d508      	bpl.n	8004efc <_printf_i+0x144>
 8004eea:	6923      	ldr	r3, [r4, #16]
 8004eec:	6861      	ldr	r1, [r4, #4]
 8004eee:	4299      	cmp	r1, r3
 8004ef0:	bfde      	ittt	le
 8004ef2:	2330      	movle	r3, #48	@ 0x30
 8004ef4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ef8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004efc:	1b92      	subs	r2, r2, r6
 8004efe:	6122      	str	r2, [r4, #16]
 8004f00:	f8cd a000 	str.w	sl, [sp]
 8004f04:	464b      	mov	r3, r9
 8004f06:	aa03      	add	r2, sp, #12
 8004f08:	4621      	mov	r1, r4
 8004f0a:	4640      	mov	r0, r8
 8004f0c:	f7ff fee6 	bl	8004cdc <_printf_common>
 8004f10:	3001      	adds	r0, #1
 8004f12:	d14a      	bne.n	8004faa <_printf_i+0x1f2>
 8004f14:	f04f 30ff 	mov.w	r0, #4294967295
 8004f18:	b004      	add	sp, #16
 8004f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f1e:	6823      	ldr	r3, [r4, #0]
 8004f20:	f043 0320 	orr.w	r3, r3, #32
 8004f24:	6023      	str	r3, [r4, #0]
 8004f26:	4833      	ldr	r0, [pc, #204]	@ (8004ff4 <_printf_i+0x23c>)
 8004f28:	2778      	movs	r7, #120	@ 0x78
 8004f2a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004f2e:	6823      	ldr	r3, [r4, #0]
 8004f30:	6831      	ldr	r1, [r6, #0]
 8004f32:	061f      	lsls	r7, r3, #24
 8004f34:	f851 5b04 	ldr.w	r5, [r1], #4
 8004f38:	d402      	bmi.n	8004f40 <_printf_i+0x188>
 8004f3a:	065f      	lsls	r7, r3, #25
 8004f3c:	bf48      	it	mi
 8004f3e:	b2ad      	uxthmi	r5, r5
 8004f40:	6031      	str	r1, [r6, #0]
 8004f42:	07d9      	lsls	r1, r3, #31
 8004f44:	bf44      	itt	mi
 8004f46:	f043 0320 	orrmi.w	r3, r3, #32
 8004f4a:	6023      	strmi	r3, [r4, #0]
 8004f4c:	b11d      	cbz	r5, 8004f56 <_printf_i+0x19e>
 8004f4e:	2310      	movs	r3, #16
 8004f50:	e7ac      	b.n	8004eac <_printf_i+0xf4>
 8004f52:	4827      	ldr	r0, [pc, #156]	@ (8004ff0 <_printf_i+0x238>)
 8004f54:	e7e9      	b.n	8004f2a <_printf_i+0x172>
 8004f56:	6823      	ldr	r3, [r4, #0]
 8004f58:	f023 0320 	bic.w	r3, r3, #32
 8004f5c:	6023      	str	r3, [r4, #0]
 8004f5e:	e7f6      	b.n	8004f4e <_printf_i+0x196>
 8004f60:	4616      	mov	r6, r2
 8004f62:	e7bd      	b.n	8004ee0 <_printf_i+0x128>
 8004f64:	6833      	ldr	r3, [r6, #0]
 8004f66:	6825      	ldr	r5, [r4, #0]
 8004f68:	6961      	ldr	r1, [r4, #20]
 8004f6a:	1d18      	adds	r0, r3, #4
 8004f6c:	6030      	str	r0, [r6, #0]
 8004f6e:	062e      	lsls	r6, r5, #24
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	d501      	bpl.n	8004f78 <_printf_i+0x1c0>
 8004f74:	6019      	str	r1, [r3, #0]
 8004f76:	e002      	b.n	8004f7e <_printf_i+0x1c6>
 8004f78:	0668      	lsls	r0, r5, #25
 8004f7a:	d5fb      	bpl.n	8004f74 <_printf_i+0x1bc>
 8004f7c:	8019      	strh	r1, [r3, #0]
 8004f7e:	2300      	movs	r3, #0
 8004f80:	6123      	str	r3, [r4, #16]
 8004f82:	4616      	mov	r6, r2
 8004f84:	e7bc      	b.n	8004f00 <_printf_i+0x148>
 8004f86:	6833      	ldr	r3, [r6, #0]
 8004f88:	1d1a      	adds	r2, r3, #4
 8004f8a:	6032      	str	r2, [r6, #0]
 8004f8c:	681e      	ldr	r6, [r3, #0]
 8004f8e:	6862      	ldr	r2, [r4, #4]
 8004f90:	2100      	movs	r1, #0
 8004f92:	4630      	mov	r0, r6
 8004f94:	f7fb f91c 	bl	80001d0 <memchr>
 8004f98:	b108      	cbz	r0, 8004f9e <_printf_i+0x1e6>
 8004f9a:	1b80      	subs	r0, r0, r6
 8004f9c:	6060      	str	r0, [r4, #4]
 8004f9e:	6863      	ldr	r3, [r4, #4]
 8004fa0:	6123      	str	r3, [r4, #16]
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fa8:	e7aa      	b.n	8004f00 <_printf_i+0x148>
 8004faa:	6923      	ldr	r3, [r4, #16]
 8004fac:	4632      	mov	r2, r6
 8004fae:	4649      	mov	r1, r9
 8004fb0:	4640      	mov	r0, r8
 8004fb2:	47d0      	blx	sl
 8004fb4:	3001      	adds	r0, #1
 8004fb6:	d0ad      	beq.n	8004f14 <_printf_i+0x15c>
 8004fb8:	6823      	ldr	r3, [r4, #0]
 8004fba:	079b      	lsls	r3, r3, #30
 8004fbc:	d413      	bmi.n	8004fe6 <_printf_i+0x22e>
 8004fbe:	68e0      	ldr	r0, [r4, #12]
 8004fc0:	9b03      	ldr	r3, [sp, #12]
 8004fc2:	4298      	cmp	r0, r3
 8004fc4:	bfb8      	it	lt
 8004fc6:	4618      	movlt	r0, r3
 8004fc8:	e7a6      	b.n	8004f18 <_printf_i+0x160>
 8004fca:	2301      	movs	r3, #1
 8004fcc:	4632      	mov	r2, r6
 8004fce:	4649      	mov	r1, r9
 8004fd0:	4640      	mov	r0, r8
 8004fd2:	47d0      	blx	sl
 8004fd4:	3001      	adds	r0, #1
 8004fd6:	d09d      	beq.n	8004f14 <_printf_i+0x15c>
 8004fd8:	3501      	adds	r5, #1
 8004fda:	68e3      	ldr	r3, [r4, #12]
 8004fdc:	9903      	ldr	r1, [sp, #12]
 8004fde:	1a5b      	subs	r3, r3, r1
 8004fe0:	42ab      	cmp	r3, r5
 8004fe2:	dcf2      	bgt.n	8004fca <_printf_i+0x212>
 8004fe4:	e7eb      	b.n	8004fbe <_printf_i+0x206>
 8004fe6:	2500      	movs	r5, #0
 8004fe8:	f104 0619 	add.w	r6, r4, #25
 8004fec:	e7f5      	b.n	8004fda <_printf_i+0x222>
 8004fee:	bf00      	nop
 8004ff0:	080052fd 	.word	0x080052fd
 8004ff4:	0800530e 	.word	0x0800530e

08004ff8 <__sflush_r>:
 8004ff8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005000:	0716      	lsls	r6, r2, #28
 8005002:	4605      	mov	r5, r0
 8005004:	460c      	mov	r4, r1
 8005006:	d454      	bmi.n	80050b2 <__sflush_r+0xba>
 8005008:	684b      	ldr	r3, [r1, #4]
 800500a:	2b00      	cmp	r3, #0
 800500c:	dc02      	bgt.n	8005014 <__sflush_r+0x1c>
 800500e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005010:	2b00      	cmp	r3, #0
 8005012:	dd48      	ble.n	80050a6 <__sflush_r+0xae>
 8005014:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005016:	2e00      	cmp	r6, #0
 8005018:	d045      	beq.n	80050a6 <__sflush_r+0xae>
 800501a:	2300      	movs	r3, #0
 800501c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005020:	682f      	ldr	r7, [r5, #0]
 8005022:	6a21      	ldr	r1, [r4, #32]
 8005024:	602b      	str	r3, [r5, #0]
 8005026:	d030      	beq.n	800508a <__sflush_r+0x92>
 8005028:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800502a:	89a3      	ldrh	r3, [r4, #12]
 800502c:	0759      	lsls	r1, r3, #29
 800502e:	d505      	bpl.n	800503c <__sflush_r+0x44>
 8005030:	6863      	ldr	r3, [r4, #4]
 8005032:	1ad2      	subs	r2, r2, r3
 8005034:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005036:	b10b      	cbz	r3, 800503c <__sflush_r+0x44>
 8005038:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800503a:	1ad2      	subs	r2, r2, r3
 800503c:	2300      	movs	r3, #0
 800503e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005040:	6a21      	ldr	r1, [r4, #32]
 8005042:	4628      	mov	r0, r5
 8005044:	47b0      	blx	r6
 8005046:	1c43      	adds	r3, r0, #1
 8005048:	89a3      	ldrh	r3, [r4, #12]
 800504a:	d106      	bne.n	800505a <__sflush_r+0x62>
 800504c:	6829      	ldr	r1, [r5, #0]
 800504e:	291d      	cmp	r1, #29
 8005050:	d82b      	bhi.n	80050aa <__sflush_r+0xb2>
 8005052:	4a2a      	ldr	r2, [pc, #168]	@ (80050fc <__sflush_r+0x104>)
 8005054:	410a      	asrs	r2, r1
 8005056:	07d6      	lsls	r6, r2, #31
 8005058:	d427      	bmi.n	80050aa <__sflush_r+0xb2>
 800505a:	2200      	movs	r2, #0
 800505c:	6062      	str	r2, [r4, #4]
 800505e:	04d9      	lsls	r1, r3, #19
 8005060:	6922      	ldr	r2, [r4, #16]
 8005062:	6022      	str	r2, [r4, #0]
 8005064:	d504      	bpl.n	8005070 <__sflush_r+0x78>
 8005066:	1c42      	adds	r2, r0, #1
 8005068:	d101      	bne.n	800506e <__sflush_r+0x76>
 800506a:	682b      	ldr	r3, [r5, #0]
 800506c:	b903      	cbnz	r3, 8005070 <__sflush_r+0x78>
 800506e:	6560      	str	r0, [r4, #84]	@ 0x54
 8005070:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005072:	602f      	str	r7, [r5, #0]
 8005074:	b1b9      	cbz	r1, 80050a6 <__sflush_r+0xae>
 8005076:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800507a:	4299      	cmp	r1, r3
 800507c:	d002      	beq.n	8005084 <__sflush_r+0x8c>
 800507e:	4628      	mov	r0, r5
 8005080:	f7ff fbf2 	bl	8004868 <_free_r>
 8005084:	2300      	movs	r3, #0
 8005086:	6363      	str	r3, [r4, #52]	@ 0x34
 8005088:	e00d      	b.n	80050a6 <__sflush_r+0xae>
 800508a:	2301      	movs	r3, #1
 800508c:	4628      	mov	r0, r5
 800508e:	47b0      	blx	r6
 8005090:	4602      	mov	r2, r0
 8005092:	1c50      	adds	r0, r2, #1
 8005094:	d1c9      	bne.n	800502a <__sflush_r+0x32>
 8005096:	682b      	ldr	r3, [r5, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d0c6      	beq.n	800502a <__sflush_r+0x32>
 800509c:	2b1d      	cmp	r3, #29
 800509e:	d001      	beq.n	80050a4 <__sflush_r+0xac>
 80050a0:	2b16      	cmp	r3, #22
 80050a2:	d11e      	bne.n	80050e2 <__sflush_r+0xea>
 80050a4:	602f      	str	r7, [r5, #0]
 80050a6:	2000      	movs	r0, #0
 80050a8:	e022      	b.n	80050f0 <__sflush_r+0xf8>
 80050aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80050ae:	b21b      	sxth	r3, r3
 80050b0:	e01b      	b.n	80050ea <__sflush_r+0xf2>
 80050b2:	690f      	ldr	r7, [r1, #16]
 80050b4:	2f00      	cmp	r7, #0
 80050b6:	d0f6      	beq.n	80050a6 <__sflush_r+0xae>
 80050b8:	0793      	lsls	r3, r2, #30
 80050ba:	680e      	ldr	r6, [r1, #0]
 80050bc:	bf08      	it	eq
 80050be:	694b      	ldreq	r3, [r1, #20]
 80050c0:	600f      	str	r7, [r1, #0]
 80050c2:	bf18      	it	ne
 80050c4:	2300      	movne	r3, #0
 80050c6:	eba6 0807 	sub.w	r8, r6, r7
 80050ca:	608b      	str	r3, [r1, #8]
 80050cc:	f1b8 0f00 	cmp.w	r8, #0
 80050d0:	dde9      	ble.n	80050a6 <__sflush_r+0xae>
 80050d2:	6a21      	ldr	r1, [r4, #32]
 80050d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80050d6:	4643      	mov	r3, r8
 80050d8:	463a      	mov	r2, r7
 80050da:	4628      	mov	r0, r5
 80050dc:	47b0      	blx	r6
 80050de:	2800      	cmp	r0, #0
 80050e0:	dc08      	bgt.n	80050f4 <__sflush_r+0xfc>
 80050e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80050ea:	81a3      	strh	r3, [r4, #12]
 80050ec:	f04f 30ff 	mov.w	r0, #4294967295
 80050f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050f4:	4407      	add	r7, r0
 80050f6:	eba8 0800 	sub.w	r8, r8, r0
 80050fa:	e7e7      	b.n	80050cc <__sflush_r+0xd4>
 80050fc:	dfbffffe 	.word	0xdfbffffe

08005100 <_fflush_r>:
 8005100:	b538      	push	{r3, r4, r5, lr}
 8005102:	690b      	ldr	r3, [r1, #16]
 8005104:	4605      	mov	r5, r0
 8005106:	460c      	mov	r4, r1
 8005108:	b913      	cbnz	r3, 8005110 <_fflush_r+0x10>
 800510a:	2500      	movs	r5, #0
 800510c:	4628      	mov	r0, r5
 800510e:	bd38      	pop	{r3, r4, r5, pc}
 8005110:	b118      	cbz	r0, 800511a <_fflush_r+0x1a>
 8005112:	6a03      	ldr	r3, [r0, #32]
 8005114:	b90b      	cbnz	r3, 800511a <_fflush_r+0x1a>
 8005116:	f7ff f9ad 	bl	8004474 <__sinit>
 800511a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d0f3      	beq.n	800510a <_fflush_r+0xa>
 8005122:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005124:	07d0      	lsls	r0, r2, #31
 8005126:	d404      	bmi.n	8005132 <_fflush_r+0x32>
 8005128:	0599      	lsls	r1, r3, #22
 800512a:	d402      	bmi.n	8005132 <_fflush_r+0x32>
 800512c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800512e:	f7ff fb98 	bl	8004862 <__retarget_lock_acquire_recursive>
 8005132:	4628      	mov	r0, r5
 8005134:	4621      	mov	r1, r4
 8005136:	f7ff ff5f 	bl	8004ff8 <__sflush_r>
 800513a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800513c:	07da      	lsls	r2, r3, #31
 800513e:	4605      	mov	r5, r0
 8005140:	d4e4      	bmi.n	800510c <_fflush_r+0xc>
 8005142:	89a3      	ldrh	r3, [r4, #12]
 8005144:	059b      	lsls	r3, r3, #22
 8005146:	d4e1      	bmi.n	800510c <_fflush_r+0xc>
 8005148:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800514a:	f7ff fb8b 	bl	8004864 <__retarget_lock_release_recursive>
 800514e:	e7dd      	b.n	800510c <_fflush_r+0xc>

08005150 <__swhatbuf_r>:
 8005150:	b570      	push	{r4, r5, r6, lr}
 8005152:	460c      	mov	r4, r1
 8005154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005158:	2900      	cmp	r1, #0
 800515a:	b096      	sub	sp, #88	@ 0x58
 800515c:	4615      	mov	r5, r2
 800515e:	461e      	mov	r6, r3
 8005160:	da0d      	bge.n	800517e <__swhatbuf_r+0x2e>
 8005162:	89a3      	ldrh	r3, [r4, #12]
 8005164:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005168:	f04f 0100 	mov.w	r1, #0
 800516c:	bf14      	ite	ne
 800516e:	2340      	movne	r3, #64	@ 0x40
 8005170:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005174:	2000      	movs	r0, #0
 8005176:	6031      	str	r1, [r6, #0]
 8005178:	602b      	str	r3, [r5, #0]
 800517a:	b016      	add	sp, #88	@ 0x58
 800517c:	bd70      	pop	{r4, r5, r6, pc}
 800517e:	466a      	mov	r2, sp
 8005180:	f000 f848 	bl	8005214 <_fstat_r>
 8005184:	2800      	cmp	r0, #0
 8005186:	dbec      	blt.n	8005162 <__swhatbuf_r+0x12>
 8005188:	9901      	ldr	r1, [sp, #4]
 800518a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800518e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005192:	4259      	negs	r1, r3
 8005194:	4159      	adcs	r1, r3
 8005196:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800519a:	e7eb      	b.n	8005174 <__swhatbuf_r+0x24>

0800519c <__smakebuf_r>:
 800519c:	898b      	ldrh	r3, [r1, #12]
 800519e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80051a0:	079d      	lsls	r5, r3, #30
 80051a2:	4606      	mov	r6, r0
 80051a4:	460c      	mov	r4, r1
 80051a6:	d507      	bpl.n	80051b8 <__smakebuf_r+0x1c>
 80051a8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80051ac:	6023      	str	r3, [r4, #0]
 80051ae:	6123      	str	r3, [r4, #16]
 80051b0:	2301      	movs	r3, #1
 80051b2:	6163      	str	r3, [r4, #20]
 80051b4:	b003      	add	sp, #12
 80051b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051b8:	ab01      	add	r3, sp, #4
 80051ba:	466a      	mov	r2, sp
 80051bc:	f7ff ffc8 	bl	8005150 <__swhatbuf_r>
 80051c0:	9f00      	ldr	r7, [sp, #0]
 80051c2:	4605      	mov	r5, r0
 80051c4:	4639      	mov	r1, r7
 80051c6:	4630      	mov	r0, r6
 80051c8:	f7ff fbba 	bl	8004940 <_malloc_r>
 80051cc:	b948      	cbnz	r0, 80051e2 <__smakebuf_r+0x46>
 80051ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051d2:	059a      	lsls	r2, r3, #22
 80051d4:	d4ee      	bmi.n	80051b4 <__smakebuf_r+0x18>
 80051d6:	f023 0303 	bic.w	r3, r3, #3
 80051da:	f043 0302 	orr.w	r3, r3, #2
 80051de:	81a3      	strh	r3, [r4, #12]
 80051e0:	e7e2      	b.n	80051a8 <__smakebuf_r+0xc>
 80051e2:	89a3      	ldrh	r3, [r4, #12]
 80051e4:	6020      	str	r0, [r4, #0]
 80051e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051ea:	81a3      	strh	r3, [r4, #12]
 80051ec:	9b01      	ldr	r3, [sp, #4]
 80051ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80051f2:	b15b      	cbz	r3, 800520c <__smakebuf_r+0x70>
 80051f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051f8:	4630      	mov	r0, r6
 80051fa:	f000 f81d 	bl	8005238 <_isatty_r>
 80051fe:	b128      	cbz	r0, 800520c <__smakebuf_r+0x70>
 8005200:	89a3      	ldrh	r3, [r4, #12]
 8005202:	f023 0303 	bic.w	r3, r3, #3
 8005206:	f043 0301 	orr.w	r3, r3, #1
 800520a:	81a3      	strh	r3, [r4, #12]
 800520c:	89a3      	ldrh	r3, [r4, #12]
 800520e:	431d      	orrs	r5, r3
 8005210:	81a5      	strh	r5, [r4, #12]
 8005212:	e7cf      	b.n	80051b4 <__smakebuf_r+0x18>

08005214 <_fstat_r>:
 8005214:	b538      	push	{r3, r4, r5, lr}
 8005216:	4d07      	ldr	r5, [pc, #28]	@ (8005234 <_fstat_r+0x20>)
 8005218:	2300      	movs	r3, #0
 800521a:	4604      	mov	r4, r0
 800521c:	4608      	mov	r0, r1
 800521e:	4611      	mov	r1, r2
 8005220:	602b      	str	r3, [r5, #0]
 8005222:	f7fb fc1b 	bl	8000a5c <_fstat>
 8005226:	1c43      	adds	r3, r0, #1
 8005228:	d102      	bne.n	8005230 <_fstat_r+0x1c>
 800522a:	682b      	ldr	r3, [r5, #0]
 800522c:	b103      	cbz	r3, 8005230 <_fstat_r+0x1c>
 800522e:	6023      	str	r3, [r4, #0]
 8005230:	bd38      	pop	{r3, r4, r5, pc}
 8005232:	bf00      	nop
 8005234:	200002b4 	.word	0x200002b4

08005238 <_isatty_r>:
 8005238:	b538      	push	{r3, r4, r5, lr}
 800523a:	4d06      	ldr	r5, [pc, #24]	@ (8005254 <_isatty_r+0x1c>)
 800523c:	2300      	movs	r3, #0
 800523e:	4604      	mov	r4, r0
 8005240:	4608      	mov	r0, r1
 8005242:	602b      	str	r3, [r5, #0]
 8005244:	f7fb fc1a 	bl	8000a7c <_isatty>
 8005248:	1c43      	adds	r3, r0, #1
 800524a:	d102      	bne.n	8005252 <_isatty_r+0x1a>
 800524c:	682b      	ldr	r3, [r5, #0]
 800524e:	b103      	cbz	r3, 8005252 <_isatty_r+0x1a>
 8005250:	6023      	str	r3, [r4, #0]
 8005252:	bd38      	pop	{r3, r4, r5, pc}
 8005254:	200002b4 	.word	0x200002b4

08005258 <_sbrk_r>:
 8005258:	b538      	push	{r3, r4, r5, lr}
 800525a:	4d06      	ldr	r5, [pc, #24]	@ (8005274 <_sbrk_r+0x1c>)
 800525c:	2300      	movs	r3, #0
 800525e:	4604      	mov	r4, r0
 8005260:	4608      	mov	r0, r1
 8005262:	602b      	str	r3, [r5, #0]
 8005264:	f7fb fc22 	bl	8000aac <_sbrk>
 8005268:	1c43      	adds	r3, r0, #1
 800526a:	d102      	bne.n	8005272 <_sbrk_r+0x1a>
 800526c:	682b      	ldr	r3, [r5, #0]
 800526e:	b103      	cbz	r3, 8005272 <_sbrk_r+0x1a>
 8005270:	6023      	str	r3, [r4, #0]
 8005272:	bd38      	pop	{r3, r4, r5, pc}
 8005274:	200002b4 	.word	0x200002b4

08005278 <_init>:
 8005278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800527a:	bf00      	nop
 800527c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800527e:	bc08      	pop	{r3}
 8005280:	469e      	mov	lr, r3
 8005282:	4770      	bx	lr

08005284 <_fini>:
 8005284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005286:	bf00      	nop
 8005288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800528a:	bc08      	pop	{r3}
 800528c:	469e      	mov	lr, r3
 800528e:	4770      	bx	lr
