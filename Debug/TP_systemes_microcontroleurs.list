
TP_systemes_microcontroleurs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077dc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  0800796c  0800796c  0000896c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a2c  08007a2c  00009068  2**0
                  CONTENTS
  4 .ARM          00000008  08007a2c  08007a2c  00008a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a34  08007a34  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a34  08007a34  00008a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007a38  08007a38  00008a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08007a3c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000460  20000068  08007aa4  00009068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c8  08007aa4  000094c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015358  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003312  00000000  00000000  0001e3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001190  00000000  00000000  00021708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d8a  00000000  00000000  00022898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028d87  00000000  00000000  00023622  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018879  00000000  00000000  0004c3a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f151e  00000000  00000000  00064c22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00156140  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004eb4  00000000  00000000  00156184  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000092  00000000  00000000  0015b038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007954 	.word	0x08007954

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08007954 	.word	0x08007954

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000566:	4b10      	ldr	r3, [pc, #64]	@ (80005a8 <MX_DMA_Init+0x48>)
 8000568:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800056a:	4a0f      	ldr	r2, [pc, #60]	@ (80005a8 <MX_DMA_Init+0x48>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	6493      	str	r3, [r2, #72]	@ 0x48
 8000572:	4b0d      	ldr	r3, [pc, #52]	@ (80005a8 <MX_DMA_Init+0x48>)
 8000574:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800057e:	2200      	movs	r2, #0
 8000580:	2100      	movs	r1, #0
 8000582:	2010      	movs	r0, #16
 8000584:	f001 f8a1 	bl	80016ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000588:	2010      	movs	r0, #16
 800058a:	f001 f8ba 	bl	8001702 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800058e:	2200      	movs	r2, #0
 8000590:	2100      	movs	r1, #0
 8000592:	2011      	movs	r0, #17
 8000594:	f001 f899 	bl	80016ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000598:	2011      	movs	r0, #17
 800059a:	f001 f8b2 	bl	8001702 <HAL_NVIC_EnableIRQ>

}
 800059e:	bf00      	nop
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40021000 	.word	0x40021000

080005ac <DriverLED_Init>:

#include "driver_led.h"

DriverLED_HandleTypeDef hDriverLed;

HAL_StatusTypeDef DriverLED_Init(DriverLED_HandleTypeDef *hDriverLed, SPI_HandleTypeDef* hspi, GPIO_TypeDef* CS_Port, uint16_t CS_Pin, GPIO_TypeDef* nRST_Port, uint16_t nRST_Pin){
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
 80005b8:	807b      	strh	r3, [r7, #2]
	hDriverLed->hspi = hspi;
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	68ba      	ldr	r2, [r7, #8]
 80005be:	601a      	str	r2, [r3, #0]
	hDriverLed->CS_Port = CS_Port;
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	687a      	ldr	r2, [r7, #4]
 80005c4:	605a      	str	r2, [r3, #4]
	hDriverLed->CS_Pin = CS_Pin;
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	887a      	ldrh	r2, [r7, #2]
 80005ca:	811a      	strh	r2, [r3, #8]
	hDriverLed->nRST_Port = nRST_Port;
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	6a3a      	ldr	r2, [r7, #32]
 80005d0:	60da      	str	r2, [r3, #12]
	hDriverLed->nRST_Pin = nRST_Pin;
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80005d6:	821a      	strh	r2, [r3, #16]

	HAL_StatusTypeDef return_Status = HAL_OK;
 80005d8:	2300      	movs	r3, #0
 80005da:	75fb      	strb	r3, [r7, #23]

	// Init GPIO Expander
	HAL_GPIO_WritePin(hDriverLed->CS_Port, hDriverLed->CS_Pin, SET);
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	6858      	ldr	r0, [r3, #4]
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	891b      	ldrh	r3, [r3, #8]
 80005e4:	2201      	movs	r2, #1
 80005e6:	4619      	mov	r1, r3
 80005e8:	f001 fc36 	bl	8001e58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(hDriverLed->nRST_Port, hDriverLed->nRST_Pin, SET);
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	68d8      	ldr	r0, [r3, #12]
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	8a1b      	ldrh	r3, [r3, #16]
 80005f4:	2201      	movs	r2, #1
 80005f6:	4619      	mov	r1, r3
 80005f8:	f001 fc2e 	bl	8001e58 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80005fc:	200a      	movs	r0, #10
 80005fe:	f000 ff65 	bl	80014cc <HAL_Delay>

	DriverLED_WriteRegister(hDriverLed, DIR_GPIOA, 0X00); // DIR A as OUTPUT
 8000602:	2200      	movs	r2, #0
 8000604:	2100      	movs	r1, #0
 8000606:	68f8      	ldr	r0, [r7, #12]
 8000608:	f000 f80a 	bl	8000620 <DriverLED_WriteRegister>
	DriverLED_WriteRegister(hDriverLed, DIR_GPIOB, 0X00); // DIR B as OUTPUT
 800060c:	2200      	movs	r2, #0
 800060e:	2101      	movs	r1, #1
 8000610:	68f8      	ldr	r0, [r7, #12]
 8000612:	f000 f805 	bl	8000620 <DriverLED_WriteRegister>

	return return_Status;
 8000616:	7dfb      	ldrb	r3, [r7, #23]
}
 8000618:	4618      	mov	r0, r3
 800061a:	3718      	adds	r7, #24
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <DriverLED_WriteRegister>:

void DriverLED_WriteRegister(DriverLED_HandleTypeDef *hDriverLed, uint8_t reg, uint8_t data) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	460b      	mov	r3, r1
 800062a:	70fb      	strb	r3, [r7, #3]
 800062c:	4613      	mov	r3, r2
 800062e:	70bb      	strb	r3, [r7, #2]
	uint8_t buffer[3];
	buffer[0] = 0x40;  			// Adresse avec bit de commande en écriture
 8000630:	2340      	movs	r3, #64	@ 0x40
 8000632:	733b      	strb	r3, [r7, #12]
	buffer[1] = reg;            // Registre cible
 8000634:	78fb      	ldrb	r3, [r7, #3]
 8000636:	737b      	strb	r3, [r7, #13]
	buffer[2] = data;           // Donnée à écrire
 8000638:	78bb      	ldrb	r3, [r7, #2]
 800063a:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(hDriverLed->CS_Port, hDriverLed->CS_Pin, RESET);
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	6858      	ldr	r0, [r3, #4]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	891b      	ldrh	r3, [r3, #8]
 8000644:	2200      	movs	r2, #0
 8000646:	4619      	mov	r1, r3
 8000648:	f001 fc06 	bl	8001e58 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hDriverLed->hspi, buffer, 3, HAL_MAX_DELAY);
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	6818      	ldr	r0, [r3, #0]
 8000650:	f107 010c 	add.w	r1, r7, #12
 8000654:	f04f 33ff 	mov.w	r3, #4294967295
 8000658:	2203      	movs	r2, #3
 800065a:	f005 f967 	bl	800592c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(hDriverLed->CS_Port, hDriverLed->CS_Pin, SET);
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	6858      	ldr	r0, [r3, #4]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	891b      	ldrh	r3, [r3, #8]
 8000666:	2201      	movs	r2, #1
 8000668:	4619      	mov	r1, r3
 800066a:	f001 fbf5 	bl	8001e58 <HAL_GPIO_WritePin>
}
 800066e:	bf00      	nop
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
	...

08000678 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08a      	sub	sp, #40	@ 0x28
 800067c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068e:	4b35      	ldr	r3, [pc, #212]	@ (8000764 <MX_GPIO_Init+0xec>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000692:	4a34      	ldr	r2, [pc, #208]	@ (8000764 <MX_GPIO_Init+0xec>)
 8000694:	f043 0304 	orr.w	r3, r3, #4
 8000698:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800069a:	4b32      	ldr	r3, [pc, #200]	@ (8000764 <MX_GPIO_Init+0xec>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800069e:	f003 0304 	and.w	r3, r3, #4
 80006a2:	613b      	str	r3, [r7, #16]
 80006a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006a6:	4b2f      	ldr	r3, [pc, #188]	@ (8000764 <MX_GPIO_Init+0xec>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006aa:	4a2e      	ldr	r2, [pc, #184]	@ (8000764 <MX_GPIO_Init+0xec>)
 80006ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006b2:	4b2c      	ldr	r3, [pc, #176]	@ (8000764 <MX_GPIO_Init+0xec>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006be:	4b29      	ldr	r3, [pc, #164]	@ (8000764 <MX_GPIO_Init+0xec>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006c2:	4a28      	ldr	r2, [pc, #160]	@ (8000764 <MX_GPIO_Init+0xec>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006ca:	4b26      	ldr	r3, [pc, #152]	@ (8000764 <MX_GPIO_Init+0xec>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d6:	4b23      	ldr	r3, [pc, #140]	@ (8000764 <MX_GPIO_Init+0xec>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006da:	4a22      	ldr	r2, [pc, #136]	@ (8000764 <MX_GPIO_Init+0xec>)
 80006dc:	f043 0302 	orr.w	r3, r3, #2
 80006e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006e2:	4b20      	ldr	r3, [pc, #128]	@ (8000764 <MX_GPIO_Init+0xec>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e6:	f003 0302 	and.w	r3, r3, #2
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VU_nRST_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2121      	movs	r1, #33	@ 0x21
 80006f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006f6:	f001 fbaf 	bl	8001e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_RESET);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2180      	movs	r1, #128	@ 0x80
 80006fe:	481a      	ldr	r0, [pc, #104]	@ (8000768 <MX_GPIO_Init+0xf0>)
 8000700:	f001 fbaa 	bl	8001e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000704:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800070a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800070e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000714:	f107 0314 	add.w	r3, r7, #20
 8000718:	4619      	mov	r1, r3
 800071a:	4814      	ldr	r0, [pc, #80]	@ (800076c <MX_GPIO_Init+0xf4>)
 800071c:	f001 f9f2 	bl	8001b04 <HAL_GPIO_Init>

  /*Configure GPIO pins : VU_nRST_Pin LD2_Pin */
  GPIO_InitStruct.Pin = VU_nRST_Pin|LD2_Pin;
 8000720:	2321      	movs	r3, #33	@ 0x21
 8000722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000724:	2301      	movs	r3, #1
 8000726:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072c:	2300      	movs	r3, #0
 800072e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000730:	f107 0314 	add.w	r3, r7, #20
 8000734:	4619      	mov	r1, r3
 8000736:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800073a:	f001 f9e3 	bl	8001b04 <HAL_GPIO_Init>

  /*Configure GPIO pin : VU_nCS_Pin */
  GPIO_InitStruct.Pin = VU_nCS_Pin;
 800073e:	2380      	movs	r3, #128	@ 0x80
 8000740:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000742:	2301      	movs	r3, #1
 8000744:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074a:	2300      	movs	r3, #0
 800074c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VU_nCS_GPIO_Port, &GPIO_InitStruct);
 800074e:	f107 0314 	add.w	r3, r7, #20
 8000752:	4619      	mov	r1, r3
 8000754:	4804      	ldr	r0, [pc, #16]	@ (8000768 <MX_GPIO_Init+0xf0>)
 8000756:	f001 f9d5 	bl	8001b04 <HAL_GPIO_Init>

}
 800075a:	bf00      	nop
 800075c:	3728      	adds	r7, #40	@ 0x28
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40021000 	.word	0x40021000
 8000768:	48000400 	.word	0x48000400
 800076c:	48000800 	.word	0x48000800

08000770 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000774:	4b1b      	ldr	r3, [pc, #108]	@ (80007e4 <MX_I2C2_Init+0x74>)
 8000776:	4a1c      	ldr	r2, [pc, #112]	@ (80007e8 <MX_I2C2_Init+0x78>)
 8000778:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 800077a:	4b1a      	ldr	r3, [pc, #104]	@ (80007e4 <MX_I2C2_Init+0x74>)
 800077c:	4a1b      	ldr	r2, [pc, #108]	@ (80007ec <MX_I2C2_Init+0x7c>)
 800077e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000780:	4b18      	ldr	r3, [pc, #96]	@ (80007e4 <MX_I2C2_Init+0x74>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000786:	4b17      	ldr	r3, [pc, #92]	@ (80007e4 <MX_I2C2_Init+0x74>)
 8000788:	2201      	movs	r2, #1
 800078a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800078c:	4b15      	ldr	r3, [pc, #84]	@ (80007e4 <MX_I2C2_Init+0x74>)
 800078e:	2200      	movs	r2, #0
 8000790:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000792:	4b14      	ldr	r3, [pc, #80]	@ (80007e4 <MX_I2C2_Init+0x74>)
 8000794:	2200      	movs	r2, #0
 8000796:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000798:	4b12      	ldr	r3, [pc, #72]	@ (80007e4 <MX_I2C2_Init+0x74>)
 800079a:	2200      	movs	r2, #0
 800079c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800079e:	4b11      	ldr	r3, [pc, #68]	@ (80007e4 <MX_I2C2_Init+0x74>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	@ (80007e4 <MX_I2C2_Init+0x74>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007aa:	480e      	ldr	r0, [pc, #56]	@ (80007e4 <MX_I2C2_Init+0x74>)
 80007ac:	f001 fb6c 	bl	8001e88 <HAL_I2C_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80007b6:	f000 f982 	bl	8000abe <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007ba:	2100      	movs	r1, #0
 80007bc:	4809      	ldr	r0, [pc, #36]	@ (80007e4 <MX_I2C2_Init+0x74>)
 80007be:	f002 f89f 	bl	8002900 <HAL_I2CEx_ConfigAnalogFilter>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80007c8:	f000 f979 	bl	8000abe <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80007cc:	2100      	movs	r1, #0
 80007ce:	4805      	ldr	r0, [pc, #20]	@ (80007e4 <MX_I2C2_Init+0x74>)
 80007d0:	f002 f8e1 	bl	8002996 <HAL_I2CEx_ConfigDigitalFilter>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80007da:	f000 f970 	bl	8000abe <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000098 	.word	0x20000098
 80007e8:	40005800 	.word	0x40005800
 80007ec:	10d19ce4 	.word	0x10d19ce4

080007f0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b0ac      	sub	sp, #176	@ 0xb0
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
 8000806:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	2288      	movs	r2, #136	@ 0x88
 800080e:	2100      	movs	r1, #0
 8000810:	4618      	mov	r0, r3
 8000812:	f006 fb1b 	bl	8006e4c <memset>
  if(i2cHandle->Instance==I2C2)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a21      	ldr	r2, [pc, #132]	@ (80008a0 <HAL_I2C_MspInit+0xb0>)
 800081c:	4293      	cmp	r3, r2
 800081e:	d13b      	bne.n	8000898 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000820:	2380      	movs	r3, #128	@ 0x80
 8000822:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000824:	2300      	movs	r3, #0
 8000826:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	4618      	mov	r0, r3
 800082e:	f002 ff63 	bl	80036f8 <HAL_RCCEx_PeriphCLKConfig>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000838:	f000 f941 	bl	8000abe <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800083c:	4b19      	ldr	r3, [pc, #100]	@ (80008a4 <HAL_I2C_MspInit+0xb4>)
 800083e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000840:	4a18      	ldr	r2, [pc, #96]	@ (80008a4 <HAL_I2C_MspInit+0xb4>)
 8000842:	f043 0302 	orr.w	r3, r3, #2
 8000846:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000848:	4b16      	ldr	r3, [pc, #88]	@ (80008a4 <HAL_I2C_MspInit+0xb4>)
 800084a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084c:	f003 0302 	and.w	r3, r3, #2
 8000850:	613b      	str	r3, [r7, #16]
 8000852:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000854:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000858:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800085c:	2312      	movs	r3, #18
 800085e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000868:	2303      	movs	r3, #3
 800086a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800086e:	2304      	movs	r3, #4
 8000870:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000874:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000878:	4619      	mov	r1, r3
 800087a:	480b      	ldr	r0, [pc, #44]	@ (80008a8 <HAL_I2C_MspInit+0xb8>)
 800087c:	f001 f942 	bl	8001b04 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000880:	4b08      	ldr	r3, [pc, #32]	@ (80008a4 <HAL_I2C_MspInit+0xb4>)
 8000882:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000884:	4a07      	ldr	r2, [pc, #28]	@ (80008a4 <HAL_I2C_MspInit+0xb4>)
 8000886:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800088a:	6593      	str	r3, [r2, #88]	@ 0x58
 800088c:	4b05      	ldr	r3, [pc, #20]	@ (80008a4 <HAL_I2C_MspInit+0xb4>)
 800088e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000890:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000898:	bf00      	nop
 800089a:	37b0      	adds	r7, #176	@ 0xb0
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40005800 	.word	0x40005800
 80008a4:	40021000 	.word	0x40021000
 80008a8:	48000400 	.word	0x48000400

080008ac <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&chr, 1, HAL_MAX_DELAY);
 80008b4:	1d39      	adds	r1, r7, #4
 80008b6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ba:	2201      	movs	r2, #1
 80008bc:	4803      	ldr	r0, [pc, #12]	@ (80008cc <__io_putchar+0x20>)
 80008be:	f005 fb5d 	bl	8005f7c <HAL_UART_Transmit>

	return chr;
 80008c2:	687b      	ldr	r3, [r7, #4]
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	200002f0 	.word	0x200002f0

080008d0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80008d6:	f000 fd7d 	bl	80013d4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80008da:	f000 f875 	bl	80009c8 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 80008de:	f000 f8c4 	bl	8000a6a <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80008e2:	f7ff fec9 	bl	8000678 <MX_GPIO_Init>
	MX_DMA_Init();
 80008e6:	f7ff fe3b 	bl	8000560 <MX_DMA_Init>
	MX_USART2_UART_Init();
 80008ea:	f000 fcbd 	bl	8001268 <MX_USART2_UART_Init>
	MX_SPI3_Init();
 80008ee:	f000 faef 	bl	8000ed0 <MX_SPI3_Init>
	MX_SAI2_Init();
 80008f2:	f000 f8eb 	bl	8000acc <MX_SAI2_Init>
	MX_I2C2_Init();
 80008f6:	f7ff ff3b 	bl	8000770 <MX_I2C2_Init>
	/* USER CODE BEGIN 2 */
	__HAL_SAI_ENABLE(&hsai_BlockA2); // Activation horloge MCLK
 80008fa:	4b2a      	ldr	r3, [pc, #168]	@ (80009a4 <main+0xd4>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	4b28      	ldr	r3, [pc, #160]	@ (80009a4 <main+0xd4>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000908:	601a      	str	r2, [r3, #0]
	uint8_t chip_id_value = 1;
 800090a:	2301      	movs	r3, #1
 800090c:	70fb      	strb	r3, [r7, #3]

	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c2, CODEC_ADDR, CHIP_ID, I2C_MEMADD_SIZE_16BIT, &chip_id_value, sizeof(chip_id_value), HAL_MAX_DELAY);
 800090e:	f04f 33ff 	mov.w	r3, #4294967295
 8000912:	9302      	str	r3, [sp, #8]
 8000914:	2301      	movs	r3, #1
 8000916:	9301      	str	r3, [sp, #4]
 8000918:	1cfb      	adds	r3, r7, #3
 800091a:	9300      	str	r3, [sp, #0]
 800091c:	2302      	movs	r3, #2
 800091e:	2200      	movs	r2, #0
 8000920:	2114      	movs	r1, #20
 8000922:	4821      	ldr	r0, [pc, #132]	@ (80009a8 <main+0xd8>)
 8000924:	f001 fc64 	bl	80021f0 <HAL_I2C_Mem_Read>
 8000928:	4603      	mov	r3, r0
 800092a:	71fb      	strb	r3, [r7, #7]
	if (status == HAL_OK)
 800092c:	79fb      	ldrb	r3, [r7, #7]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d105      	bne.n	800093e <main+0x6e>
		printf("OK : %d\r\n", chip_id_value); // Affiche 160
 8000932:	78fb      	ldrb	r3, [r7, #3]
 8000934:	4619      	mov	r1, r3
 8000936:	481d      	ldr	r0, [pc, #116]	@ (80009ac <main+0xdc>)
 8000938:	f006 f940 	bl	8006bbc <iprintf>
 800093c:	e004      	b.n	8000948 <main+0x78>
	else
		printf("PAS OK : %d\r\n", chip_id_value);
 800093e:	78fb      	ldrb	r3, [r7, #3]
 8000940:	4619      	mov	r1, r3
 8000942:	481b      	ldr	r0, [pc, #108]	@ (80009b0 <main+0xe0>)
 8000944:	f006 f93a 	bl	8006bbc <iprintf>

	SGTL5000_Init(&hi2c2);
 8000948:	4817      	ldr	r0, [pc, #92]	@ (80009a8 <main+0xd8>)
 800094a:	f000 fa26 	bl	8000d9a <SGTL5000_Init>
	//uint8_t sai;
	//HAL_SAI_Receive_DMA(&hsai_BlockA2, &sai, 1);
	//HAL_SAI_Transmit_DMA(&hsai_BlockA2, &sai, 1);


	if(HAL_OK != DriverLED_Init(&hDriverLed, &hspi3, VU_nCS_GPIO_Port, VU_nCS_Pin, VU_nRST_GPIO_Port, VU_nRST_Pin)){
 800094e:	2301      	movs	r3, #1
 8000950:	9301      	str	r3, [sp, #4]
 8000952:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000956:	9300      	str	r3, [sp, #0]
 8000958:	2380      	movs	r3, #128	@ 0x80
 800095a:	4a16      	ldr	r2, [pc, #88]	@ (80009b4 <main+0xe4>)
 800095c:	4916      	ldr	r1, [pc, #88]	@ (80009b8 <main+0xe8>)
 800095e:	4817      	ldr	r0, [pc, #92]	@ (80009bc <main+0xec>)
 8000960:	f7ff fe24 	bl	80005ac <DriverLED_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <main+0x9e>
		while(1);
 800096a:	bf00      	nop
 800096c:	e7fd      	b.n	800096a <main+0x9a>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		uint8_t reg_address = 0x14;  // Adresse du registre à écrire
 800096e:	2314      	movs	r3, #20
 8000970:	71bb      	strb	r3, [r7, #6]
		uint16_t data_to_write = 0x1234;  // Données à écrire
 8000972:	f241 2334 	movw	r3, #4660	@ 0x1234
 8000976:	80bb      	strh	r3, [r7, #4]

		if (SGTL5000_WriteReg(&hi2c2, reg_address, data_to_write) == HAL_OK) {
 8000978:	88ba      	ldrh	r2, [r7, #4]
 800097a:	79bb      	ldrb	r3, [r7, #6]
 800097c:	4619      	mov	r1, r3
 800097e:	480a      	ldr	r0, [pc, #40]	@ (80009a8 <main+0xd8>)
 8000980:	f000 f9e8 	bl	8000d54 <SGTL5000_WriteReg>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d103      	bne.n	8000992 <main+0xc2>
			printf("Ecriture reussie\r\n");
 800098a:	480d      	ldr	r0, [pc, #52]	@ (80009c0 <main+0xf0>)
 800098c:	f006 f97e 	bl	8006c8c <puts>
 8000990:	e002      	b.n	8000998 <main+0xc8>
		} else {
			printf("Erreur ecriture\r\n");
 8000992:	480c      	ldr	r0, [pc, #48]	@ (80009c4 <main+0xf4>)
 8000994:	f006 f97a 	bl	8006c8c <puts>
		}
		HAL_Delay(2000);
 8000998:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800099c:	f000 fd96 	bl	80014cc <HAL_Delay>
	{
 80009a0:	e7e5      	b.n	800096e <main+0x9e>
 80009a2:	bf00      	nop
 80009a4:	200000ec 	.word	0x200000ec
 80009a8:	20000098 	.word	0x20000098
 80009ac:	0800796c 	.word	0x0800796c
 80009b0:	08007978 	.word	0x08007978
 80009b4:	48000400 	.word	0x48000400
 80009b8:	20000288 	.word	0x20000288
 80009bc:	20000084 	.word	0x20000084
 80009c0:	08007988 	.word	0x08007988
 80009c4:	0800799c 	.word	0x0800799c

080009c8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b096      	sub	sp, #88	@ 0x58
 80009cc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ce:	f107 0314 	add.w	r3, r7, #20
 80009d2:	2244      	movs	r2, #68	@ 0x44
 80009d4:	2100      	movs	r1, #0
 80009d6:	4618      	mov	r0, r3
 80009d8:	f006 fa38 	bl	8006e4c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009dc:	463b      	mov	r3, r7
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]
 80009e6:	60da      	str	r2, [r3, #12]
 80009e8:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009ea:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80009ee:	f002 f82d 	bl	8002a4c <HAL_PWREx_ControlVoltageScaling>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <SystemClock_Config+0x34>
	{
		Error_Handler();
 80009f8:	f000 f861 	bl	8000abe <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009fc:	2302      	movs	r3, #2
 80009fe:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a04:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a06:	2310      	movs	r3, #16
 8000a08:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000a12:	2301      	movs	r3, #1
 8000a14:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 8000a16:	230a      	movs	r3, #10
 8000a18:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a1a:	2307      	movs	r3, #7
 8000a1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a22:	2302      	movs	r3, #2
 8000a24:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a26:	f107 0314 	add.w	r3, r7, #20
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f002 f864 	bl	8002af8 <HAL_RCC_OscConfig>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <SystemClock_Config+0x72>
	{
		Error_Handler();
 8000a36:	f000 f842 	bl	8000abe <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a3a:	230f      	movs	r3, #15
 8000a3c:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a42:	2300      	movs	r3, #0
 8000a44:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a4e:	463b      	mov	r3, r7
 8000a50:	2104      	movs	r1, #4
 8000a52:	4618      	mov	r0, r3
 8000a54:	f002 fc2c 	bl	80032b0 <HAL_RCC_ClockConfig>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8000a5e:	f000 f82e 	bl	8000abe <Error_Handler>
	}
}
 8000a62:	bf00      	nop
 8000a64:	3758      	adds	r7, #88	@ 0x58
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	b0a2      	sub	sp, #136	@ 0x88
 8000a6e:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a70:	463b      	mov	r3, r7
 8000a72:	2288      	movs	r2, #136	@ 0x88
 8000a74:	2100      	movs	r1, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f006 f9e8 	bl	8006e4c <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8000a7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a80:	603b      	str	r3, [r7, #0]
	PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 8000a82:	2300      	movs	r3, #0
 8000a84:	66bb      	str	r3, [r7, #104]	@ 0x68
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000a86:	2302      	movs	r3, #2
 8000a88:	607b      	str	r3, [r7, #4]
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.PLLSAI1.PLLSAI1N = 13;
 8000a8e:	230d      	movs	r3, #13
 8000a90:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV17;
 8000a92:	2311      	movs	r3, #17
 8000a94:	613b      	str	r3, [r7, #16]
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000a96:	2302      	movs	r3, #2
 8000a98:	617b      	str	r3, [r7, #20]
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 8000a9e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000aa2:	61fb      	str	r3, [r7, #28]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aa4:	463b      	mov	r3, r7
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f002 fe26 	bl	80036f8 <HAL_RCCEx_PeriphCLKConfig>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <PeriphCommonClock_Config+0x4c>
	{
		Error_Handler();
 8000ab2:	f000 f804 	bl	8000abe <Error_Handler>
	}
}
 8000ab6:	bf00      	nop
 8000ab8:	3788      	adds	r7, #136	@ 0x88
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac2:	b672      	cpsid	i
}
 8000ac4:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000ac6:	bf00      	nop
 8000ac8:	e7fd      	b.n	8000ac6 <Error_Handler+0x8>
	...

08000acc <MX_SAI2_Init>:
DMA_HandleTypeDef hdma_sai2_a;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 8000ad0:	4b2a      	ldr	r3, [pc, #168]	@ (8000b7c <MX_SAI2_Init+0xb0>)
 8000ad2:	4a2b      	ldr	r2, [pc, #172]	@ (8000b80 <MX_SAI2_Init+0xb4>)
 8000ad4:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000ad6:	4b29      	ldr	r3, [pc, #164]	@ (8000b7c <MX_SAI2_Init+0xb0>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000adc:	4b27      	ldr	r3, [pc, #156]	@ (8000b7c <MX_SAI2_Init+0xb0>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000ae2:	4b26      	ldr	r3, [pc, #152]	@ (8000b7c <MX_SAI2_Init+0xb0>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000ae8:	4b24      	ldr	r3, [pc, #144]	@ (8000b7c <MX_SAI2_Init+0xb0>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000aee:	4b23      	ldr	r3, [pc, #140]	@ (8000b7c <MX_SAI2_Init+0xb0>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000af4:	4b21      	ldr	r3, [pc, #132]	@ (8000b7c <MX_SAI2_Init+0xb0>)
 8000af6:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000afa:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000afc:	4b1f      	ldr	r3, [pc, #124]	@ (8000b7c <MX_SAI2_Init+0xb0>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000b02:	4b1e      	ldr	r3, [pc, #120]	@ (8000b7c <MX_SAI2_Init+0xb0>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000b08:	4b1c      	ldr	r3, [pc, #112]	@ (8000b7c <MX_SAI2_Init+0xb0>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000b0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000b7c <MX_SAI2_Init+0xb0>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000b14:	2302      	movs	r3, #2
 8000b16:	2200      	movs	r2, #0
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4818      	ldr	r0, [pc, #96]	@ (8000b7c <MX_SAI2_Init+0xb0>)
 8000b1c:	f004 f906 	bl	8004d2c <HAL_SAI_InitProtocol>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_SAI2_Init+0x5e>
  {
    Error_Handler();
 8000b26:	f7ff ffca 	bl	8000abe <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000b2a:	4b16      	ldr	r3, [pc, #88]	@ (8000b84 <MX_SAI2_Init+0xb8>)
 8000b2c:	4a16      	ldr	r2, [pc, #88]	@ (8000b88 <MX_SAI2_Init+0xbc>)
 8000b2e:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000b30:	4b14      	ldr	r3, [pc, #80]	@ (8000b84 <MX_SAI2_Init+0xb8>)
 8000b32:	2203      	movs	r2, #3
 8000b34:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000b36:	4b13      	ldr	r3, [pc, #76]	@ (8000b84 <MX_SAI2_Init+0xb8>)
 8000b38:	2201      	movs	r2, #1
 8000b3a:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000b3c:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <MX_SAI2_Init+0xb8>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000b42:	4b10      	ldr	r3, [pc, #64]	@ (8000b84 <MX_SAI2_Init+0xb8>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000b48:	4b0e      	ldr	r3, [pc, #56]	@ (8000b84 <MX_SAI2_Init+0xb8>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b84 <MX_SAI2_Init+0xb8>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000b54:	4b0b      	ldr	r3, [pc, #44]	@ (8000b84 <MX_SAI2_Init+0xb8>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000b5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b84 <MX_SAI2_Init+0xb8>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000b60:	2302      	movs	r3, #2
 8000b62:	2200      	movs	r2, #0
 8000b64:	2100      	movs	r1, #0
 8000b66:	4807      	ldr	r0, [pc, #28]	@ (8000b84 <MX_SAI2_Init+0xb8>)
 8000b68:	f004 f8e0 	bl	8004d2c <HAL_SAI_InitProtocol>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_SAI2_Init+0xaa>
  {
    Error_Handler();
 8000b72:	f7ff ffa4 	bl	8000abe <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	200000ec 	.word	0x200000ec
 8000b80:	40015804 	.word	0x40015804
 8000b84:	20000170 	.word	0x20000170
 8000b88:	40015824 	.word	0x40015824

08000b8c <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08a      	sub	sp, #40	@ 0x28
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a64      	ldr	r2, [pc, #400]	@ (8000d2c <HAL_SAI_MspInit+0x1a0>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d15e      	bne.n	8000c5c <HAL_SAI_MspInit+0xd0>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 8000b9e:	4b64      	ldr	r3, [pc, #400]	@ (8000d30 <HAL_SAI_MspInit+0x1a4>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d113      	bne.n	8000bce <HAL_SAI_MspInit+0x42>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000ba6:	4b63      	ldr	r3, [pc, #396]	@ (8000d34 <HAL_SAI_MspInit+0x1a8>)
 8000ba8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000baa:	4a62      	ldr	r2, [pc, #392]	@ (8000d34 <HAL_SAI_MspInit+0x1a8>)
 8000bac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000bb0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000bb2:	4b60      	ldr	r3, [pc, #384]	@ (8000d34 <HAL_SAI_MspInit+0x1a8>)
 8000bb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000bba:	613b      	str	r3, [r7, #16]
 8000bbc:	693b      	ldr	r3, [r7, #16]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI2_IRQn, 0, 0);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	204b      	movs	r0, #75	@ 0x4b
 8000bc4:	f000 fd81 	bl	80016ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8000bc8:	204b      	movs	r0, #75	@ 0x4b
 8000bca:	f000 fd9a 	bl	8001702 <HAL_NVIC_EnableIRQ>
    }
    SAI2_client ++;
 8000bce:	4b58      	ldr	r3, [pc, #352]	@ (8000d30 <HAL_SAI_MspInit+0x1a4>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	4a56      	ldr	r2, [pc, #344]	@ (8000d30 <HAL_SAI_MspInit+0x1a4>)
 8000bd6:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB14     ------> SAI2_MCLK_A
    PB15     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000bd8:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2300      	movs	r3, #0
 8000be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000bea:	230d      	movs	r3, #13
 8000bec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4850      	ldr	r0, [pc, #320]	@ (8000d38 <HAL_SAI_MspInit+0x1ac>)
 8000bf6:	f000 ff85 	bl	8001b04 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA1_Channel6;
 8000bfa:	4b50      	ldr	r3, [pc, #320]	@ (8000d3c <HAL_SAI_MspInit+0x1b0>)
 8000bfc:	4a50      	ldr	r2, [pc, #320]	@ (8000d40 <HAL_SAI_MspInit+0x1b4>)
 8000bfe:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Request = DMA_REQUEST_1;
 8000c00:	4b4e      	ldr	r3, [pc, #312]	@ (8000d3c <HAL_SAI_MspInit+0x1b0>)
 8000c02:	2201      	movs	r2, #1
 8000c04:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c06:	4b4d      	ldr	r3, [pc, #308]	@ (8000d3c <HAL_SAI_MspInit+0x1b0>)
 8000c08:	2210      	movs	r2, #16
 8000c0a:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c0c:	4b4b      	ldr	r3, [pc, #300]	@ (8000d3c <HAL_SAI_MspInit+0x1b0>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8000c12:	4b4a      	ldr	r3, [pc, #296]	@ (8000d3c <HAL_SAI_MspInit+0x1b0>)
 8000c14:	2280      	movs	r2, #128	@ 0x80
 8000c16:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c18:	4b48      	ldr	r3, [pc, #288]	@ (8000d3c <HAL_SAI_MspInit+0x1b0>)
 8000c1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c1e:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c20:	4b46      	ldr	r3, [pc, #280]	@ (8000d3c <HAL_SAI_MspInit+0x1b0>)
 8000c22:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c26:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8000c28:	4b44      	ldr	r3, [pc, #272]	@ (8000d3c <HAL_SAI_MspInit+0x1b0>)
 8000c2a:	2220      	movs	r2, #32
 8000c2c:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
 8000c2e:	4b43      	ldr	r3, [pc, #268]	@ (8000d3c <HAL_SAI_MspInit+0x1b0>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8000c34:	4841      	ldr	r0, [pc, #260]	@ (8000d3c <HAL_SAI_MspInit+0x1b0>)
 8000c36:	f000 fd7f 	bl	8001738 <HAL_DMA_Init>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <HAL_SAI_MspInit+0xb8>
    {
      Error_Handler();
 8000c40:	f7ff ff3d 	bl	8000abe <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_a);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4a3d      	ldr	r2, [pc, #244]	@ (8000d3c <HAL_SAI_MspInit+0x1b0>)
 8000c48:	671a      	str	r2, [r3, #112]	@ 0x70
 8000c4a:	4a3c      	ldr	r2, [pc, #240]	@ (8000d3c <HAL_SAI_MspInit+0x1b0>)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_a);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4a3a      	ldr	r2, [pc, #232]	@ (8000d3c <HAL_SAI_MspInit+0x1b0>)
 8000c54:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000c56:	4a39      	ldr	r2, [pc, #228]	@ (8000d3c <HAL_SAI_MspInit+0x1b0>)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if(saiHandle->Instance==SAI2_Block_B)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a38      	ldr	r2, [pc, #224]	@ (8000d44 <HAL_SAI_MspInit+0x1b8>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d15e      	bne.n	8000d24 <HAL_SAI_MspInit+0x198>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 8000c66:	4b32      	ldr	r3, [pc, #200]	@ (8000d30 <HAL_SAI_MspInit+0x1a4>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d113      	bne.n	8000c96 <HAL_SAI_MspInit+0x10a>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000c6e:	4b31      	ldr	r3, [pc, #196]	@ (8000d34 <HAL_SAI_MspInit+0x1a8>)
 8000c70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c72:	4a30      	ldr	r2, [pc, #192]	@ (8000d34 <HAL_SAI_MspInit+0x1a8>)
 8000c74:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c78:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c7a:	4b2e      	ldr	r3, [pc, #184]	@ (8000d34 <HAL_SAI_MspInit+0x1a8>)
 8000c7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]

      /* Peripheral interrupt init*/
      HAL_NVIC_SetPriority(SAI2_IRQn, 0, 0);
 8000c86:	2200      	movs	r2, #0
 8000c88:	2100      	movs	r1, #0
 8000c8a:	204b      	movs	r0, #75	@ 0x4b
 8000c8c:	f000 fd1d 	bl	80016ca <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8000c90:	204b      	movs	r0, #75	@ 0x4b
 8000c92:	f000 fd36 	bl	8001702 <HAL_NVIC_EnableIRQ>
      }
    SAI2_client ++;
 8000c96:	4b26      	ldr	r3, [pc, #152]	@ (8000d30 <HAL_SAI_MspInit+0x1a4>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	4a24      	ldr	r2, [pc, #144]	@ (8000d30 <HAL_SAI_MspInit+0x1a4>)
 8000c9e:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000ca0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000cb2:	230d      	movs	r3, #13
 8000cb4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb6:	f107 0314 	add.w	r3, r7, #20
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4822      	ldr	r0, [pc, #136]	@ (8000d48 <HAL_SAI_MspInit+0x1bc>)
 8000cbe:	f000 ff21 	bl	8001b04 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA1_Channel7;
 8000cc2:	4b22      	ldr	r3, [pc, #136]	@ (8000d4c <HAL_SAI_MspInit+0x1c0>)
 8000cc4:	4a22      	ldr	r2, [pc, #136]	@ (8000d50 <HAL_SAI_MspInit+0x1c4>)
 8000cc6:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Request = DMA_REQUEST_1;
 8000cc8:	4b20      	ldr	r3, [pc, #128]	@ (8000d4c <HAL_SAI_MspInit+0x1c0>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cce:	4b1f      	ldr	r3, [pc, #124]	@ (8000d4c <HAL_SAI_MspInit+0x1c0>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cd4:	4b1d      	ldr	r3, [pc, #116]	@ (8000d4c <HAL_SAI_MspInit+0x1c0>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8000cda:	4b1c      	ldr	r3, [pc, #112]	@ (8000d4c <HAL_SAI_MspInit+0x1c0>)
 8000cdc:	2280      	movs	r2, #128	@ 0x80
 8000cde:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d4c <HAL_SAI_MspInit+0x1c0>)
 8000ce2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ce6:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ce8:	4b18      	ldr	r3, [pc, #96]	@ (8000d4c <HAL_SAI_MspInit+0x1c0>)
 8000cea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000cee:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8000cf0:	4b16      	ldr	r3, [pc, #88]	@ (8000d4c <HAL_SAI_MspInit+0x1c0>)
 8000cf2:	2220      	movs	r2, #32
 8000cf4:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_LOW;
 8000cf6:	4b15      	ldr	r3, [pc, #84]	@ (8000d4c <HAL_SAI_MspInit+0x1c0>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8000cfc:	4813      	ldr	r0, [pc, #76]	@ (8000d4c <HAL_SAI_MspInit+0x1c0>)
 8000cfe:	f000 fd1b 	bl	8001738 <HAL_DMA_Init>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <HAL_SAI_MspInit+0x180>
    {
      Error_Handler();
 8000d08:	f7ff fed9 	bl	8000abe <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_b);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4a0f      	ldr	r2, [pc, #60]	@ (8000d4c <HAL_SAI_MspInit+0x1c0>)
 8000d10:	671a      	str	r2, [r3, #112]	@ 0x70
 8000d12:	4a0e      	ldr	r2, [pc, #56]	@ (8000d4c <HAL_SAI_MspInit+0x1c0>)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_b);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4a0c      	ldr	r2, [pc, #48]	@ (8000d4c <HAL_SAI_MspInit+0x1c0>)
 8000d1c:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000d1e:	4a0b      	ldr	r2, [pc, #44]	@ (8000d4c <HAL_SAI_MspInit+0x1c0>)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6293      	str	r3, [r2, #40]	@ 0x28
    }
}
 8000d24:	bf00      	nop
 8000d26:	3728      	adds	r7, #40	@ 0x28
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40015804 	.word	0x40015804
 8000d30:	20000284 	.word	0x20000284
 8000d34:	40021000 	.word	0x40021000
 8000d38:	48000400 	.word	0x48000400
 8000d3c:	200001f4 	.word	0x200001f4
 8000d40:	4002006c 	.word	0x4002006c
 8000d44:	40015824 	.word	0x40015824
 8000d48:	48000800 	.word	0x48000800
 8000d4c:	2000023c 	.word	0x2000023c
 8000d50:	40020080 	.word	0x40020080

08000d54 <SGTL5000_WriteReg>:
 */

#include "sgtl5000.h"

// Fonction d'écriture de registre
HAL_StatusTypeDef SGTL5000_WriteReg(SPI_HandleTypeDef *hi2c, uint8_t reg, uint16_t data) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af02      	add	r7, sp, #8
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	460b      	mov	r3, r1
 8000d5e:	70fb      	strb	r3, [r7, #3]
 8000d60:	4613      	mov	r3, r2
 8000d62:	803b      	strh	r3, [r7, #0]
	uint8_t tx_buffer[3];
	tx_buffer[0] = (reg << 1); // Adresse du registre + bit d'écriture (0)
 8000d64:	78fb      	ldrb	r3, [r7, #3]
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	733b      	strb	r3, [r7, #12]
	tx_buffer[1] = (data >> 8) & 0xFF; // Octet de poids fort
 8000d6c:	883b      	ldrh	r3, [r7, #0]
 8000d6e:	0a1b      	lsrs	r3, r3, #8
 8000d70:	b29b      	uxth	r3, r3
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	737b      	strb	r3, [r7, #13]
	tx_buffer[2] = data & 0xFF; // Octet de poids faible
 8000d76:	883b      	ldrh	r3, [r7, #0]
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	73bb      	strb	r3, [r7, #14]
	return HAL_I2C_Master_Transmit(hi2c, 0x0A, tx_buffer, 3, HAL_MAX_DELAY); // adresse sgtl5000 = 0x0A
 8000d7c:	f107 020c 	add.w	r2, r7, #12
 8000d80:	f04f 33ff 	mov.w	r3, #4294967295
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	2303      	movs	r3, #3
 8000d88:	210a      	movs	r1, #10
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f001 f918 	bl	8001fc0 <HAL_I2C_Master_Transmit>
 8000d90:	4603      	mov	r3, r0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <SGTL5000_Init>:


// Fonction d'initialisation
void SGTL5000_Init(SPI_HandleTypeDef *hi2c) {
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b082      	sub	sp, #8
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]

	// Configuration de l'alimentation
	SGTL5000_WriteReg(hi2c, CHIP_LINREG_CTRL, 0x0008);
 8000da2:	2208      	movs	r2, #8
 8000da4:	2106      	movs	r1, #6
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f7ff ffd4 	bl	8000d54 <SGTL5000_WriteReg>
	SGTL5000_WriteReg(hi2c, CHIP_ANA_POWER, 0x7260);
 8000dac:	f247 2260 	movw	r2, #29280	@ 0x7260
 8000db0:	2102      	movs	r1, #2
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f7ff ffce 	bl	8000d54 <SGTL5000_WriteReg>
	SGTL5000_WriteReg(hi2c, CHIP_CLK_TOP_CTRL, 0x0800);
 8000db8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000dbc:	2104      	movs	r1, #4
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f7ff ffc8 	bl	8000d54 <SGTL5000_WriteReg>
	SGTL5000_WriteReg(hi2c, CHIP_ANA_POWER, 0x4A60);
 8000dc4:	f644 2260 	movw	r2, #19040	@ 0x4a60
 8000dc8:	2102      	movs	r1, #2
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f7ff ffc2 	bl	8000d54 <SGTL5000_WriteReg>
	SGTL5000_WriteReg(hi2c, CHIP_LINREG_CTRL, 0x006C);
 8000dd0:	226c      	movs	r2, #108	@ 0x6c
 8000dd2:	2106      	movs	r1, #6
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f7ff ffbd 	bl	8000d54 <SGTL5000_WriteReg>

	// Tension de référence et configuration du courant de polarisation
	SGTL5000_WriteReg(hi2c, CHIP_REF_CTRL, 0x004E);
 8000dda:	224e      	movs	r2, #78	@ 0x4e
 8000ddc:	210a      	movs	r1, #10
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f7ff ffb8 	bl	8000d54 <SGTL5000_WriteReg>
	SGTL5000_WriteReg(hi2c, CHIP_LINE_OUT_CTRL, 0x0322);
 8000de4:	f240 3222 	movw	r2, #802	@ 0x322
 8000de8:	2110      	movs	r1, #16
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f7ff ffb2 	bl	8000d54 <SGTL5000_WriteReg>

	// Autres configurations de blocs analogiques
	SGTL5000_WriteReg(hi2c, CHIP_REF_CTRL, 0x004F);
 8000df0:	224f      	movs	r2, #79	@ 0x4f
 8000df2:	210a      	movs	r1, #10
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f7ff ffad 	bl	8000d54 <SGTL5000_WriteReg>
	SGTL5000_WriteReg(hi2c, CHIP_SHORT_CTRL, 0x1106);
 8000dfa:	f241 1206 	movw	r2, #4358	@ 0x1106
 8000dfe:	2114      	movs	r1, #20
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f7ff ffa7 	bl	8000d54 <SGTL5000_WriteReg>
	SGTL5000_WriteReg(hi2c, CHIP_ANA_CTRL, 0x0133);
 8000e06:	f240 1233 	movw	r2, #307	@ 0x133
 8000e0a:	2116      	movs	r1, #22
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f7ff ffa1 	bl	8000d54 <SGTL5000_WriteReg>

	// Mise sous tension des entrées/sorties/blocs numériques
	SGTL5000_WriteReg(hi2c, CHIP_ANA_POWER, 0x6AFF);
 8000e12:	f646 22ff 	movw	r2, #27391	@ 0x6aff
 8000e16:	2102      	movs	r1, #2
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f7ff ff9b 	bl	8000d54 <SGTL5000_WriteReg>
	SGTL5000_WriteReg(hi2c, CHIP_DIG_POWER, 0x0073);
 8000e1e:	2273      	movs	r2, #115	@ 0x73
 8000e20:	213c      	movs	r1, #60	@ 0x3c
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f7ff ff96 	bl	8000d54 <SGTL5000_WriteReg>

	// Définir le niveau de volume LINEOUT
	SGTL5000_WriteReg(hi2c, CHIP_LINE_OUT_VOL, 0x0505);
 8000e28:	f240 5205 	movw	r2, #1285	@ 0x505
 8000e2c:	2120      	movs	r1, #32
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f7ff ff90 	bl	8000d54 <SGTL5000_WriteReg>

	// Horloge Système MCLK et Horloge d'Échantillonnage
	SGTL5000_WriteReg(hi2c, CHIP_CLK_CTRL, 0x0002);
 8000e34:	2202      	movs	r2, #2
 8000e36:	2100      	movs	r1, #0
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f7ff ff8b 	bl	8000d54 <SGTL5000_WriteReg>
	SGTL5000_WriteReg(hi2c, CHIP_CLK_CTRL, 0x0000);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2100      	movs	r1, #0
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f7ff ff86 	bl	8000d54 <SGTL5000_WriteReg>
	SGTL5000_WriteReg(hi2c, CHIP_I2S_CTRL, 0x0001);
 8000e48:	2201      	movs	r2, #1
 8000e4a:	213a      	movs	r1, #58	@ 0x3a
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	f7ff ff81 	bl	8000d54 <SGTL5000_WriteReg>

	// Configuration de la PLL
	SGTL5000_WriteReg(hi2c, CHIP_ANA_POWER, 0x0400);
 8000e52:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e56:	2102      	movs	r1, #2
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f7ff ff7b 	bl	8000d54 <SGTL5000_WriteReg>
	SGTL5000_WriteReg(hi2c, CHIP_ANA_POWER, 0x0100);
 8000e5e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e62:	2102      	movs	r1, #2
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f7ff ff75 	bl	8000d54 <SGTL5000_WriteReg>
	SGTL5000_WriteReg(hi2c, CHIP_CLK_TOP_CTRL, 0x0008);
 8000e6a:	2208      	movs	r2, #8
 8000e6c:	2104      	movs	r1, #4
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f7ff ff70 	bl	8000d54 <SGTL5000_WriteReg>
	SGTL5000_WriteReg(hi2c, CHIP_PLL_CTRL, 0x6028);
 8000e74:	f246 0228 	movw	r2, #24616	@ 0x6028
 8000e78:	2108      	movs	r1, #8
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f7ff ff6a 	bl	8000d54 <SGTL5000_WriteReg>
	SGTL5000_WriteReg(hi2c, CHIP_PLL_CTRL, 0x07D0);
 8000e80:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000e84:	2108      	movs	r1, #8
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f7ff ff64 	bl	8000d54 <SGTL5000_WriteReg>

	// Routage des Entrées/Sorties
	SGTL5000_WriteReg(hi2c, CHIP_SSS_CTRL, 0x0001);
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	212e      	movs	r1, #46	@ 0x2e
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f7ff ff5f 	bl	8000d54 <SGTL5000_WriteReg>
	SGTL5000_WriteReg(hi2c, CHIP_SSS_CTRL, 0x0003);
 8000e96:	2203      	movs	r2, #3
 8000e98:	212e      	movs	r1, #46	@ 0x2e
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f7ff ff5a 	bl	8000d54 <SGTL5000_WriteReg>
	SGTL5000_WriteReg(hi2c, CHIP_ANA_CTRL, 0x0000);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2116      	movs	r1, #22
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff ff55 	bl	8000d54 <SGTL5000_WriteReg>
	SGTL5000_WriteReg(hi2c, CHIP_ANA_CTRL, 0x0000);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2116      	movs	r1, #22
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f7ff ff50 	bl	8000d54 <SGTL5000_WriteReg>
	SGTL5000_WriteReg(hi2c, CHIP_SSS_CTRL, 0x0000);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	212e      	movs	r1, #46	@ 0x2e
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f7ff ff4b 	bl	8000d54 <SGTL5000_WriteReg>
	SGTL5000_WriteReg(hi2c, CHIP_ANA_CTRL, 0x0040);
 8000ebe:	2240      	movs	r2, #64	@ 0x40
 8000ec0:	2116      	movs	r1, #22
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f7ff ff46 	bl	8000d54 <SGTL5000_WriteReg>
}
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f44 <MX_SPI3_Init+0x74>)
 8000ed6:	4a1c      	ldr	r2, [pc, #112]	@ (8000f48 <MX_SPI3_Init+0x78>)
 8000ed8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000eda:	4b1a      	ldr	r3, [pc, #104]	@ (8000f44 <MX_SPI3_Init+0x74>)
 8000edc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ee0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000ee2:	4b18      	ldr	r3, [pc, #96]	@ (8000f44 <MX_SPI3_Init+0x74>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ee8:	4b16      	ldr	r3, [pc, #88]	@ (8000f44 <MX_SPI3_Init+0x74>)
 8000eea:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000eee:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ef0:	4b14      	ldr	r3, [pc, #80]	@ (8000f44 <MX_SPI3_Init+0x74>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ef6:	4b13      	ldr	r3, [pc, #76]	@ (8000f44 <MX_SPI3_Init+0x74>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000efc:	4b11      	ldr	r3, [pc, #68]	@ (8000f44 <MX_SPI3_Init+0x74>)
 8000efe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f02:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f04:	4b0f      	ldr	r3, [pc, #60]	@ (8000f44 <MX_SPI3_Init+0x74>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f44 <MX_SPI3_Init+0x74>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f10:	4b0c      	ldr	r3, [pc, #48]	@ (8000f44 <MX_SPI3_Init+0x74>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f16:	4b0b      	ldr	r3, [pc, #44]	@ (8000f44 <MX_SPI3_Init+0x74>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000f1c:	4b09      	ldr	r3, [pc, #36]	@ (8000f44 <MX_SPI3_Init+0x74>)
 8000f1e:	2207      	movs	r2, #7
 8000f20:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f22:	4b08      	ldr	r3, [pc, #32]	@ (8000f44 <MX_SPI3_Init+0x74>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f28:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <MX_SPI3_Init+0x74>)
 8000f2a:	2208      	movs	r2, #8
 8000f2c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000f2e:	4805      	ldr	r0, [pc, #20]	@ (8000f44 <MX_SPI3_Init+0x74>)
 8000f30:	f004 fc59 	bl	80057e6 <HAL_SPI_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000f3a:	f7ff fdc0 	bl	8000abe <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000288 	.word	0x20000288
 8000f48:	40003c00 	.word	0x40003c00

08000f4c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08a      	sub	sp, #40	@ 0x28
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a25      	ldr	r2, [pc, #148]	@ (8001000 <HAL_SPI_MspInit+0xb4>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d144      	bne.n	8000ff8 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f6e:	4b25      	ldr	r3, [pc, #148]	@ (8001004 <HAL_SPI_MspInit+0xb8>)
 8000f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f72:	4a24      	ldr	r2, [pc, #144]	@ (8001004 <HAL_SPI_MspInit+0xb8>)
 8000f74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f78:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f7a:	4b22      	ldr	r3, [pc, #136]	@ (8001004 <HAL_SPI_MspInit+0xb8>)
 8000f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f7e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f82:	613b      	str	r3, [r7, #16]
 8000f84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f86:	4b1f      	ldr	r3, [pc, #124]	@ (8001004 <HAL_SPI_MspInit+0xb8>)
 8000f88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f8a:	4a1e      	ldr	r2, [pc, #120]	@ (8001004 <HAL_SPI_MspInit+0xb8>)
 8000f8c:	f043 0304 	orr.w	r3, r3, #4
 8000f90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f92:	4b1c      	ldr	r3, [pc, #112]	@ (8001004 <HAL_SPI_MspInit+0xb8>)
 8000f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f96:	f003 0304 	and.w	r3, r3, #4
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9e:	4b19      	ldr	r3, [pc, #100]	@ (8001004 <HAL_SPI_MspInit+0xb8>)
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa2:	4a18      	ldr	r2, [pc, #96]	@ (8001004 <HAL_SPI_MspInit+0xb8>)
 8000fa4:	f043 0302 	orr.w	r3, r3, #2
 8000fa8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000faa:	4b16      	ldr	r3, [pc, #88]	@ (8001004 <HAL_SPI_MspInit+0xb8>)
 8000fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fae:	f003 0302 	and.w	r3, r3, #2
 8000fb2:	60bb      	str	r3, [r7, #8]
 8000fb4:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000fb6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000fba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fc8:	2306      	movs	r3, #6
 8000fca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	480d      	ldr	r0, [pc, #52]	@ (8001008 <HAL_SPI_MspInit+0xbc>)
 8000fd4:	f000 fd96 	bl	8001b04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000fd8:	2320      	movs	r3, #32
 8000fda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fe8:	2306      	movs	r3, #6
 8000fea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4806      	ldr	r0, [pc, #24]	@ (800100c <HAL_SPI_MspInit+0xc0>)
 8000ff4:	f000 fd86 	bl	8001b04 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000ff8:	bf00      	nop
 8000ffa:	3728      	adds	r7, #40	@ 0x28
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40003c00 	.word	0x40003c00
 8001004:	40021000 	.word	0x40021000
 8001008:	48000800 	.word	0x48000800
 800100c:	48000400 	.word	0x48000400

08001010 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001016:	4b0f      	ldr	r3, [pc, #60]	@ (8001054 <HAL_MspInit+0x44>)
 8001018:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800101a:	4a0e      	ldr	r2, [pc, #56]	@ (8001054 <HAL_MspInit+0x44>)
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	6613      	str	r3, [r2, #96]	@ 0x60
 8001022:	4b0c      	ldr	r3, [pc, #48]	@ (8001054 <HAL_MspInit+0x44>)
 8001024:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800102e:	4b09      	ldr	r3, [pc, #36]	@ (8001054 <HAL_MspInit+0x44>)
 8001030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001032:	4a08      	ldr	r2, [pc, #32]	@ (8001054 <HAL_MspInit+0x44>)
 8001034:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001038:	6593      	str	r3, [r2, #88]	@ 0x58
 800103a:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <HAL_MspInit+0x44>)
 800103c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800103e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001042:	603b      	str	r3, [r7, #0]
 8001044:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	40021000 	.word	0x40021000

08001058 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800105c:	bf00      	nop
 800105e:	e7fd      	b.n	800105c <NMI_Handler+0x4>

08001060 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001064:	bf00      	nop
 8001066:	e7fd      	b.n	8001064 <HardFault_Handler+0x4>

08001068 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800106c:	bf00      	nop
 800106e:	e7fd      	b.n	800106c <MemManage_Handler+0x4>

08001070 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001074:	bf00      	nop
 8001076:	e7fd      	b.n	8001074 <BusFault_Handler+0x4>

08001078 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800107c:	bf00      	nop
 800107e:	e7fd      	b.n	800107c <UsageFault_Handler+0x4>

08001080 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ae:	f000 f9ed 	bl	800148c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
	...

080010b8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 80010bc:	4802      	ldr	r0, [pc, #8]	@ (80010c8 <DMA1_Channel6_IRQHandler+0x10>)
 80010be:	f000 fc72 	bl	80019a6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	200001f4 	.word	0x200001f4

080010cc <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 80010d0:	4802      	ldr	r0, [pc, #8]	@ (80010dc <DMA1_Channel7_IRQHandler+0x10>)
 80010d2:	f000 fc68 	bl	80019a6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	2000023c 	.word	0x2000023c

080010e0 <SAI2_IRQHandler>:

/**
  * @brief This function handles SAI2 global interrupt.
  */
void SAI2_IRQHandler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI2_IRQn 0 */

  /* USER CODE END SAI2_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA2);
 80010e4:	4803      	ldr	r0, [pc, #12]	@ (80010f4 <SAI2_IRQHandler+0x14>)
 80010e6:	f004 f82b 	bl	8005140 <HAL_SAI_IRQHandler>
  HAL_SAI_IRQHandler(&hsai_BlockB2);
 80010ea:	4803      	ldr	r0, [pc, #12]	@ (80010f8 <SAI2_IRQHandler+0x18>)
 80010ec:	f004 f828 	bl	8005140 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI2_IRQn 1 */

  /* USER CODE END SAI2_IRQn 1 */
}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	200000ec 	.word	0x200000ec
 80010f8:	20000170 	.word	0x20000170

080010fc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]
 800110c:	e00a      	b.n	8001124 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800110e:	f3af 8000 	nop.w
 8001112:	4601      	mov	r1, r0
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	1c5a      	adds	r2, r3, #1
 8001118:	60ba      	str	r2, [r7, #8]
 800111a:	b2ca      	uxtb	r2, r1
 800111c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	3301      	adds	r3, #1
 8001122:	617b      	str	r3, [r7, #20]
 8001124:	697a      	ldr	r2, [r7, #20]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	429a      	cmp	r2, r3
 800112a:	dbf0      	blt.n	800110e <_read+0x12>
  }

  return len;
 800112c:	687b      	ldr	r3, [r7, #4]
}
 800112e:	4618      	mov	r0, r3
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b086      	sub	sp, #24
 800113a:	af00      	add	r7, sp, #0
 800113c:	60f8      	str	r0, [r7, #12]
 800113e:	60b9      	str	r1, [r7, #8]
 8001140:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]
 8001146:	e009      	b.n	800115c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	1c5a      	adds	r2, r3, #1
 800114c:	60ba      	str	r2, [r7, #8]
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff fbab 	bl	80008ac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	3301      	adds	r3, #1
 800115a:	617b      	str	r3, [r7, #20]
 800115c:	697a      	ldr	r2, [r7, #20]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	429a      	cmp	r2, r3
 8001162:	dbf1      	blt.n	8001148 <_write+0x12>
  }
  return len;
 8001164:	687b      	ldr	r3, [r7, #4]
}
 8001166:	4618      	mov	r0, r3
 8001168:	3718      	adds	r7, #24
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <_close>:

int _close(int file)
{
 800116e:	b480      	push	{r7}
 8001170:	b083      	sub	sp, #12
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001176:	f04f 33ff 	mov.w	r3, #4294967295
}
 800117a:	4618      	mov	r0, r3
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr

08001186 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001186:	b480      	push	{r7}
 8001188:	b083      	sub	sp, #12
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
 800118e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001196:	605a      	str	r2, [r3, #4]
  return 0;
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <_isatty>:

int _isatty(int file)
{
 80011a6:	b480      	push	{r7}
 80011a8:	b083      	sub	sp, #12
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011ae:	2301      	movs	r3, #1
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3714      	adds	r7, #20
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
	...

080011d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011e0:	4a14      	ldr	r2, [pc, #80]	@ (8001234 <_sbrk+0x5c>)
 80011e2:	4b15      	ldr	r3, [pc, #84]	@ (8001238 <_sbrk+0x60>)
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011ec:	4b13      	ldr	r3, [pc, #76]	@ (800123c <_sbrk+0x64>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d102      	bne.n	80011fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011f4:	4b11      	ldr	r3, [pc, #68]	@ (800123c <_sbrk+0x64>)
 80011f6:	4a12      	ldr	r2, [pc, #72]	@ (8001240 <_sbrk+0x68>)
 80011f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011fa:	4b10      	ldr	r3, [pc, #64]	@ (800123c <_sbrk+0x64>)
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4413      	add	r3, r2
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	429a      	cmp	r2, r3
 8001206:	d207      	bcs.n	8001218 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001208:	f005 fe6e 	bl	8006ee8 <__errno>
 800120c:	4603      	mov	r3, r0
 800120e:	220c      	movs	r2, #12
 8001210:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001212:	f04f 33ff 	mov.w	r3, #4294967295
 8001216:	e009      	b.n	800122c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001218:	4b08      	ldr	r3, [pc, #32]	@ (800123c <_sbrk+0x64>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800121e:	4b07      	ldr	r3, [pc, #28]	@ (800123c <_sbrk+0x64>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4413      	add	r3, r2
 8001226:	4a05      	ldr	r2, [pc, #20]	@ (800123c <_sbrk+0x64>)
 8001228:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800122a:	68fb      	ldr	r3, [r7, #12]
}
 800122c:	4618      	mov	r0, r3
 800122e:	3718      	adds	r7, #24
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20018000 	.word	0x20018000
 8001238:	00000400 	.word	0x00000400
 800123c:	200002ec 	.word	0x200002ec
 8001240:	200004c8 	.word	0x200004c8

08001244 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001248:	4b06      	ldr	r3, [pc, #24]	@ (8001264 <SystemInit+0x20>)
 800124a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800124e:	4a05      	ldr	r2, [pc, #20]	@ (8001264 <SystemInit+0x20>)
 8001250:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001254:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800126c:	4b14      	ldr	r3, [pc, #80]	@ (80012c0 <MX_USART2_UART_Init+0x58>)
 800126e:	4a15      	ldr	r2, [pc, #84]	@ (80012c4 <MX_USART2_UART_Init+0x5c>)
 8001270:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001272:	4b13      	ldr	r3, [pc, #76]	@ (80012c0 <MX_USART2_UART_Init+0x58>)
 8001274:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001278:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800127a:	4b11      	ldr	r3, [pc, #68]	@ (80012c0 <MX_USART2_UART_Init+0x58>)
 800127c:	2200      	movs	r2, #0
 800127e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001280:	4b0f      	ldr	r3, [pc, #60]	@ (80012c0 <MX_USART2_UART_Init+0x58>)
 8001282:	2200      	movs	r2, #0
 8001284:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001286:	4b0e      	ldr	r3, [pc, #56]	@ (80012c0 <MX_USART2_UART_Init+0x58>)
 8001288:	2200      	movs	r2, #0
 800128a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800128c:	4b0c      	ldr	r3, [pc, #48]	@ (80012c0 <MX_USART2_UART_Init+0x58>)
 800128e:	220c      	movs	r2, #12
 8001290:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001292:	4b0b      	ldr	r3, [pc, #44]	@ (80012c0 <MX_USART2_UART_Init+0x58>)
 8001294:	2200      	movs	r2, #0
 8001296:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001298:	4b09      	ldr	r3, [pc, #36]	@ (80012c0 <MX_USART2_UART_Init+0x58>)
 800129a:	2200      	movs	r2, #0
 800129c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800129e:	4b08      	ldr	r3, [pc, #32]	@ (80012c0 <MX_USART2_UART_Init+0x58>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012a4:	4b06      	ldr	r3, [pc, #24]	@ (80012c0 <MX_USART2_UART_Init+0x58>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012aa:	4805      	ldr	r0, [pc, #20]	@ (80012c0 <MX_USART2_UART_Init+0x58>)
 80012ac:	f004 fe18 	bl	8005ee0 <HAL_UART_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80012b6:	f7ff fc02 	bl	8000abe <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	200002f0 	.word	0x200002f0
 80012c4:	40004400 	.word	0x40004400

080012c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b0ac      	sub	sp, #176	@ 0xb0
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	2288      	movs	r2, #136	@ 0x88
 80012e6:	2100      	movs	r1, #0
 80012e8:	4618      	mov	r0, r3
 80012ea:	f005 fdaf 	bl	8006e4c <memset>
  if(uartHandle->Instance==USART2)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a21      	ldr	r2, [pc, #132]	@ (8001378 <HAL_UART_MspInit+0xb0>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d13b      	bne.n	8001370 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80012f8:	2302      	movs	r3, #2
 80012fa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80012fc:	2300      	movs	r3, #0
 80012fe:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	4618      	mov	r0, r3
 8001306:	f002 f9f7 	bl	80036f8 <HAL_RCCEx_PeriphCLKConfig>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001310:	f7ff fbd5 	bl	8000abe <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001314:	4b19      	ldr	r3, [pc, #100]	@ (800137c <HAL_UART_MspInit+0xb4>)
 8001316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001318:	4a18      	ldr	r2, [pc, #96]	@ (800137c <HAL_UART_MspInit+0xb4>)
 800131a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800131e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001320:	4b16      	ldr	r3, [pc, #88]	@ (800137c <HAL_UART_MspInit+0xb4>)
 8001322:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001324:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132c:	4b13      	ldr	r3, [pc, #76]	@ (800137c <HAL_UART_MspInit+0xb4>)
 800132e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001330:	4a12      	ldr	r2, [pc, #72]	@ (800137c <HAL_UART_MspInit+0xb4>)
 8001332:	f043 0301 	orr.w	r3, r3, #1
 8001336:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001338:	4b10      	ldr	r3, [pc, #64]	@ (800137c <HAL_UART_MspInit+0xb4>)
 800133a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001344:	230c      	movs	r3, #12
 8001346:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134a:	2302      	movs	r3, #2
 800134c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001356:	2303      	movs	r3, #3
 8001358:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800135c:	2307      	movs	r3, #7
 800135e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001362:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001366:	4619      	mov	r1, r3
 8001368:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800136c:	f000 fbca 	bl	8001b04 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001370:	bf00      	nop
 8001372:	37b0      	adds	r7, #176	@ 0xb0
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40004400 	.word	0x40004400
 800137c:	40021000 	.word	0x40021000

08001380 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001380:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013b8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001384:	f7ff ff5e 	bl	8001244 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001388:	480c      	ldr	r0, [pc, #48]	@ (80013bc <LoopForever+0x6>)
  ldr r1, =_edata
 800138a:	490d      	ldr	r1, [pc, #52]	@ (80013c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800138c:	4a0d      	ldr	r2, [pc, #52]	@ (80013c4 <LoopForever+0xe>)
  movs r3, #0
 800138e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001390:	e002      	b.n	8001398 <LoopCopyDataInit>

08001392 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001392:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001394:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001396:	3304      	adds	r3, #4

08001398 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001398:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800139a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800139c:	d3f9      	bcc.n	8001392 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800139e:	4a0a      	ldr	r2, [pc, #40]	@ (80013c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013a0:	4c0a      	ldr	r4, [pc, #40]	@ (80013cc <LoopForever+0x16>)
  movs r3, #0
 80013a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013a4:	e001      	b.n	80013aa <LoopFillZerobss>

080013a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013a8:	3204      	adds	r2, #4

080013aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013ac:	d3fb      	bcc.n	80013a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013ae:	f005 fda1 	bl	8006ef4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013b2:	f7ff fa8d 	bl	80008d0 <main>

080013b6 <LoopForever>:

LoopForever:
    b LoopForever
 80013b6:	e7fe      	b.n	80013b6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80013b8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80013bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013c0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80013c4:	08007a3c 	.word	0x08007a3c
  ldr r2, =_sbss
 80013c8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80013cc:	200004c8 	.word	0x200004c8

080013d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013d0:	e7fe      	b.n	80013d0 <ADC1_2_IRQHandler>
	...

080013d4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013da:	2300      	movs	r3, #0
 80013dc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013de:	4b0c      	ldr	r3, [pc, #48]	@ (8001410 <HAL_Init+0x3c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a0b      	ldr	r2, [pc, #44]	@ (8001410 <HAL_Init+0x3c>)
 80013e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013e8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ea:	2003      	movs	r0, #3
 80013ec:	f000 f962 	bl	80016b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013f0:	2000      	movs	r0, #0
 80013f2:	f000 f80f 	bl	8001414 <HAL_InitTick>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d002      	beq.n	8001402 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	71fb      	strb	r3, [r7, #7]
 8001400:	e001      	b.n	8001406 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001402:	f7ff fe05 	bl	8001010 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001406:	79fb      	ldrb	r3, [r7, #7]
}
 8001408:	4618      	mov	r0, r3
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40022000 	.word	0x40022000

08001414 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800141c:	2300      	movs	r3, #0
 800141e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001420:	4b17      	ldr	r3, [pc, #92]	@ (8001480 <HAL_InitTick+0x6c>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d023      	beq.n	8001470 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001428:	4b16      	ldr	r3, [pc, #88]	@ (8001484 <HAL_InitTick+0x70>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	4b14      	ldr	r3, [pc, #80]	@ (8001480 <HAL_InitTick+0x6c>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	4619      	mov	r1, r3
 8001432:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001436:	fbb3 f3f1 	udiv	r3, r3, r1
 800143a:	fbb2 f3f3 	udiv	r3, r2, r3
 800143e:	4618      	mov	r0, r3
 8001440:	f000 f96d 	bl	800171e <HAL_SYSTICK_Config>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d10f      	bne.n	800146a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2b0f      	cmp	r3, #15
 800144e:	d809      	bhi.n	8001464 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001450:	2200      	movs	r2, #0
 8001452:	6879      	ldr	r1, [r7, #4]
 8001454:	f04f 30ff 	mov.w	r0, #4294967295
 8001458:	f000 f937 	bl	80016ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800145c:	4a0a      	ldr	r2, [pc, #40]	@ (8001488 <HAL_InitTick+0x74>)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6013      	str	r3, [r2, #0]
 8001462:	e007      	b.n	8001474 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	73fb      	strb	r3, [r7, #15]
 8001468:	e004      	b.n	8001474 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	73fb      	strb	r3, [r7, #15]
 800146e:	e001      	b.n	8001474 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001474:	7bfb      	ldrb	r3, [r7, #15]
}
 8001476:	4618      	mov	r0, r3
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000008 	.word	0x20000008
 8001484:	20000000 	.word	0x20000000
 8001488:	20000004 	.word	0x20000004

0800148c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001490:	4b06      	ldr	r3, [pc, #24]	@ (80014ac <HAL_IncTick+0x20>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	461a      	mov	r2, r3
 8001496:	4b06      	ldr	r3, [pc, #24]	@ (80014b0 <HAL_IncTick+0x24>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4413      	add	r3, r2
 800149c:	4a04      	ldr	r2, [pc, #16]	@ (80014b0 <HAL_IncTick+0x24>)
 800149e:	6013      	str	r3, [r2, #0]
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	20000008 	.word	0x20000008
 80014b0:	20000378 	.word	0x20000378

080014b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  return uwTick;
 80014b8:	4b03      	ldr	r3, [pc, #12]	@ (80014c8 <HAL_GetTick+0x14>)
 80014ba:	681b      	ldr	r3, [r3, #0]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	20000378 	.word	0x20000378

080014cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014d4:	f7ff ffee 	bl	80014b4 <HAL_GetTick>
 80014d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014e4:	d005      	beq.n	80014f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80014e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001510 <HAL_Delay+0x44>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	461a      	mov	r2, r3
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	4413      	add	r3, r2
 80014f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014f2:	bf00      	nop
 80014f4:	f7ff ffde 	bl	80014b4 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	429a      	cmp	r2, r3
 8001502:	d8f7      	bhi.n	80014f4 <HAL_Delay+0x28>
  {
  }
}
 8001504:	bf00      	nop
 8001506:	bf00      	nop
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000008 	.word	0x20000008

08001514 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001524:	4b0c      	ldr	r3, [pc, #48]	@ (8001558 <__NVIC_SetPriorityGrouping+0x44>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800152a:	68ba      	ldr	r2, [r7, #8]
 800152c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001530:	4013      	ands	r3, r2
 8001532:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800153c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001540:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001544:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001546:	4a04      	ldr	r2, [pc, #16]	@ (8001558 <__NVIC_SetPriorityGrouping+0x44>)
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	60d3      	str	r3, [r2, #12]
}
 800154c:	bf00      	nop
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001560:	4b04      	ldr	r3, [pc, #16]	@ (8001574 <__NVIC_GetPriorityGrouping+0x18>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	0a1b      	lsrs	r3, r3, #8
 8001566:	f003 0307 	and.w	r3, r3, #7
}
 800156a:	4618      	mov	r0, r3
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001586:	2b00      	cmp	r3, #0
 8001588:	db0b      	blt.n	80015a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	f003 021f 	and.w	r2, r3, #31
 8001590:	4907      	ldr	r1, [pc, #28]	@ (80015b0 <__NVIC_EnableIRQ+0x38>)
 8001592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001596:	095b      	lsrs	r3, r3, #5
 8001598:	2001      	movs	r0, #1
 800159a:	fa00 f202 	lsl.w	r2, r0, r2
 800159e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	e000e100 	.word	0xe000e100

080015b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	6039      	str	r1, [r7, #0]
 80015be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	db0a      	blt.n	80015de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	490c      	ldr	r1, [pc, #48]	@ (8001600 <__NVIC_SetPriority+0x4c>)
 80015ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d2:	0112      	lsls	r2, r2, #4
 80015d4:	b2d2      	uxtb	r2, r2
 80015d6:	440b      	add	r3, r1
 80015d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015dc:	e00a      	b.n	80015f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	4908      	ldr	r1, [pc, #32]	@ (8001604 <__NVIC_SetPriority+0x50>)
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	f003 030f 	and.w	r3, r3, #15
 80015ea:	3b04      	subs	r3, #4
 80015ec:	0112      	lsls	r2, r2, #4
 80015ee:	b2d2      	uxtb	r2, r2
 80015f0:	440b      	add	r3, r1
 80015f2:	761a      	strb	r2, [r3, #24]
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	e000e100 	.word	0xe000e100
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001608:	b480      	push	{r7}
 800160a:	b089      	sub	sp, #36	@ 0x24
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f003 0307 	and.w	r3, r3, #7
 800161a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	f1c3 0307 	rsb	r3, r3, #7
 8001622:	2b04      	cmp	r3, #4
 8001624:	bf28      	it	cs
 8001626:	2304      	movcs	r3, #4
 8001628:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	3304      	adds	r3, #4
 800162e:	2b06      	cmp	r3, #6
 8001630:	d902      	bls.n	8001638 <NVIC_EncodePriority+0x30>
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	3b03      	subs	r3, #3
 8001636:	e000      	b.n	800163a <NVIC_EncodePriority+0x32>
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800163c:	f04f 32ff 	mov.w	r2, #4294967295
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	fa02 f303 	lsl.w	r3, r2, r3
 8001646:	43da      	mvns	r2, r3
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	401a      	ands	r2, r3
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001650:	f04f 31ff 	mov.w	r1, #4294967295
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	fa01 f303 	lsl.w	r3, r1, r3
 800165a:	43d9      	mvns	r1, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001660:	4313      	orrs	r3, r2
         );
}
 8001662:	4618      	mov	r0, r3
 8001664:	3724      	adds	r7, #36	@ 0x24
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
	...

08001670 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	3b01      	subs	r3, #1
 800167c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001680:	d301      	bcc.n	8001686 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001682:	2301      	movs	r3, #1
 8001684:	e00f      	b.n	80016a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001686:	4a0a      	ldr	r2, [pc, #40]	@ (80016b0 <SysTick_Config+0x40>)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3b01      	subs	r3, #1
 800168c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800168e:	210f      	movs	r1, #15
 8001690:	f04f 30ff 	mov.w	r0, #4294967295
 8001694:	f7ff ff8e 	bl	80015b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001698:	4b05      	ldr	r3, [pc, #20]	@ (80016b0 <SysTick_Config+0x40>)
 800169a:	2200      	movs	r2, #0
 800169c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800169e:	4b04      	ldr	r3, [pc, #16]	@ (80016b0 <SysTick_Config+0x40>)
 80016a0:	2207      	movs	r2, #7
 80016a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	e000e010 	.word	0xe000e010

080016b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f7ff ff29 	bl	8001514 <__NVIC_SetPriorityGrouping>
}
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b086      	sub	sp, #24
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	4603      	mov	r3, r0
 80016d2:	60b9      	str	r1, [r7, #8]
 80016d4:	607a      	str	r2, [r7, #4]
 80016d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016d8:	2300      	movs	r3, #0
 80016da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016dc:	f7ff ff3e 	bl	800155c <__NVIC_GetPriorityGrouping>
 80016e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	68b9      	ldr	r1, [r7, #8]
 80016e6:	6978      	ldr	r0, [r7, #20]
 80016e8:	f7ff ff8e 	bl	8001608 <NVIC_EncodePriority>
 80016ec:	4602      	mov	r2, r0
 80016ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016f2:	4611      	mov	r1, r2
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff ff5d 	bl	80015b4 <__NVIC_SetPriority>
}
 80016fa:	bf00      	nop
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b082      	sub	sp, #8
 8001706:	af00      	add	r7, sp, #0
 8001708:	4603      	mov	r3, r0
 800170a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800170c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff ff31 	bl	8001578 <__NVIC_EnableIRQ>
}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b082      	sub	sp, #8
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7ff ffa2 	bl	8001670 <SysTick_Config>
 800172c:	4603      	mov	r3, r0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
	...

08001738 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d101      	bne.n	800174a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e098      	b.n	800187c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	461a      	mov	r2, r3
 8001750:	4b4d      	ldr	r3, [pc, #308]	@ (8001888 <HAL_DMA_Init+0x150>)
 8001752:	429a      	cmp	r2, r3
 8001754:	d80f      	bhi.n	8001776 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	461a      	mov	r2, r3
 800175c:	4b4b      	ldr	r3, [pc, #300]	@ (800188c <HAL_DMA_Init+0x154>)
 800175e:	4413      	add	r3, r2
 8001760:	4a4b      	ldr	r2, [pc, #300]	@ (8001890 <HAL_DMA_Init+0x158>)
 8001762:	fba2 2303 	umull	r2, r3, r2, r3
 8001766:	091b      	lsrs	r3, r3, #4
 8001768:	009a      	lsls	r2, r3, #2
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a48      	ldr	r2, [pc, #288]	@ (8001894 <HAL_DMA_Init+0x15c>)
 8001772:	641a      	str	r2, [r3, #64]	@ 0x40
 8001774:	e00e      	b.n	8001794 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	461a      	mov	r2, r3
 800177c:	4b46      	ldr	r3, [pc, #280]	@ (8001898 <HAL_DMA_Init+0x160>)
 800177e:	4413      	add	r3, r2
 8001780:	4a43      	ldr	r2, [pc, #268]	@ (8001890 <HAL_DMA_Init+0x158>)
 8001782:	fba2 2303 	umull	r2, r3, r2, r3
 8001786:	091b      	lsrs	r3, r3, #4
 8001788:	009a      	lsls	r2, r3, #2
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a42      	ldr	r2, [pc, #264]	@ (800189c <HAL_DMA_Init+0x164>)
 8001792:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2202      	movs	r2, #2
 8001798:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80017aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80017ae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80017b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a1b      	ldr	r3, [r3, #32]
 80017d6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80017d8:	68fa      	ldr	r2, [r7, #12]
 80017da:	4313      	orrs	r3, r2
 80017dc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80017ee:	d039      	beq.n	8001864 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f4:	4a27      	ldr	r2, [pc, #156]	@ (8001894 <HAL_DMA_Init+0x15c>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d11a      	bne.n	8001830 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80017fa:	4b29      	ldr	r3, [pc, #164]	@ (80018a0 <HAL_DMA_Init+0x168>)
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001802:	f003 031c 	and.w	r3, r3, #28
 8001806:	210f      	movs	r1, #15
 8001808:	fa01 f303 	lsl.w	r3, r1, r3
 800180c:	43db      	mvns	r3, r3
 800180e:	4924      	ldr	r1, [pc, #144]	@ (80018a0 <HAL_DMA_Init+0x168>)
 8001810:	4013      	ands	r3, r2
 8001812:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001814:	4b22      	ldr	r3, [pc, #136]	@ (80018a0 <HAL_DMA_Init+0x168>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6859      	ldr	r1, [r3, #4]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001820:	f003 031c 	and.w	r3, r3, #28
 8001824:	fa01 f303 	lsl.w	r3, r1, r3
 8001828:	491d      	ldr	r1, [pc, #116]	@ (80018a0 <HAL_DMA_Init+0x168>)
 800182a:	4313      	orrs	r3, r2
 800182c:	600b      	str	r3, [r1, #0]
 800182e:	e019      	b.n	8001864 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001830:	4b1c      	ldr	r3, [pc, #112]	@ (80018a4 <HAL_DMA_Init+0x16c>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001838:	f003 031c 	and.w	r3, r3, #28
 800183c:	210f      	movs	r1, #15
 800183e:	fa01 f303 	lsl.w	r3, r1, r3
 8001842:	43db      	mvns	r3, r3
 8001844:	4917      	ldr	r1, [pc, #92]	@ (80018a4 <HAL_DMA_Init+0x16c>)
 8001846:	4013      	ands	r3, r2
 8001848:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800184a:	4b16      	ldr	r3, [pc, #88]	@ (80018a4 <HAL_DMA_Init+0x16c>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6859      	ldr	r1, [r3, #4]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001856:	f003 031c 	and.w	r3, r3, #28
 800185a:	fa01 f303 	lsl.w	r3, r1, r3
 800185e:	4911      	ldr	r1, [pc, #68]	@ (80018a4 <HAL_DMA_Init+0x16c>)
 8001860:	4313      	orrs	r3, r2
 8001862:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2201      	movs	r2, #1
 800186e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	3714      	adds	r7, #20
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	40020407 	.word	0x40020407
 800188c:	bffdfff8 	.word	0xbffdfff8
 8001890:	cccccccd 	.word	0xcccccccd
 8001894:	40020000 	.word	0x40020000
 8001898:	bffdfbf8 	.word	0xbffdfbf8
 800189c:	40020400 	.word	0x40020400
 80018a0:	400200a8 	.word	0x400200a8
 80018a4:	400204a8 	.word	0x400204a8

080018a8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018b0:	2300      	movs	r3, #0
 80018b2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d008      	beq.n	80018d2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2204      	movs	r2, #4
 80018c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e022      	b.n	8001918 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f022 020e 	bic.w	r2, r2, #14
 80018e0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f022 0201 	bic.w	r2, r2, #1
 80018f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018f6:	f003 021c 	and.w	r2, r3, #28
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fe:	2101      	movs	r1, #1
 8001900:	fa01 f202 	lsl.w	r2, r1, r2
 8001904:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2201      	movs	r2, #1
 800190a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001916:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001918:	4618      	mov	r0, r3
 800191a:	3714      	adds	r7, #20
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800192c:	2300      	movs	r3, #0
 800192e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d005      	beq.n	8001948 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2204      	movs	r2, #4
 8001940:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	73fb      	strb	r3, [r7, #15]
 8001946:	e029      	b.n	800199c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f022 020e 	bic.w	r2, r2, #14
 8001956:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f022 0201 	bic.w	r2, r2, #1
 8001966:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800196c:	f003 021c 	and.w	r2, r3, #28
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001974:	2101      	movs	r1, #1
 8001976:	fa01 f202 	lsl.w	r2, r1, r2
 800197a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2201      	movs	r2, #1
 8001980:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001990:	2b00      	cmp	r3, #0
 8001992:	d003      	beq.n	800199c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	4798      	blx	r3
    }
  }
  return status;
 800199c:	7bfb      	ldrb	r3, [r7, #15]
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b084      	sub	sp, #16
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c2:	f003 031c 	and.w	r3, r3, #28
 80019c6:	2204      	movs	r2, #4
 80019c8:	409a      	lsls	r2, r3
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	4013      	ands	r3, r2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d026      	beq.n	8001a20 <HAL_DMA_IRQHandler+0x7a>
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d021      	beq.n	8001a20 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0320 	and.w	r3, r3, #32
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d107      	bne.n	80019fa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f022 0204 	bic.w	r2, r2, #4
 80019f8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019fe:	f003 021c 	and.w	r2, r3, #28
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a06:	2104      	movs	r1, #4
 8001a08:	fa01 f202 	lsl.w	r2, r1, r2
 8001a0c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d071      	beq.n	8001afa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001a1e:	e06c      	b.n	8001afa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a24:	f003 031c 	and.w	r3, r3, #28
 8001a28:	2202      	movs	r2, #2
 8001a2a:	409a      	lsls	r2, r3
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d02e      	beq.n	8001a92 <HAL_DMA_IRQHandler+0xec>
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d029      	beq.n	8001a92 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0320 	and.w	r3, r3, #32
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d10b      	bne.n	8001a64 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 020a 	bic.w	r2, r2, #10
 8001a5a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a68:	f003 021c 	and.w	r2, r3, #28
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a70:	2102      	movs	r1, #2
 8001a72:	fa01 f202 	lsl.w	r2, r1, r2
 8001a76:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d038      	beq.n	8001afa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001a90:	e033      	b.n	8001afa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a96:	f003 031c 	and.w	r3, r3, #28
 8001a9a:	2208      	movs	r2, #8
 8001a9c:	409a      	lsls	r2, r3
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d02a      	beq.n	8001afc <HAL_DMA_IRQHandler+0x156>
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	f003 0308 	and.w	r3, r3, #8
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d025      	beq.n	8001afc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f022 020e 	bic.w	r2, r2, #14
 8001abe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ac4:	f003 021c 	and.w	r2, r3, #28
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001acc:	2101      	movs	r1, #1
 8001ace:	fa01 f202 	lsl.w	r2, r1, r2
 8001ad2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2201      	movs	r2, #1
 8001ade:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d004      	beq.n	8001afc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001afa:	bf00      	nop
 8001afc:	bf00      	nop
}
 8001afe:	3710      	adds	r7, #16
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b087      	sub	sp, #28
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b12:	e17f      	b.n	8001e14 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	2101      	movs	r1, #1
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b20:	4013      	ands	r3, r2
 8001b22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f000 8171 	beq.w	8001e0e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 0303 	and.w	r3, r3, #3
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d005      	beq.n	8001b44 <HAL_GPIO_Init+0x40>
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f003 0303 	and.w	r3, r3, #3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d130      	bne.n	8001ba6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	2203      	movs	r2, #3
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	43db      	mvns	r3, r3
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	68da      	ldr	r2, [r3, #12]
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	43db      	mvns	r3, r3
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	4013      	ands	r3, r2
 8001b88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	091b      	lsrs	r3, r3, #4
 8001b90:	f003 0201 	and.w	r2, r3, #1
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f003 0303 	and.w	r3, r3, #3
 8001bae:	2b03      	cmp	r3, #3
 8001bb0:	d118      	bne.n	8001be4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001bb8:	2201      	movs	r2, #1
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	08db      	lsrs	r3, r3, #3
 8001bce:	f003 0201 	and.w	r2, r3, #1
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f003 0303 	and.w	r3, r3, #3
 8001bec:	2b03      	cmp	r3, #3
 8001bee:	d017      	beq.n	8001c20 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	2203      	movs	r2, #3
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	43db      	mvns	r3, r3
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	4013      	ands	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f003 0303 	and.w	r3, r3, #3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d123      	bne.n	8001c74 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	08da      	lsrs	r2, r3, #3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	3208      	adds	r2, #8
 8001c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c38:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	f003 0307 	and.w	r3, r3, #7
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	220f      	movs	r2, #15
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	691a      	ldr	r2, [r3, #16]
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	08da      	lsrs	r2, r3, #3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	3208      	adds	r2, #8
 8001c6e:	6939      	ldr	r1, [r7, #16]
 8001c70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	2203      	movs	r2, #3
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	43db      	mvns	r3, r3
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f003 0203 	and.w	r2, r3, #3
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	f000 80ac 	beq.w	8001e0e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb6:	4b5f      	ldr	r3, [pc, #380]	@ (8001e34 <HAL_GPIO_Init+0x330>)
 8001cb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cba:	4a5e      	ldr	r2, [pc, #376]	@ (8001e34 <HAL_GPIO_Init+0x330>)
 8001cbc:	f043 0301 	orr.w	r3, r3, #1
 8001cc0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001cc2:	4b5c      	ldr	r3, [pc, #368]	@ (8001e34 <HAL_GPIO_Init+0x330>)
 8001cc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	60bb      	str	r3, [r7, #8]
 8001ccc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cce:	4a5a      	ldr	r2, [pc, #360]	@ (8001e38 <HAL_GPIO_Init+0x334>)
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	089b      	lsrs	r3, r3, #2
 8001cd4:	3302      	adds	r3, #2
 8001cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cda:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	f003 0303 	and.w	r3, r3, #3
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	220f      	movs	r2, #15
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	43db      	mvns	r3, r3
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001cf8:	d025      	beq.n	8001d46 <HAL_GPIO_Init+0x242>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a4f      	ldr	r2, [pc, #316]	@ (8001e3c <HAL_GPIO_Init+0x338>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d01f      	beq.n	8001d42 <HAL_GPIO_Init+0x23e>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a4e      	ldr	r2, [pc, #312]	@ (8001e40 <HAL_GPIO_Init+0x33c>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d019      	beq.n	8001d3e <HAL_GPIO_Init+0x23a>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a4d      	ldr	r2, [pc, #308]	@ (8001e44 <HAL_GPIO_Init+0x340>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d013      	beq.n	8001d3a <HAL_GPIO_Init+0x236>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a4c      	ldr	r2, [pc, #304]	@ (8001e48 <HAL_GPIO_Init+0x344>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d00d      	beq.n	8001d36 <HAL_GPIO_Init+0x232>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a4b      	ldr	r2, [pc, #300]	@ (8001e4c <HAL_GPIO_Init+0x348>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d007      	beq.n	8001d32 <HAL_GPIO_Init+0x22e>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a4a      	ldr	r2, [pc, #296]	@ (8001e50 <HAL_GPIO_Init+0x34c>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d101      	bne.n	8001d2e <HAL_GPIO_Init+0x22a>
 8001d2a:	2306      	movs	r3, #6
 8001d2c:	e00c      	b.n	8001d48 <HAL_GPIO_Init+0x244>
 8001d2e:	2307      	movs	r3, #7
 8001d30:	e00a      	b.n	8001d48 <HAL_GPIO_Init+0x244>
 8001d32:	2305      	movs	r3, #5
 8001d34:	e008      	b.n	8001d48 <HAL_GPIO_Init+0x244>
 8001d36:	2304      	movs	r3, #4
 8001d38:	e006      	b.n	8001d48 <HAL_GPIO_Init+0x244>
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e004      	b.n	8001d48 <HAL_GPIO_Init+0x244>
 8001d3e:	2302      	movs	r3, #2
 8001d40:	e002      	b.n	8001d48 <HAL_GPIO_Init+0x244>
 8001d42:	2301      	movs	r3, #1
 8001d44:	e000      	b.n	8001d48 <HAL_GPIO_Init+0x244>
 8001d46:	2300      	movs	r3, #0
 8001d48:	697a      	ldr	r2, [r7, #20]
 8001d4a:	f002 0203 	and.w	r2, r2, #3
 8001d4e:	0092      	lsls	r2, r2, #2
 8001d50:	4093      	lsls	r3, r2
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d58:	4937      	ldr	r1, [pc, #220]	@ (8001e38 <HAL_GPIO_Init+0x334>)
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	089b      	lsrs	r3, r3, #2
 8001d5e:	3302      	adds	r3, #2
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d66:	4b3b      	ldr	r3, [pc, #236]	@ (8001e54 <HAL_GPIO_Init+0x350>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	4013      	ands	r3, r2
 8001d74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d8a:	4a32      	ldr	r2, [pc, #200]	@ (8001e54 <HAL_GPIO_Init+0x350>)
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d90:	4b30      	ldr	r3, [pc, #192]	@ (8001e54 <HAL_GPIO_Init+0x350>)
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d003      	beq.n	8001db4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001db4:	4a27      	ldr	r2, [pc, #156]	@ (8001e54 <HAL_GPIO_Init+0x350>)
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001dba:	4b26      	ldr	r3, [pc, #152]	@ (8001e54 <HAL_GPIO_Init+0x350>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001dde:	4a1d      	ldr	r2, [pc, #116]	@ (8001e54 <HAL_GPIO_Init+0x350>)
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001de4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e54 <HAL_GPIO_Init+0x350>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	43db      	mvns	r3, r3
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	4013      	ands	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d003      	beq.n	8001e08 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e08:	4a12      	ldr	r2, [pc, #72]	@ (8001e54 <HAL_GPIO_Init+0x350>)
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	3301      	adds	r3, #1
 8001e12:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f47f ae78 	bne.w	8001b14 <HAL_GPIO_Init+0x10>
  }
}
 8001e24:	bf00      	nop
 8001e26:	bf00      	nop
 8001e28:	371c      	adds	r7, #28
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	40021000 	.word	0x40021000
 8001e38:	40010000 	.word	0x40010000
 8001e3c:	48000400 	.word	0x48000400
 8001e40:	48000800 	.word	0x48000800
 8001e44:	48000c00 	.word	0x48000c00
 8001e48:	48001000 	.word	0x48001000
 8001e4c:	48001400 	.word	0x48001400
 8001e50:	48001800 	.word	0x48001800
 8001e54:	40010400 	.word	0x40010400

08001e58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	460b      	mov	r3, r1
 8001e62:	807b      	strh	r3, [r7, #2]
 8001e64:	4613      	mov	r3, r2
 8001e66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e68:	787b      	ldrb	r3, [r7, #1]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d003      	beq.n	8001e76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e6e:	887a      	ldrh	r2, [r7, #2]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e74:	e002      	b.n	8001e7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e76:	887a      	ldrh	r2, [r7, #2]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e08d      	b.n	8001fb6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d106      	bne.n	8001eb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7fe fc9e 	bl	80007f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2224      	movs	r2, #36	@ 0x24
 8001eb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f022 0201 	bic.w	r2, r2, #1
 8001eca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ed8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001ee8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d107      	bne.n	8001f02 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689a      	ldr	r2, [r3, #8]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001efe:	609a      	str	r2, [r3, #8]
 8001f00:	e006      	b.n	8001f10 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689a      	ldr	r2, [r3, #8]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001f0e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d108      	bne.n	8001f2a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	685a      	ldr	r2, [r3, #4]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f26:	605a      	str	r2, [r3, #4]
 8001f28:	e007      	b.n	8001f3a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	685a      	ldr	r2, [r3, #4]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f38:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	6812      	ldr	r2, [r2, #0]
 8001f44:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f4c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68da      	ldr	r2, [r3, #12]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f5c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	691a      	ldr	r2, [r3, #16]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	430a      	orrs	r2, r1
 8001f76:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	69d9      	ldr	r1, [r3, #28]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a1a      	ldr	r2, [r3, #32]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	430a      	orrs	r2, r1
 8001f86:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f042 0201 	orr.w	r2, r2, #1
 8001f96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2220      	movs	r2, #32
 8001fa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
	...

08001fc0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b088      	sub	sp, #32
 8001fc4:	af02      	add	r7, sp, #8
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	607a      	str	r2, [r7, #4]
 8001fca:	461a      	mov	r2, r3
 8001fcc:	460b      	mov	r3, r1
 8001fce:	817b      	strh	r3, [r7, #10]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b20      	cmp	r3, #32
 8001fde:	f040 80fd 	bne.w	80021dc <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d101      	bne.n	8001ff0 <HAL_I2C_Master_Transmit+0x30>
 8001fec:	2302      	movs	r3, #2
 8001fee:	e0f6      	b.n	80021de <HAL_I2C_Master_Transmit+0x21e>
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ff8:	f7ff fa5c 	bl	80014b4 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	2319      	movs	r3, #25
 8002004:	2201      	movs	r2, #1
 8002006:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	f000 fa82 	bl	8002514 <I2C_WaitOnFlagUntilTimeout>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e0e1      	b.n	80021de <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2221      	movs	r2, #33	@ 0x21
 800201e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2210      	movs	r2, #16
 8002026:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2200      	movs	r2, #0
 800202e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	893a      	ldrh	r2, [r7, #8]
 800203a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2200      	movs	r2, #0
 8002040:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002046:	b29b      	uxth	r3, r3
 8002048:	2bff      	cmp	r3, #255	@ 0xff
 800204a:	d906      	bls.n	800205a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	22ff      	movs	r2, #255	@ 0xff
 8002050:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002052:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002056:	617b      	str	r3, [r7, #20]
 8002058:	e007      	b.n	800206a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800205e:	b29a      	uxth	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002064:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002068:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800206e:	2b00      	cmp	r3, #0
 8002070:	d024      	beq.n	80020bc <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002076:	781a      	ldrb	r2, [r3, #0]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002082:	1c5a      	adds	r2, r3, #1
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800208c:	b29b      	uxth	r3, r3
 800208e:	3b01      	subs	r3, #1
 8002090:	b29a      	uxth	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800209a:	3b01      	subs	r3, #1
 800209c:	b29a      	uxth	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	3301      	adds	r3, #1
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	8979      	ldrh	r1, [r7, #10]
 80020ae:	4b4e      	ldr	r3, [pc, #312]	@ (80021e8 <HAL_I2C_Master_Transmit+0x228>)
 80020b0:	9300      	str	r3, [sp, #0]
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	68f8      	ldr	r0, [r7, #12]
 80020b6:	f000 fbf1 	bl	800289c <I2C_TransferConfig>
 80020ba:	e066      	b.n	800218a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020c0:	b2da      	uxtb	r2, r3
 80020c2:	8979      	ldrh	r1, [r7, #10]
 80020c4:	4b48      	ldr	r3, [pc, #288]	@ (80021e8 <HAL_I2C_Master_Transmit+0x228>)
 80020c6:	9300      	str	r3, [sp, #0]
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f000 fbe6 	bl	800289c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80020d0:	e05b      	b.n	800218a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	6a39      	ldr	r1, [r7, #32]
 80020d6:	68f8      	ldr	r0, [r7, #12]
 80020d8:	f000 fa75 	bl	80025c6 <I2C_WaitOnTXISFlagUntilTimeout>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e07b      	b.n	80021de <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ea:	781a      	ldrb	r2, [r3, #0]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f6:	1c5a      	adds	r2, r3, #1
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002100:	b29b      	uxth	r3, r3
 8002102:	3b01      	subs	r3, #1
 8002104:	b29a      	uxth	r2, r3
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800210e:	3b01      	subs	r3, #1
 8002110:	b29a      	uxth	r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800211a:	b29b      	uxth	r3, r3
 800211c:	2b00      	cmp	r3, #0
 800211e:	d034      	beq.n	800218a <HAL_I2C_Master_Transmit+0x1ca>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002124:	2b00      	cmp	r3, #0
 8002126:	d130      	bne.n	800218a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	9300      	str	r3, [sp, #0]
 800212c:	6a3b      	ldr	r3, [r7, #32]
 800212e:	2200      	movs	r2, #0
 8002130:	2180      	movs	r1, #128	@ 0x80
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	f000 f9ee 	bl	8002514 <I2C_WaitOnFlagUntilTimeout>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e04d      	b.n	80021de <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002146:	b29b      	uxth	r3, r3
 8002148:	2bff      	cmp	r3, #255	@ 0xff
 800214a:	d90e      	bls.n	800216a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	22ff      	movs	r2, #255	@ 0xff
 8002150:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002156:	b2da      	uxtb	r2, r3
 8002158:	8979      	ldrh	r1, [r7, #10]
 800215a:	2300      	movs	r3, #0
 800215c:	9300      	str	r3, [sp, #0]
 800215e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002162:	68f8      	ldr	r0, [r7, #12]
 8002164:	f000 fb9a 	bl	800289c <I2C_TransferConfig>
 8002168:	e00f      	b.n	800218a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800216e:	b29a      	uxth	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002178:	b2da      	uxtb	r2, r3
 800217a:	8979      	ldrh	r1, [r7, #10]
 800217c:	2300      	movs	r3, #0
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002184:	68f8      	ldr	r0, [r7, #12]
 8002186:	f000 fb89 	bl	800289c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800218e:	b29b      	uxth	r3, r3
 8002190:	2b00      	cmp	r3, #0
 8002192:	d19e      	bne.n	80020d2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	6a39      	ldr	r1, [r7, #32]
 8002198:	68f8      	ldr	r0, [r7, #12]
 800219a:	f000 fa5b 	bl	8002654 <I2C_WaitOnSTOPFlagUntilTimeout>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e01a      	b.n	80021de <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2220      	movs	r2, #32
 80021ae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6859      	ldr	r1, [r3, #4]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	4b0c      	ldr	r3, [pc, #48]	@ (80021ec <HAL_I2C_Master_Transmit+0x22c>)
 80021bc:	400b      	ands	r3, r1
 80021be:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2220      	movs	r2, #32
 80021c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80021d8:	2300      	movs	r3, #0
 80021da:	e000      	b.n	80021de <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80021dc:	2302      	movs	r3, #2
  }
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3718      	adds	r7, #24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	80002000 	.word	0x80002000
 80021ec:	fe00e800 	.word	0xfe00e800

080021f0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b088      	sub	sp, #32
 80021f4:	af02      	add	r7, sp, #8
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	4608      	mov	r0, r1
 80021fa:	4611      	mov	r1, r2
 80021fc:	461a      	mov	r2, r3
 80021fe:	4603      	mov	r3, r0
 8002200:	817b      	strh	r3, [r7, #10]
 8002202:	460b      	mov	r3, r1
 8002204:	813b      	strh	r3, [r7, #8]
 8002206:	4613      	mov	r3, r2
 8002208:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b20      	cmp	r3, #32
 8002214:	f040 80fd 	bne.w	8002412 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002218:	6a3b      	ldr	r3, [r7, #32]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d002      	beq.n	8002224 <HAL_I2C_Mem_Read+0x34>
 800221e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002220:	2b00      	cmp	r3, #0
 8002222:	d105      	bne.n	8002230 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800222a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e0f1      	b.n	8002414 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002236:	2b01      	cmp	r3, #1
 8002238:	d101      	bne.n	800223e <HAL_I2C_Mem_Read+0x4e>
 800223a:	2302      	movs	r3, #2
 800223c:	e0ea      	b.n	8002414 <HAL_I2C_Mem_Read+0x224>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002246:	f7ff f935 	bl	80014b4 <HAL_GetTick>
 800224a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	9300      	str	r3, [sp, #0]
 8002250:	2319      	movs	r3, #25
 8002252:	2201      	movs	r2, #1
 8002254:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002258:	68f8      	ldr	r0, [r7, #12]
 800225a:	f000 f95b 	bl	8002514 <I2C_WaitOnFlagUntilTimeout>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e0d5      	b.n	8002414 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2222      	movs	r2, #34	@ 0x22
 800226c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2240      	movs	r2, #64	@ 0x40
 8002274:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2200      	movs	r2, #0
 800227c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6a3a      	ldr	r2, [r7, #32]
 8002282:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002288:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2200      	movs	r2, #0
 800228e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002290:	88f8      	ldrh	r0, [r7, #6]
 8002292:	893a      	ldrh	r2, [r7, #8]
 8002294:	8979      	ldrh	r1, [r7, #10]
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	9301      	str	r3, [sp, #4]
 800229a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800229c:	9300      	str	r3, [sp, #0]
 800229e:	4603      	mov	r3, r0
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	f000 f8bf 	bl	8002424 <I2C_RequestMemoryRead>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d005      	beq.n	80022b8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e0ad      	b.n	8002414 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022bc:	b29b      	uxth	r3, r3
 80022be:	2bff      	cmp	r3, #255	@ 0xff
 80022c0:	d90e      	bls.n	80022e0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2201      	movs	r2, #1
 80022c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	8979      	ldrh	r1, [r7, #10]
 80022d0:	4b52      	ldr	r3, [pc, #328]	@ (800241c <HAL_I2C_Mem_Read+0x22c>)
 80022d2:	9300      	str	r3, [sp, #0]
 80022d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f000 fadf 	bl	800289c <I2C_TransferConfig>
 80022de:	e00f      	b.n	8002300 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022ee:	b2da      	uxtb	r2, r3
 80022f0:	8979      	ldrh	r1, [r7, #10]
 80022f2:	4b4a      	ldr	r3, [pc, #296]	@ (800241c <HAL_I2C_Mem_Read+0x22c>)
 80022f4:	9300      	str	r3, [sp, #0]
 80022f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f000 face 	bl	800289c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	9300      	str	r3, [sp, #0]
 8002304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002306:	2200      	movs	r2, #0
 8002308:	2104      	movs	r1, #4
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f000 f902 	bl	8002514 <I2C_WaitOnFlagUntilTimeout>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e07c      	b.n	8002414 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002324:	b2d2      	uxtb	r2, r2
 8002326:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800232c:	1c5a      	adds	r2, r3, #1
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002336:	3b01      	subs	r3, #1
 8002338:	b29a      	uxth	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002342:	b29b      	uxth	r3, r3
 8002344:	3b01      	subs	r3, #1
 8002346:	b29a      	uxth	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002350:	b29b      	uxth	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d034      	beq.n	80023c0 <HAL_I2C_Mem_Read+0x1d0>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800235a:	2b00      	cmp	r3, #0
 800235c:	d130      	bne.n	80023c0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002364:	2200      	movs	r2, #0
 8002366:	2180      	movs	r1, #128	@ 0x80
 8002368:	68f8      	ldr	r0, [r7, #12]
 800236a:	f000 f8d3 	bl	8002514 <I2C_WaitOnFlagUntilTimeout>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e04d      	b.n	8002414 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800237c:	b29b      	uxth	r3, r3
 800237e:	2bff      	cmp	r3, #255	@ 0xff
 8002380:	d90e      	bls.n	80023a0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2201      	movs	r2, #1
 8002386:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800238c:	b2da      	uxtb	r2, r3
 800238e:	8979      	ldrh	r1, [r7, #10]
 8002390:	2300      	movs	r3, #0
 8002392:	9300      	str	r3, [sp, #0]
 8002394:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002398:	68f8      	ldr	r0, [r7, #12]
 800239a:	f000 fa7f 	bl	800289c <I2C_TransferConfig>
 800239e:	e00f      	b.n	80023c0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	8979      	ldrh	r1, [r7, #10]
 80023b2:	2300      	movs	r3, #0
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	f000 fa6e 	bl	800289c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d19a      	bne.n	8002300 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	f000 f940 	bl	8002654 <I2C_WaitOnSTOPFlagUntilTimeout>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e01a      	b.n	8002414 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2220      	movs	r2, #32
 80023e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6859      	ldr	r1, [r3, #4]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002420 <HAL_I2C_Mem_Read+0x230>)
 80023f2:	400b      	ands	r3, r1
 80023f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2220      	movs	r2, #32
 80023fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800240e:	2300      	movs	r3, #0
 8002410:	e000      	b.n	8002414 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002412:	2302      	movs	r3, #2
  }
}
 8002414:	4618      	mov	r0, r3
 8002416:	3718      	adds	r7, #24
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	80002400 	.word	0x80002400
 8002420:	fe00e800 	.word	0xfe00e800

08002424 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af02      	add	r7, sp, #8
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	4608      	mov	r0, r1
 800242e:	4611      	mov	r1, r2
 8002430:	461a      	mov	r2, r3
 8002432:	4603      	mov	r3, r0
 8002434:	817b      	strh	r3, [r7, #10]
 8002436:	460b      	mov	r3, r1
 8002438:	813b      	strh	r3, [r7, #8]
 800243a:	4613      	mov	r3, r2
 800243c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800243e:	88fb      	ldrh	r3, [r7, #6]
 8002440:	b2da      	uxtb	r2, r3
 8002442:	8979      	ldrh	r1, [r7, #10]
 8002444:	4b20      	ldr	r3, [pc, #128]	@ (80024c8 <I2C_RequestMemoryRead+0xa4>)
 8002446:	9300      	str	r3, [sp, #0]
 8002448:	2300      	movs	r3, #0
 800244a:	68f8      	ldr	r0, [r7, #12]
 800244c:	f000 fa26 	bl	800289c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002450:	69fa      	ldr	r2, [r7, #28]
 8002452:	69b9      	ldr	r1, [r7, #24]
 8002454:	68f8      	ldr	r0, [r7, #12]
 8002456:	f000 f8b6 	bl	80025c6 <I2C_WaitOnTXISFlagUntilTimeout>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e02c      	b.n	80024be <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002464:	88fb      	ldrh	r3, [r7, #6]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d105      	bne.n	8002476 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800246a:	893b      	ldrh	r3, [r7, #8]
 800246c:	b2da      	uxtb	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	629a      	str	r2, [r3, #40]	@ 0x28
 8002474:	e015      	b.n	80024a2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002476:	893b      	ldrh	r3, [r7, #8]
 8002478:	0a1b      	lsrs	r3, r3, #8
 800247a:	b29b      	uxth	r3, r3
 800247c:	b2da      	uxtb	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002484:	69fa      	ldr	r2, [r7, #28]
 8002486:	69b9      	ldr	r1, [r7, #24]
 8002488:	68f8      	ldr	r0, [r7, #12]
 800248a:	f000 f89c 	bl	80025c6 <I2C_WaitOnTXISFlagUntilTimeout>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e012      	b.n	80024be <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002498:	893b      	ldrh	r3, [r7, #8]
 800249a:	b2da      	uxtb	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	9300      	str	r3, [sp, #0]
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	2200      	movs	r2, #0
 80024aa:	2140      	movs	r1, #64	@ 0x40
 80024ac:	68f8      	ldr	r0, [r7, #12]
 80024ae:	f000 f831 	bl	8002514 <I2C_WaitOnFlagUntilTimeout>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e000      	b.n	80024be <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	80002000 	.word	0x80002000

080024cc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d103      	bne.n	80024ea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2200      	movs	r2, #0
 80024e8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	f003 0301 	and.w	r3, r3, #1
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d007      	beq.n	8002508 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	699a      	ldr	r2, [r3, #24]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f042 0201 	orr.w	r2, r2, #1
 8002506:	619a      	str	r2, [r3, #24]
  }
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	603b      	str	r3, [r7, #0]
 8002520:	4613      	mov	r3, r2
 8002522:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002524:	e03b      	b.n	800259e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	6839      	ldr	r1, [r7, #0]
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f000 f8d6 	bl	80026dc <I2C_IsErrorOccurred>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e041      	b.n	80025be <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002540:	d02d      	beq.n	800259e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002542:	f7fe ffb7 	bl	80014b4 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	429a      	cmp	r2, r3
 8002550:	d302      	bcc.n	8002558 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d122      	bne.n	800259e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	699a      	ldr	r2, [r3, #24]
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	4013      	ands	r3, r2
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	429a      	cmp	r2, r3
 8002566:	bf0c      	ite	eq
 8002568:	2301      	moveq	r3, #1
 800256a:	2300      	movne	r3, #0
 800256c:	b2db      	uxtb	r3, r3
 800256e:	461a      	mov	r2, r3
 8002570:	79fb      	ldrb	r3, [r7, #7]
 8002572:	429a      	cmp	r2, r3
 8002574:	d113      	bne.n	800259e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800257a:	f043 0220 	orr.w	r2, r3, #32
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2220      	movs	r2, #32
 8002586:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e00f      	b.n	80025be <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	699a      	ldr	r2, [r3, #24]
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	4013      	ands	r3, r2
 80025a8:	68ba      	ldr	r2, [r7, #8]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	bf0c      	ite	eq
 80025ae:	2301      	moveq	r3, #1
 80025b0:	2300      	movne	r3, #0
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	461a      	mov	r2, r3
 80025b6:	79fb      	ldrb	r3, [r7, #7]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d0b4      	beq.n	8002526 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b084      	sub	sp, #16
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	60f8      	str	r0, [r7, #12]
 80025ce:	60b9      	str	r1, [r7, #8]
 80025d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80025d2:	e033      	b.n	800263c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	68b9      	ldr	r1, [r7, #8]
 80025d8:	68f8      	ldr	r0, [r7, #12]
 80025da:	f000 f87f 	bl	80026dc <I2C_IsErrorOccurred>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e031      	b.n	800264c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ee:	d025      	beq.n	800263c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025f0:	f7fe ff60 	bl	80014b4 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	68ba      	ldr	r2, [r7, #8]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d302      	bcc.n	8002606 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d11a      	bne.n	800263c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b02      	cmp	r3, #2
 8002612:	d013      	beq.n	800263c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002618:	f043 0220 	orr.w	r2, r3, #32
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2220      	movs	r2, #32
 8002624:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e007      	b.n	800264c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b02      	cmp	r3, #2
 8002648:	d1c4      	bne.n	80025d4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	3710      	adds	r7, #16
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002660:	e02f      	b.n	80026c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	68b9      	ldr	r1, [r7, #8]
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	f000 f838 	bl	80026dc <I2C_IsErrorOccurred>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e02d      	b.n	80026d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002676:	f7fe ff1d 	bl	80014b4 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	68ba      	ldr	r2, [r7, #8]
 8002682:	429a      	cmp	r2, r3
 8002684:	d302      	bcc.n	800268c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d11a      	bne.n	80026c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	f003 0320 	and.w	r3, r3, #32
 8002696:	2b20      	cmp	r3, #32
 8002698:	d013      	beq.n	80026c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800269e:	f043 0220 	orr.w	r2, r3, #32
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2220      	movs	r2, #32
 80026aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e007      	b.n	80026d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	f003 0320 	and.w	r3, r3, #32
 80026cc:	2b20      	cmp	r3, #32
 80026ce:	d1c8      	bne.n	8002662 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
	...

080026dc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b08a      	sub	sp, #40	@ 0x28
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026e8:	2300      	movs	r3, #0
 80026ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80026f6:	2300      	movs	r3, #0
 80026f8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	f003 0310 	and.w	r3, r3, #16
 8002704:	2b00      	cmp	r3, #0
 8002706:	d068      	beq.n	80027da <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2210      	movs	r2, #16
 800270e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002710:	e049      	b.n	80027a6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002718:	d045      	beq.n	80027a6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800271a:	f7fe fecb 	bl	80014b4 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	68ba      	ldr	r2, [r7, #8]
 8002726:	429a      	cmp	r2, r3
 8002728:	d302      	bcc.n	8002730 <I2C_IsErrorOccurred+0x54>
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d13a      	bne.n	80027a6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800273a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002742:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800274e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002752:	d121      	bne.n	8002798 <I2C_IsErrorOccurred+0xbc>
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800275a:	d01d      	beq.n	8002798 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800275c:	7cfb      	ldrb	r3, [r7, #19]
 800275e:	2b20      	cmp	r3, #32
 8002760:	d01a      	beq.n	8002798 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	685a      	ldr	r2, [r3, #4]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002770:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002772:	f7fe fe9f 	bl	80014b4 <HAL_GetTick>
 8002776:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002778:	e00e      	b.n	8002798 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800277a:	f7fe fe9b 	bl	80014b4 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b19      	cmp	r3, #25
 8002786:	d907      	bls.n	8002798 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002788:	6a3b      	ldr	r3, [r7, #32]
 800278a:	f043 0320 	orr.w	r3, r3, #32
 800278e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002796:	e006      	b.n	80027a6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	f003 0320 	and.w	r3, r3, #32
 80027a2:	2b20      	cmp	r3, #32
 80027a4:	d1e9      	bne.n	800277a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	f003 0320 	and.w	r3, r3, #32
 80027b0:	2b20      	cmp	r3, #32
 80027b2:	d003      	beq.n	80027bc <I2C_IsErrorOccurred+0xe0>
 80027b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d0aa      	beq.n	8002712 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80027bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d103      	bne.n	80027cc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2220      	movs	r2, #32
 80027ca:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80027cc:	6a3b      	ldr	r3, [r7, #32]
 80027ce:	f043 0304 	orr.w	r3, r3, #4
 80027d2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d00b      	beq.n	8002804 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	f043 0301 	orr.w	r3, r3, #1
 80027f2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00b      	beq.n	8002826 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800280e:	6a3b      	ldr	r3, [r7, #32]
 8002810:	f043 0308 	orr.w	r3, r3, #8
 8002814:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800281e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800282c:	2b00      	cmp	r3, #0
 800282e:	d00b      	beq.n	8002848 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002830:	6a3b      	ldr	r3, [r7, #32]
 8002832:	f043 0302 	orr.w	r3, r3, #2
 8002836:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002840:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002848:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800284c:	2b00      	cmp	r3, #0
 800284e:	d01c      	beq.n	800288a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002850:	68f8      	ldr	r0, [r7, #12]
 8002852:	f7ff fe3b 	bl	80024cc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6859      	ldr	r1, [r3, #4]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	4b0d      	ldr	r3, [pc, #52]	@ (8002898 <I2C_IsErrorOccurred+0x1bc>)
 8002862:	400b      	ands	r3, r1
 8002864:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800286a:	6a3b      	ldr	r3, [r7, #32]
 800286c:	431a      	orrs	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2220      	movs	r2, #32
 8002876:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800288a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800288e:	4618      	mov	r0, r3
 8002890:	3728      	adds	r7, #40	@ 0x28
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	fe00e800 	.word	0xfe00e800

0800289c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800289c:	b480      	push	{r7}
 800289e:	b087      	sub	sp, #28
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	607b      	str	r3, [r7, #4]
 80028a6:	460b      	mov	r3, r1
 80028a8:	817b      	strh	r3, [r7, #10]
 80028aa:	4613      	mov	r3, r2
 80028ac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028ae:	897b      	ldrh	r3, [r7, #10]
 80028b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80028b4:	7a7b      	ldrb	r3, [r7, #9]
 80028b6:	041b      	lsls	r3, r3, #16
 80028b8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028bc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028c2:	6a3b      	ldr	r3, [r7, #32]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80028ca:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	685a      	ldr	r2, [r3, #4]
 80028d2:	6a3b      	ldr	r3, [r7, #32]
 80028d4:	0d5b      	lsrs	r3, r3, #21
 80028d6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80028da:	4b08      	ldr	r3, [pc, #32]	@ (80028fc <I2C_TransferConfig+0x60>)
 80028dc:	430b      	orrs	r3, r1
 80028de:	43db      	mvns	r3, r3
 80028e0:	ea02 0103 	and.w	r1, r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	697a      	ldr	r2, [r7, #20]
 80028ea:	430a      	orrs	r2, r1
 80028ec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80028ee:	bf00      	nop
 80028f0:	371c      	adds	r7, #28
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	03ff63ff 	.word	0x03ff63ff

08002900 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b20      	cmp	r3, #32
 8002914:	d138      	bne.n	8002988 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800291c:	2b01      	cmp	r3, #1
 800291e:	d101      	bne.n	8002924 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002920:	2302      	movs	r3, #2
 8002922:	e032      	b.n	800298a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2224      	movs	r2, #36	@ 0x24
 8002930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f022 0201 	bic.w	r2, r2, #1
 8002942:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002952:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6819      	ldr	r1, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	430a      	orrs	r2, r1
 8002962:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f042 0201 	orr.w	r2, r2, #1
 8002972:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2220      	movs	r2, #32
 8002978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002984:	2300      	movs	r3, #0
 8002986:	e000      	b.n	800298a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002988:	2302      	movs	r3, #2
  }
}
 800298a:	4618      	mov	r0, r3
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002996:	b480      	push	{r7}
 8002998:	b085      	sub	sp, #20
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
 800299e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	2b20      	cmp	r3, #32
 80029aa:	d139      	bne.n	8002a20 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d101      	bne.n	80029ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80029b6:	2302      	movs	r3, #2
 80029b8:	e033      	b.n	8002a22 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2224      	movs	r2, #36	@ 0x24
 80029c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 0201 	bic.w	r2, r2, #1
 80029d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80029e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	021b      	lsls	r3, r3, #8
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f042 0201 	orr.w	r2, r2, #1
 8002a0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2220      	movs	r2, #32
 8002a10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	e000      	b.n	8002a22 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a20:	2302      	movs	r3, #2
  }
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3714      	adds	r7, #20
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
	...

08002a30 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002a34:	4b04      	ldr	r3, [pc, #16]	@ (8002a48 <HAL_PWREx_GetVoltageRange+0x18>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	40007000 	.word	0x40007000

08002a4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a5a:	d130      	bne.n	8002abe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a5c:	4b23      	ldr	r3, [pc, #140]	@ (8002aec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002a64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a68:	d038      	beq.n	8002adc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a6a:	4b20      	ldr	r3, [pc, #128]	@ (8002aec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a72:	4a1e      	ldr	r2, [pc, #120]	@ (8002aec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a74:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a78:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a7a:	4b1d      	ldr	r3, [pc, #116]	@ (8002af0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2232      	movs	r2, #50	@ 0x32
 8002a80:	fb02 f303 	mul.w	r3, r2, r3
 8002a84:	4a1b      	ldr	r2, [pc, #108]	@ (8002af4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002a86:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8a:	0c9b      	lsrs	r3, r3, #18
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a90:	e002      	b.n	8002a98 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	3b01      	subs	r3, #1
 8002a96:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a98:	4b14      	ldr	r3, [pc, #80]	@ (8002aec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a9a:	695b      	ldr	r3, [r3, #20]
 8002a9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aa0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002aa4:	d102      	bne.n	8002aac <HAL_PWREx_ControlVoltageScaling+0x60>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1f2      	bne.n	8002a92 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002aac:	4b0f      	ldr	r3, [pc, #60]	@ (8002aec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002aae:	695b      	ldr	r3, [r3, #20]
 8002ab0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ab4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ab8:	d110      	bne.n	8002adc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e00f      	b.n	8002ade <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002abe:	4b0b      	ldr	r3, [pc, #44]	@ (8002aec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ac6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002aca:	d007      	beq.n	8002adc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002acc:	4b07      	ldr	r3, [pc, #28]	@ (8002aec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ad4:	4a05      	ldr	r2, [pc, #20]	@ (8002aec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ad6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ada:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3714      	adds	r7, #20
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	40007000 	.word	0x40007000
 8002af0:	20000000 	.word	0x20000000
 8002af4:	431bde83 	.word	0x431bde83

08002af8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b088      	sub	sp, #32
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e3ca      	b.n	80032a0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b0a:	4b97      	ldr	r3, [pc, #604]	@ (8002d68 <HAL_RCC_OscConfig+0x270>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 030c 	and.w	r3, r3, #12
 8002b12:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b14:	4b94      	ldr	r3, [pc, #592]	@ (8002d68 <HAL_RCC_OscConfig+0x270>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	f003 0303 	and.w	r3, r3, #3
 8002b1c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0310 	and.w	r3, r3, #16
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f000 80e4 	beq.w	8002cf4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d007      	beq.n	8002b42 <HAL_RCC_OscConfig+0x4a>
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	2b0c      	cmp	r3, #12
 8002b36:	f040 808b 	bne.w	8002c50 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	f040 8087 	bne.w	8002c50 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b42:	4b89      	ldr	r3, [pc, #548]	@ (8002d68 <HAL_RCC_OscConfig+0x270>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d005      	beq.n	8002b5a <HAL_RCC_OscConfig+0x62>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e3a2      	b.n	80032a0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a1a      	ldr	r2, [r3, #32]
 8002b5e:	4b82      	ldr	r3, [pc, #520]	@ (8002d68 <HAL_RCC_OscConfig+0x270>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0308 	and.w	r3, r3, #8
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d004      	beq.n	8002b74 <HAL_RCC_OscConfig+0x7c>
 8002b6a:	4b7f      	ldr	r3, [pc, #508]	@ (8002d68 <HAL_RCC_OscConfig+0x270>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b72:	e005      	b.n	8002b80 <HAL_RCC_OscConfig+0x88>
 8002b74:	4b7c      	ldr	r3, [pc, #496]	@ (8002d68 <HAL_RCC_OscConfig+0x270>)
 8002b76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b7a:	091b      	lsrs	r3, r3, #4
 8002b7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d223      	bcs.n	8002bcc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a1b      	ldr	r3, [r3, #32]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f000 fd55 	bl	8003638 <RCC_SetFlashLatencyFromMSIRange>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e383      	b.n	80032a0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b98:	4b73      	ldr	r3, [pc, #460]	@ (8002d68 <HAL_RCC_OscConfig+0x270>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a72      	ldr	r2, [pc, #456]	@ (8002d68 <HAL_RCC_OscConfig+0x270>)
 8002b9e:	f043 0308 	orr.w	r3, r3, #8
 8002ba2:	6013      	str	r3, [r2, #0]
 8002ba4:	4b70      	ldr	r3, [pc, #448]	@ (8002d68 <HAL_RCC_OscConfig+0x270>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	496d      	ldr	r1, [pc, #436]	@ (8002d68 <HAL_RCC_OscConfig+0x270>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bb6:	4b6c      	ldr	r3, [pc, #432]	@ (8002d68 <HAL_RCC_OscConfig+0x270>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	021b      	lsls	r3, r3, #8
 8002bc4:	4968      	ldr	r1, [pc, #416]	@ (8002d68 <HAL_RCC_OscConfig+0x270>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	604b      	str	r3, [r1, #4]
 8002bca:	e025      	b.n	8002c18 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bcc:	4b66      	ldr	r3, [pc, #408]	@ (8002d68 <HAL_RCC_OscConfig+0x270>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a65      	ldr	r2, [pc, #404]	@ (8002d68 <HAL_RCC_OscConfig+0x270>)
 8002bd2:	f043 0308 	orr.w	r3, r3, #8
 8002bd6:	6013      	str	r3, [r2, #0]
 8002bd8:	4b63      	ldr	r3, [pc, #396]	@ (8002d68 <HAL_RCC_OscConfig+0x270>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a1b      	ldr	r3, [r3, #32]
 8002be4:	4960      	ldr	r1, [pc, #384]	@ (8002d68 <HAL_RCC_OscConfig+0x270>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bea:	4b5f      	ldr	r3, [pc, #380]	@ (8002d68 <HAL_RCC_OscConfig+0x270>)
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	69db      	ldr	r3, [r3, #28]
 8002bf6:	021b      	lsls	r3, r3, #8
 8002bf8:	495b      	ldr	r1, [pc, #364]	@ (8002d68 <HAL_RCC_OscConfig+0x270>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d109      	bne.n	8002c18 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a1b      	ldr	r3, [r3, #32]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f000 fd15 	bl	8003638 <RCC_SetFlashLatencyFromMSIRange>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d001      	beq.n	8002c18 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e343      	b.n	80032a0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c18:	f000 fc4a 	bl	80034b0 <HAL_RCC_GetSysClockFreq>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	4b52      	ldr	r3, [pc, #328]	@ (8002d68 <HAL_RCC_OscConfig+0x270>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	091b      	lsrs	r3, r3, #4
 8002c24:	f003 030f 	and.w	r3, r3, #15
 8002c28:	4950      	ldr	r1, [pc, #320]	@ (8002d6c <HAL_RCC_OscConfig+0x274>)
 8002c2a:	5ccb      	ldrb	r3, [r1, r3]
 8002c2c:	f003 031f 	and.w	r3, r3, #31
 8002c30:	fa22 f303 	lsr.w	r3, r2, r3
 8002c34:	4a4e      	ldr	r2, [pc, #312]	@ (8002d70 <HAL_RCC_OscConfig+0x278>)
 8002c36:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002c38:	4b4e      	ldr	r3, [pc, #312]	@ (8002d74 <HAL_RCC_OscConfig+0x27c>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7fe fbe9 	bl	8001414 <HAL_InitTick>
 8002c42:	4603      	mov	r3, r0
 8002c44:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002c46:	7bfb      	ldrb	r3, [r7, #15]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d052      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
 8002c4e:	e327      	b.n	80032a0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d032      	beq.n	8002cbe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c58:	4b43      	ldr	r3, [pc, #268]	@ (8002d68 <HAL_RCC_OscConfig+0x270>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a42      	ldr	r2, [pc, #264]	@ (8002d68 <HAL_RCC_OscConfig+0x270>)
 8002c5e:	f043 0301 	orr.w	r3, r3, #1
 8002c62:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c64:	f7fe fc26 	bl	80014b4 <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c6c:	f7fe fc22 	bl	80014b4 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e310      	b.n	80032a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c7e:	4b3a      	ldr	r3, [pc, #232]	@ (8002d68 <HAL_RCC_OscConfig+0x270>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d0f0      	beq.n	8002c6c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c8a:	4b37      	ldr	r3, [pc, #220]	@ (8002d68 <HAL_RCC_OscConfig+0x270>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a36      	ldr	r2, [pc, #216]	@ (8002d68 <HAL_RCC_OscConfig+0x270>)
 8002c90:	f043 0308 	orr.w	r3, r3, #8
 8002c94:	6013      	str	r3, [r2, #0]
 8002c96:	4b34      	ldr	r3, [pc, #208]	@ (8002d68 <HAL_RCC_OscConfig+0x270>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	4931      	ldr	r1, [pc, #196]	@ (8002d68 <HAL_RCC_OscConfig+0x270>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ca8:	4b2f      	ldr	r3, [pc, #188]	@ (8002d68 <HAL_RCC_OscConfig+0x270>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	69db      	ldr	r3, [r3, #28]
 8002cb4:	021b      	lsls	r3, r3, #8
 8002cb6:	492c      	ldr	r1, [pc, #176]	@ (8002d68 <HAL_RCC_OscConfig+0x270>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	604b      	str	r3, [r1, #4]
 8002cbc:	e01a      	b.n	8002cf4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002cbe:	4b2a      	ldr	r3, [pc, #168]	@ (8002d68 <HAL_RCC_OscConfig+0x270>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a29      	ldr	r2, [pc, #164]	@ (8002d68 <HAL_RCC_OscConfig+0x270>)
 8002cc4:	f023 0301 	bic.w	r3, r3, #1
 8002cc8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002cca:	f7fe fbf3 	bl	80014b4 <HAL_GetTick>
 8002cce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002cd0:	e008      	b.n	8002ce4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002cd2:	f7fe fbef 	bl	80014b4 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e2dd      	b.n	80032a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ce4:	4b20      	ldr	r3, [pc, #128]	@ (8002d68 <HAL_RCC_OscConfig+0x270>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1f0      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x1da>
 8002cf0:	e000      	b.n	8002cf4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cf2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d074      	beq.n	8002dea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	2b08      	cmp	r3, #8
 8002d04:	d005      	beq.n	8002d12 <HAL_RCC_OscConfig+0x21a>
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	2b0c      	cmp	r3, #12
 8002d0a:	d10e      	bne.n	8002d2a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	2b03      	cmp	r3, #3
 8002d10:	d10b      	bne.n	8002d2a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d12:	4b15      	ldr	r3, [pc, #84]	@ (8002d68 <HAL_RCC_OscConfig+0x270>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d064      	beq.n	8002de8 <HAL_RCC_OscConfig+0x2f0>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d160      	bne.n	8002de8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e2ba      	b.n	80032a0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d32:	d106      	bne.n	8002d42 <HAL_RCC_OscConfig+0x24a>
 8002d34:	4b0c      	ldr	r3, [pc, #48]	@ (8002d68 <HAL_RCC_OscConfig+0x270>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a0b      	ldr	r2, [pc, #44]	@ (8002d68 <HAL_RCC_OscConfig+0x270>)
 8002d3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d3e:	6013      	str	r3, [r2, #0]
 8002d40:	e026      	b.n	8002d90 <HAL_RCC_OscConfig+0x298>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d4a:	d115      	bne.n	8002d78 <HAL_RCC_OscConfig+0x280>
 8002d4c:	4b06      	ldr	r3, [pc, #24]	@ (8002d68 <HAL_RCC_OscConfig+0x270>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a05      	ldr	r2, [pc, #20]	@ (8002d68 <HAL_RCC_OscConfig+0x270>)
 8002d52:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d56:	6013      	str	r3, [r2, #0]
 8002d58:	4b03      	ldr	r3, [pc, #12]	@ (8002d68 <HAL_RCC_OscConfig+0x270>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a02      	ldr	r2, [pc, #8]	@ (8002d68 <HAL_RCC_OscConfig+0x270>)
 8002d5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d62:	6013      	str	r3, [r2, #0]
 8002d64:	e014      	b.n	8002d90 <HAL_RCC_OscConfig+0x298>
 8002d66:	bf00      	nop
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	080079b0 	.word	0x080079b0
 8002d70:	20000000 	.word	0x20000000
 8002d74:	20000004 	.word	0x20000004
 8002d78:	4ba0      	ldr	r3, [pc, #640]	@ (8002ffc <HAL_RCC_OscConfig+0x504>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a9f      	ldr	r2, [pc, #636]	@ (8002ffc <HAL_RCC_OscConfig+0x504>)
 8002d7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d82:	6013      	str	r3, [r2, #0]
 8002d84:	4b9d      	ldr	r3, [pc, #628]	@ (8002ffc <HAL_RCC_OscConfig+0x504>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a9c      	ldr	r2, [pc, #624]	@ (8002ffc <HAL_RCC_OscConfig+0x504>)
 8002d8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d013      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d98:	f7fe fb8c 	bl	80014b4 <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002da0:	f7fe fb88 	bl	80014b4 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b64      	cmp	r3, #100	@ 0x64
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e276      	b.n	80032a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002db2:	4b92      	ldr	r3, [pc, #584]	@ (8002ffc <HAL_RCC_OscConfig+0x504>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d0f0      	beq.n	8002da0 <HAL_RCC_OscConfig+0x2a8>
 8002dbe:	e014      	b.n	8002dea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc0:	f7fe fb78 	bl	80014b4 <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dc8:	f7fe fb74 	bl	80014b4 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b64      	cmp	r3, #100	@ 0x64
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e262      	b.n	80032a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dda:	4b88      	ldr	r3, [pc, #544]	@ (8002ffc <HAL_RCC_OscConfig+0x504>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1f0      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x2d0>
 8002de6:	e000      	b.n	8002dea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002de8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d060      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	2b04      	cmp	r3, #4
 8002dfa:	d005      	beq.n	8002e08 <HAL_RCC_OscConfig+0x310>
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	2b0c      	cmp	r3, #12
 8002e00:	d119      	bne.n	8002e36 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d116      	bne.n	8002e36 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e08:	4b7c      	ldr	r3, [pc, #496]	@ (8002ffc <HAL_RCC_OscConfig+0x504>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d005      	beq.n	8002e20 <HAL_RCC_OscConfig+0x328>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d101      	bne.n	8002e20 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e23f      	b.n	80032a0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e20:	4b76      	ldr	r3, [pc, #472]	@ (8002ffc <HAL_RCC_OscConfig+0x504>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	061b      	lsls	r3, r3, #24
 8002e2e:	4973      	ldr	r1, [pc, #460]	@ (8002ffc <HAL_RCC_OscConfig+0x504>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e34:	e040      	b.n	8002eb8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d023      	beq.n	8002e86 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e3e:	4b6f      	ldr	r3, [pc, #444]	@ (8002ffc <HAL_RCC_OscConfig+0x504>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a6e      	ldr	r2, [pc, #440]	@ (8002ffc <HAL_RCC_OscConfig+0x504>)
 8002e44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e4a:	f7fe fb33 	bl	80014b4 <HAL_GetTick>
 8002e4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e50:	e008      	b.n	8002e64 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e52:	f7fe fb2f 	bl	80014b4 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e21d      	b.n	80032a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e64:	4b65      	ldr	r3, [pc, #404]	@ (8002ffc <HAL_RCC_OscConfig+0x504>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d0f0      	beq.n	8002e52 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e70:	4b62      	ldr	r3, [pc, #392]	@ (8002ffc <HAL_RCC_OscConfig+0x504>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	061b      	lsls	r3, r3, #24
 8002e7e:	495f      	ldr	r1, [pc, #380]	@ (8002ffc <HAL_RCC_OscConfig+0x504>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	604b      	str	r3, [r1, #4]
 8002e84:	e018      	b.n	8002eb8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e86:	4b5d      	ldr	r3, [pc, #372]	@ (8002ffc <HAL_RCC_OscConfig+0x504>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a5c      	ldr	r2, [pc, #368]	@ (8002ffc <HAL_RCC_OscConfig+0x504>)
 8002e8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e92:	f7fe fb0f 	bl	80014b4 <HAL_GetTick>
 8002e96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e98:	e008      	b.n	8002eac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e9a:	f7fe fb0b 	bl	80014b4 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d901      	bls.n	8002eac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e1f9      	b.n	80032a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002eac:	4b53      	ldr	r3, [pc, #332]	@ (8002ffc <HAL_RCC_OscConfig+0x504>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1f0      	bne.n	8002e9a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0308 	and.w	r3, r3, #8
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d03c      	beq.n	8002f3e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	695b      	ldr	r3, [r3, #20]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d01c      	beq.n	8002f06 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ecc:	4b4b      	ldr	r3, [pc, #300]	@ (8002ffc <HAL_RCC_OscConfig+0x504>)
 8002ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ed2:	4a4a      	ldr	r2, [pc, #296]	@ (8002ffc <HAL_RCC_OscConfig+0x504>)
 8002ed4:	f043 0301 	orr.w	r3, r3, #1
 8002ed8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002edc:	f7fe faea 	bl	80014b4 <HAL_GetTick>
 8002ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ee4:	f7fe fae6 	bl	80014b4 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e1d4      	b.n	80032a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ef6:	4b41      	ldr	r3, [pc, #260]	@ (8002ffc <HAL_RCC_OscConfig+0x504>)
 8002ef8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d0ef      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x3ec>
 8002f04:	e01b      	b.n	8002f3e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f06:	4b3d      	ldr	r3, [pc, #244]	@ (8002ffc <HAL_RCC_OscConfig+0x504>)
 8002f08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f0c:	4a3b      	ldr	r2, [pc, #236]	@ (8002ffc <HAL_RCC_OscConfig+0x504>)
 8002f0e:	f023 0301 	bic.w	r3, r3, #1
 8002f12:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f16:	f7fe facd 	bl	80014b4 <HAL_GetTick>
 8002f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f1c:	e008      	b.n	8002f30 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f1e:	f7fe fac9 	bl	80014b4 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d901      	bls.n	8002f30 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e1b7      	b.n	80032a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f30:	4b32      	ldr	r3, [pc, #200]	@ (8002ffc <HAL_RCC_OscConfig+0x504>)
 8002f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1ef      	bne.n	8002f1e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0304 	and.w	r3, r3, #4
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f000 80a6 	beq.w	8003098 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002f50:	4b2a      	ldr	r3, [pc, #168]	@ (8002ffc <HAL_RCC_OscConfig+0x504>)
 8002f52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d10d      	bne.n	8002f78 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f5c:	4b27      	ldr	r3, [pc, #156]	@ (8002ffc <HAL_RCC_OscConfig+0x504>)
 8002f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f60:	4a26      	ldr	r2, [pc, #152]	@ (8002ffc <HAL_RCC_OscConfig+0x504>)
 8002f62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f66:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f68:	4b24      	ldr	r3, [pc, #144]	@ (8002ffc <HAL_RCC_OscConfig+0x504>)
 8002f6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f70:	60bb      	str	r3, [r7, #8]
 8002f72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f74:	2301      	movs	r3, #1
 8002f76:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f78:	4b21      	ldr	r3, [pc, #132]	@ (8003000 <HAL_RCC_OscConfig+0x508>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d118      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f84:	4b1e      	ldr	r3, [pc, #120]	@ (8003000 <HAL_RCC_OscConfig+0x508>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a1d      	ldr	r2, [pc, #116]	@ (8003000 <HAL_RCC_OscConfig+0x508>)
 8002f8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f90:	f7fe fa90 	bl	80014b4 <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f96:	e008      	b.n	8002faa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f98:	f7fe fa8c 	bl	80014b4 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e17a      	b.n	80032a0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002faa:	4b15      	ldr	r3, [pc, #84]	@ (8003000 <HAL_RCC_OscConfig+0x508>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d0f0      	beq.n	8002f98 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d108      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x4d8>
 8002fbe:	4b0f      	ldr	r3, [pc, #60]	@ (8002ffc <HAL_RCC_OscConfig+0x504>)
 8002fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fc4:	4a0d      	ldr	r2, [pc, #52]	@ (8002ffc <HAL_RCC_OscConfig+0x504>)
 8002fc6:	f043 0301 	orr.w	r3, r3, #1
 8002fca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002fce:	e029      	b.n	8003024 <HAL_RCC_OscConfig+0x52c>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	2b05      	cmp	r3, #5
 8002fd6:	d115      	bne.n	8003004 <HAL_RCC_OscConfig+0x50c>
 8002fd8:	4b08      	ldr	r3, [pc, #32]	@ (8002ffc <HAL_RCC_OscConfig+0x504>)
 8002fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fde:	4a07      	ldr	r2, [pc, #28]	@ (8002ffc <HAL_RCC_OscConfig+0x504>)
 8002fe0:	f043 0304 	orr.w	r3, r3, #4
 8002fe4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002fe8:	4b04      	ldr	r3, [pc, #16]	@ (8002ffc <HAL_RCC_OscConfig+0x504>)
 8002fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fee:	4a03      	ldr	r2, [pc, #12]	@ (8002ffc <HAL_RCC_OscConfig+0x504>)
 8002ff0:	f043 0301 	orr.w	r3, r3, #1
 8002ff4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ff8:	e014      	b.n	8003024 <HAL_RCC_OscConfig+0x52c>
 8002ffa:	bf00      	nop
 8002ffc:	40021000 	.word	0x40021000
 8003000:	40007000 	.word	0x40007000
 8003004:	4b9c      	ldr	r3, [pc, #624]	@ (8003278 <HAL_RCC_OscConfig+0x780>)
 8003006:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800300a:	4a9b      	ldr	r2, [pc, #620]	@ (8003278 <HAL_RCC_OscConfig+0x780>)
 800300c:	f023 0301 	bic.w	r3, r3, #1
 8003010:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003014:	4b98      	ldr	r3, [pc, #608]	@ (8003278 <HAL_RCC_OscConfig+0x780>)
 8003016:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800301a:	4a97      	ldr	r2, [pc, #604]	@ (8003278 <HAL_RCC_OscConfig+0x780>)
 800301c:	f023 0304 	bic.w	r3, r3, #4
 8003020:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d016      	beq.n	800305a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800302c:	f7fe fa42 	bl	80014b4 <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003032:	e00a      	b.n	800304a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003034:	f7fe fa3e 	bl	80014b4 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003042:	4293      	cmp	r3, r2
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e12a      	b.n	80032a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800304a:	4b8b      	ldr	r3, [pc, #556]	@ (8003278 <HAL_RCC_OscConfig+0x780>)
 800304c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003050:	f003 0302 	and.w	r3, r3, #2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d0ed      	beq.n	8003034 <HAL_RCC_OscConfig+0x53c>
 8003058:	e015      	b.n	8003086 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800305a:	f7fe fa2b 	bl	80014b4 <HAL_GetTick>
 800305e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003060:	e00a      	b.n	8003078 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003062:	f7fe fa27 	bl	80014b4 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003070:	4293      	cmp	r3, r2
 8003072:	d901      	bls.n	8003078 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e113      	b.n	80032a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003078:	4b7f      	ldr	r3, [pc, #508]	@ (8003278 <HAL_RCC_OscConfig+0x780>)
 800307a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1ed      	bne.n	8003062 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003086:	7ffb      	ldrb	r3, [r7, #31]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d105      	bne.n	8003098 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800308c:	4b7a      	ldr	r3, [pc, #488]	@ (8003278 <HAL_RCC_OscConfig+0x780>)
 800308e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003090:	4a79      	ldr	r2, [pc, #484]	@ (8003278 <HAL_RCC_OscConfig+0x780>)
 8003092:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003096:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 80fe 	beq.w	800329e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	f040 80d0 	bne.w	800324c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80030ac:	4b72      	ldr	r3, [pc, #456]	@ (8003278 <HAL_RCC_OscConfig+0x780>)
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	f003 0203 	and.w	r2, r3, #3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030bc:	429a      	cmp	r2, r3
 80030be:	d130      	bne.n	8003122 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ca:	3b01      	subs	r3, #1
 80030cc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d127      	bne.n	8003122 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030dc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030de:	429a      	cmp	r2, r3
 80030e0:	d11f      	bne.n	8003122 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80030ec:	2a07      	cmp	r2, #7
 80030ee:	bf14      	ite	ne
 80030f0:	2201      	movne	r2, #1
 80030f2:	2200      	moveq	r2, #0
 80030f4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d113      	bne.n	8003122 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003104:	085b      	lsrs	r3, r3, #1
 8003106:	3b01      	subs	r3, #1
 8003108:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800310a:	429a      	cmp	r2, r3
 800310c:	d109      	bne.n	8003122 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003118:	085b      	lsrs	r3, r3, #1
 800311a:	3b01      	subs	r3, #1
 800311c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800311e:	429a      	cmp	r2, r3
 8003120:	d06e      	beq.n	8003200 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	2b0c      	cmp	r3, #12
 8003126:	d069      	beq.n	80031fc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003128:	4b53      	ldr	r3, [pc, #332]	@ (8003278 <HAL_RCC_OscConfig+0x780>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d105      	bne.n	8003140 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003134:	4b50      	ldr	r3, [pc, #320]	@ (8003278 <HAL_RCC_OscConfig+0x780>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e0ad      	b.n	80032a0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003144:	4b4c      	ldr	r3, [pc, #304]	@ (8003278 <HAL_RCC_OscConfig+0x780>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a4b      	ldr	r2, [pc, #300]	@ (8003278 <HAL_RCC_OscConfig+0x780>)
 800314a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800314e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003150:	f7fe f9b0 	bl	80014b4 <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003156:	e008      	b.n	800316a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003158:	f7fe f9ac 	bl	80014b4 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b02      	cmp	r3, #2
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e09a      	b.n	80032a0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800316a:	4b43      	ldr	r3, [pc, #268]	@ (8003278 <HAL_RCC_OscConfig+0x780>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1f0      	bne.n	8003158 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003176:	4b40      	ldr	r3, [pc, #256]	@ (8003278 <HAL_RCC_OscConfig+0x780>)
 8003178:	68da      	ldr	r2, [r3, #12]
 800317a:	4b40      	ldr	r3, [pc, #256]	@ (800327c <HAL_RCC_OscConfig+0x784>)
 800317c:	4013      	ands	r3, r2
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003186:	3a01      	subs	r2, #1
 8003188:	0112      	lsls	r2, r2, #4
 800318a:	4311      	orrs	r1, r2
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003190:	0212      	lsls	r2, r2, #8
 8003192:	4311      	orrs	r1, r2
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003198:	0852      	lsrs	r2, r2, #1
 800319a:	3a01      	subs	r2, #1
 800319c:	0552      	lsls	r2, r2, #21
 800319e:	4311      	orrs	r1, r2
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80031a4:	0852      	lsrs	r2, r2, #1
 80031a6:	3a01      	subs	r2, #1
 80031a8:	0652      	lsls	r2, r2, #25
 80031aa:	4311      	orrs	r1, r2
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80031b0:	0912      	lsrs	r2, r2, #4
 80031b2:	0452      	lsls	r2, r2, #17
 80031b4:	430a      	orrs	r2, r1
 80031b6:	4930      	ldr	r1, [pc, #192]	@ (8003278 <HAL_RCC_OscConfig+0x780>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80031bc:	4b2e      	ldr	r3, [pc, #184]	@ (8003278 <HAL_RCC_OscConfig+0x780>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a2d      	ldr	r2, [pc, #180]	@ (8003278 <HAL_RCC_OscConfig+0x780>)
 80031c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031c6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031c8:	4b2b      	ldr	r3, [pc, #172]	@ (8003278 <HAL_RCC_OscConfig+0x780>)
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	4a2a      	ldr	r2, [pc, #168]	@ (8003278 <HAL_RCC_OscConfig+0x780>)
 80031ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031d2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80031d4:	f7fe f96e 	bl	80014b4 <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031dc:	f7fe f96a 	bl	80014b4 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e058      	b.n	80032a0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031ee:	4b22      	ldr	r3, [pc, #136]	@ (8003278 <HAL_RCC_OscConfig+0x780>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d0f0      	beq.n	80031dc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031fa:	e050      	b.n	800329e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e04f      	b.n	80032a0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003200:	4b1d      	ldr	r3, [pc, #116]	@ (8003278 <HAL_RCC_OscConfig+0x780>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d148      	bne.n	800329e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800320c:	4b1a      	ldr	r3, [pc, #104]	@ (8003278 <HAL_RCC_OscConfig+0x780>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a19      	ldr	r2, [pc, #100]	@ (8003278 <HAL_RCC_OscConfig+0x780>)
 8003212:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003216:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003218:	4b17      	ldr	r3, [pc, #92]	@ (8003278 <HAL_RCC_OscConfig+0x780>)
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	4a16      	ldr	r2, [pc, #88]	@ (8003278 <HAL_RCC_OscConfig+0x780>)
 800321e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003222:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003224:	f7fe f946 	bl	80014b4 <HAL_GetTick>
 8003228:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800322a:	e008      	b.n	800323e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800322c:	f7fe f942 	bl	80014b4 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b02      	cmp	r3, #2
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e030      	b.n	80032a0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800323e:	4b0e      	ldr	r3, [pc, #56]	@ (8003278 <HAL_RCC_OscConfig+0x780>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d0f0      	beq.n	800322c <HAL_RCC_OscConfig+0x734>
 800324a:	e028      	b.n	800329e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	2b0c      	cmp	r3, #12
 8003250:	d023      	beq.n	800329a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003252:	4b09      	ldr	r3, [pc, #36]	@ (8003278 <HAL_RCC_OscConfig+0x780>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a08      	ldr	r2, [pc, #32]	@ (8003278 <HAL_RCC_OscConfig+0x780>)
 8003258:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800325c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800325e:	f7fe f929 	bl	80014b4 <HAL_GetTick>
 8003262:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003264:	e00c      	b.n	8003280 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003266:	f7fe f925 	bl	80014b4 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	2b02      	cmp	r3, #2
 8003272:	d905      	bls.n	8003280 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e013      	b.n	80032a0 <HAL_RCC_OscConfig+0x7a8>
 8003278:	40021000 	.word	0x40021000
 800327c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003280:	4b09      	ldr	r3, [pc, #36]	@ (80032a8 <HAL_RCC_OscConfig+0x7b0>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1ec      	bne.n	8003266 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800328c:	4b06      	ldr	r3, [pc, #24]	@ (80032a8 <HAL_RCC_OscConfig+0x7b0>)
 800328e:	68da      	ldr	r2, [r3, #12]
 8003290:	4905      	ldr	r1, [pc, #20]	@ (80032a8 <HAL_RCC_OscConfig+0x7b0>)
 8003292:	4b06      	ldr	r3, [pc, #24]	@ (80032ac <HAL_RCC_OscConfig+0x7b4>)
 8003294:	4013      	ands	r3, r2
 8003296:	60cb      	str	r3, [r1, #12]
 8003298:	e001      	b.n	800329e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e000      	b.n	80032a0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3720      	adds	r7, #32
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	40021000 	.word	0x40021000
 80032ac:	feeefffc 	.word	0xfeeefffc

080032b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d101      	bne.n	80032c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e0e7      	b.n	8003494 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032c4:	4b75      	ldr	r3, [pc, #468]	@ (800349c <HAL_RCC_ClockConfig+0x1ec>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0307 	and.w	r3, r3, #7
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d910      	bls.n	80032f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032d2:	4b72      	ldr	r3, [pc, #456]	@ (800349c <HAL_RCC_ClockConfig+0x1ec>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f023 0207 	bic.w	r2, r3, #7
 80032da:	4970      	ldr	r1, [pc, #448]	@ (800349c <HAL_RCC_ClockConfig+0x1ec>)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	4313      	orrs	r3, r2
 80032e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032e2:	4b6e      	ldr	r3, [pc, #440]	@ (800349c <HAL_RCC_ClockConfig+0x1ec>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0307 	and.w	r3, r3, #7
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d001      	beq.n	80032f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e0cf      	b.n	8003494 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d010      	beq.n	8003322 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689a      	ldr	r2, [r3, #8]
 8003304:	4b66      	ldr	r3, [pc, #408]	@ (80034a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800330c:	429a      	cmp	r2, r3
 800330e:	d908      	bls.n	8003322 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003310:	4b63      	ldr	r3, [pc, #396]	@ (80034a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	4960      	ldr	r1, [pc, #384]	@ (80034a0 <HAL_RCC_ClockConfig+0x1f0>)
 800331e:	4313      	orrs	r3, r2
 8003320:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b00      	cmp	r3, #0
 800332c:	d04c      	beq.n	80033c8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	2b03      	cmp	r3, #3
 8003334:	d107      	bne.n	8003346 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003336:	4b5a      	ldr	r3, [pc, #360]	@ (80034a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d121      	bne.n	8003386 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e0a6      	b.n	8003494 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	2b02      	cmp	r3, #2
 800334c:	d107      	bne.n	800335e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800334e:	4b54      	ldr	r3, [pc, #336]	@ (80034a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d115      	bne.n	8003386 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e09a      	b.n	8003494 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d107      	bne.n	8003376 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003366:	4b4e      	ldr	r3, [pc, #312]	@ (80034a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d109      	bne.n	8003386 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e08e      	b.n	8003494 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003376:	4b4a      	ldr	r3, [pc, #296]	@ (80034a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e086      	b.n	8003494 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003386:	4b46      	ldr	r3, [pc, #280]	@ (80034a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f023 0203 	bic.w	r2, r3, #3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	4943      	ldr	r1, [pc, #268]	@ (80034a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003394:	4313      	orrs	r3, r2
 8003396:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003398:	f7fe f88c 	bl	80014b4 <HAL_GetTick>
 800339c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800339e:	e00a      	b.n	80033b6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033a0:	f7fe f888 	bl	80014b4 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e06e      	b.n	8003494 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033b6:	4b3a      	ldr	r3, [pc, #232]	@ (80034a0 <HAL_RCC_ClockConfig+0x1f0>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 020c 	and.w	r2, r3, #12
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d1eb      	bne.n	80033a0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d010      	beq.n	80033f6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689a      	ldr	r2, [r3, #8]
 80033d8:	4b31      	ldr	r3, [pc, #196]	@ (80034a0 <HAL_RCC_ClockConfig+0x1f0>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d208      	bcs.n	80033f6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033e4:	4b2e      	ldr	r3, [pc, #184]	@ (80034a0 <HAL_RCC_ClockConfig+0x1f0>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	492b      	ldr	r1, [pc, #172]	@ (80034a0 <HAL_RCC_ClockConfig+0x1f0>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033f6:	4b29      	ldr	r3, [pc, #164]	@ (800349c <HAL_RCC_ClockConfig+0x1ec>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0307 	and.w	r3, r3, #7
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	429a      	cmp	r2, r3
 8003402:	d210      	bcs.n	8003426 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003404:	4b25      	ldr	r3, [pc, #148]	@ (800349c <HAL_RCC_ClockConfig+0x1ec>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f023 0207 	bic.w	r2, r3, #7
 800340c:	4923      	ldr	r1, [pc, #140]	@ (800349c <HAL_RCC_ClockConfig+0x1ec>)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	4313      	orrs	r3, r2
 8003412:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003414:	4b21      	ldr	r3, [pc, #132]	@ (800349c <HAL_RCC_ClockConfig+0x1ec>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0307 	and.w	r3, r3, #7
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	429a      	cmp	r2, r3
 8003420:	d001      	beq.n	8003426 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e036      	b.n	8003494 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0304 	and.w	r3, r3, #4
 800342e:	2b00      	cmp	r3, #0
 8003430:	d008      	beq.n	8003444 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003432:	4b1b      	ldr	r3, [pc, #108]	@ (80034a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	4918      	ldr	r1, [pc, #96]	@ (80034a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003440:	4313      	orrs	r3, r2
 8003442:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0308 	and.w	r3, r3, #8
 800344c:	2b00      	cmp	r3, #0
 800344e:	d009      	beq.n	8003464 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003450:	4b13      	ldr	r3, [pc, #76]	@ (80034a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	00db      	lsls	r3, r3, #3
 800345e:	4910      	ldr	r1, [pc, #64]	@ (80034a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003460:	4313      	orrs	r3, r2
 8003462:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003464:	f000 f824 	bl	80034b0 <HAL_RCC_GetSysClockFreq>
 8003468:	4602      	mov	r2, r0
 800346a:	4b0d      	ldr	r3, [pc, #52]	@ (80034a0 <HAL_RCC_ClockConfig+0x1f0>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	091b      	lsrs	r3, r3, #4
 8003470:	f003 030f 	and.w	r3, r3, #15
 8003474:	490b      	ldr	r1, [pc, #44]	@ (80034a4 <HAL_RCC_ClockConfig+0x1f4>)
 8003476:	5ccb      	ldrb	r3, [r1, r3]
 8003478:	f003 031f 	and.w	r3, r3, #31
 800347c:	fa22 f303 	lsr.w	r3, r2, r3
 8003480:	4a09      	ldr	r2, [pc, #36]	@ (80034a8 <HAL_RCC_ClockConfig+0x1f8>)
 8003482:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003484:	4b09      	ldr	r3, [pc, #36]	@ (80034ac <HAL_RCC_ClockConfig+0x1fc>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4618      	mov	r0, r3
 800348a:	f7fd ffc3 	bl	8001414 <HAL_InitTick>
 800348e:	4603      	mov	r3, r0
 8003490:	72fb      	strb	r3, [r7, #11]

  return status;
 8003492:	7afb      	ldrb	r3, [r7, #11]
}
 8003494:	4618      	mov	r0, r3
 8003496:	3710      	adds	r7, #16
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	40022000 	.word	0x40022000
 80034a0:	40021000 	.word	0x40021000
 80034a4:	080079b0 	.word	0x080079b0
 80034a8:	20000000 	.word	0x20000000
 80034ac:	20000004 	.word	0x20000004

080034b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b089      	sub	sp, #36	@ 0x24
 80034b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80034b6:	2300      	movs	r3, #0
 80034b8:	61fb      	str	r3, [r7, #28]
 80034ba:	2300      	movs	r3, #0
 80034bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034be:	4b3e      	ldr	r3, [pc, #248]	@ (80035b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f003 030c 	and.w	r3, r3, #12
 80034c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034c8:	4b3b      	ldr	r3, [pc, #236]	@ (80035b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	f003 0303 	and.w	r3, r3, #3
 80034d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d005      	beq.n	80034e4 <HAL_RCC_GetSysClockFreq+0x34>
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	2b0c      	cmp	r3, #12
 80034dc:	d121      	bne.n	8003522 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d11e      	bne.n	8003522 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80034e4:	4b34      	ldr	r3, [pc, #208]	@ (80035b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0308 	and.w	r3, r3, #8
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d107      	bne.n	8003500 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80034f0:	4b31      	ldr	r3, [pc, #196]	@ (80035b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80034f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034f6:	0a1b      	lsrs	r3, r3, #8
 80034f8:	f003 030f 	and.w	r3, r3, #15
 80034fc:	61fb      	str	r3, [r7, #28]
 80034fe:	e005      	b.n	800350c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003500:	4b2d      	ldr	r3, [pc, #180]	@ (80035b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	091b      	lsrs	r3, r3, #4
 8003506:	f003 030f 	and.w	r3, r3, #15
 800350a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800350c:	4a2b      	ldr	r2, [pc, #172]	@ (80035bc <HAL_RCC_GetSysClockFreq+0x10c>)
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003514:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d10d      	bne.n	8003538 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003520:	e00a      	b.n	8003538 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	2b04      	cmp	r3, #4
 8003526:	d102      	bne.n	800352e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003528:	4b25      	ldr	r3, [pc, #148]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800352a:	61bb      	str	r3, [r7, #24]
 800352c:	e004      	b.n	8003538 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	2b08      	cmp	r3, #8
 8003532:	d101      	bne.n	8003538 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003534:	4b23      	ldr	r3, [pc, #140]	@ (80035c4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003536:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	2b0c      	cmp	r3, #12
 800353c:	d134      	bne.n	80035a8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800353e:	4b1e      	ldr	r3, [pc, #120]	@ (80035b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	f003 0303 	and.w	r3, r3, #3
 8003546:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	2b02      	cmp	r3, #2
 800354c:	d003      	beq.n	8003556 <HAL_RCC_GetSysClockFreq+0xa6>
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	2b03      	cmp	r3, #3
 8003552:	d003      	beq.n	800355c <HAL_RCC_GetSysClockFreq+0xac>
 8003554:	e005      	b.n	8003562 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003556:	4b1a      	ldr	r3, [pc, #104]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003558:	617b      	str	r3, [r7, #20]
      break;
 800355a:	e005      	b.n	8003568 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800355c:	4b19      	ldr	r3, [pc, #100]	@ (80035c4 <HAL_RCC_GetSysClockFreq+0x114>)
 800355e:	617b      	str	r3, [r7, #20]
      break;
 8003560:	e002      	b.n	8003568 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	617b      	str	r3, [r7, #20]
      break;
 8003566:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003568:	4b13      	ldr	r3, [pc, #76]	@ (80035b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	091b      	lsrs	r3, r3, #4
 800356e:	f003 0307 	and.w	r3, r3, #7
 8003572:	3301      	adds	r3, #1
 8003574:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003576:	4b10      	ldr	r3, [pc, #64]	@ (80035b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	0a1b      	lsrs	r3, r3, #8
 800357c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003580:	697a      	ldr	r2, [r7, #20]
 8003582:	fb03 f202 	mul.w	r2, r3, r2
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	fbb2 f3f3 	udiv	r3, r2, r3
 800358c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800358e:	4b0a      	ldr	r3, [pc, #40]	@ (80035b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	0e5b      	lsrs	r3, r3, #25
 8003594:	f003 0303 	and.w	r3, r3, #3
 8003598:	3301      	adds	r3, #1
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80035a8:	69bb      	ldr	r3, [r7, #24]
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3724      	adds	r7, #36	@ 0x24
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	40021000 	.word	0x40021000
 80035bc:	080079c8 	.word	0x080079c8
 80035c0:	00f42400 	.word	0x00f42400
 80035c4:	007a1200 	.word	0x007a1200

080035c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035c8:	b480      	push	{r7}
 80035ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035cc:	4b03      	ldr	r3, [pc, #12]	@ (80035dc <HAL_RCC_GetHCLKFreq+0x14>)
 80035ce:	681b      	ldr	r3, [r3, #0]
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	20000000 	.word	0x20000000

080035e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80035e4:	f7ff fff0 	bl	80035c8 <HAL_RCC_GetHCLKFreq>
 80035e8:	4602      	mov	r2, r0
 80035ea:	4b06      	ldr	r3, [pc, #24]	@ (8003604 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	0a1b      	lsrs	r3, r3, #8
 80035f0:	f003 0307 	and.w	r3, r3, #7
 80035f4:	4904      	ldr	r1, [pc, #16]	@ (8003608 <HAL_RCC_GetPCLK1Freq+0x28>)
 80035f6:	5ccb      	ldrb	r3, [r1, r3]
 80035f8:	f003 031f 	and.w	r3, r3, #31
 80035fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003600:	4618      	mov	r0, r3
 8003602:	bd80      	pop	{r7, pc}
 8003604:	40021000 	.word	0x40021000
 8003608:	080079c0 	.word	0x080079c0

0800360c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003610:	f7ff ffda 	bl	80035c8 <HAL_RCC_GetHCLKFreq>
 8003614:	4602      	mov	r2, r0
 8003616:	4b06      	ldr	r3, [pc, #24]	@ (8003630 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	0adb      	lsrs	r3, r3, #11
 800361c:	f003 0307 	and.w	r3, r3, #7
 8003620:	4904      	ldr	r1, [pc, #16]	@ (8003634 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003622:	5ccb      	ldrb	r3, [r1, r3]
 8003624:	f003 031f 	and.w	r3, r3, #31
 8003628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800362c:	4618      	mov	r0, r3
 800362e:	bd80      	pop	{r7, pc}
 8003630:	40021000 	.word	0x40021000
 8003634:	080079c0 	.word	0x080079c0

08003638 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003640:	2300      	movs	r3, #0
 8003642:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003644:	4b2a      	ldr	r3, [pc, #168]	@ (80036f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003646:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003648:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d003      	beq.n	8003658 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003650:	f7ff f9ee 	bl	8002a30 <HAL_PWREx_GetVoltageRange>
 8003654:	6178      	str	r0, [r7, #20]
 8003656:	e014      	b.n	8003682 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003658:	4b25      	ldr	r3, [pc, #148]	@ (80036f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800365a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800365c:	4a24      	ldr	r2, [pc, #144]	@ (80036f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800365e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003662:	6593      	str	r3, [r2, #88]	@ 0x58
 8003664:	4b22      	ldr	r3, [pc, #136]	@ (80036f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003666:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003668:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800366c:	60fb      	str	r3, [r7, #12]
 800366e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003670:	f7ff f9de 	bl	8002a30 <HAL_PWREx_GetVoltageRange>
 8003674:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003676:	4b1e      	ldr	r3, [pc, #120]	@ (80036f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800367a:	4a1d      	ldr	r2, [pc, #116]	@ (80036f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800367c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003680:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003688:	d10b      	bne.n	80036a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2b80      	cmp	r3, #128	@ 0x80
 800368e:	d919      	bls.n	80036c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2ba0      	cmp	r3, #160	@ 0xa0
 8003694:	d902      	bls.n	800369c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003696:	2302      	movs	r3, #2
 8003698:	613b      	str	r3, [r7, #16]
 800369a:	e013      	b.n	80036c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800369c:	2301      	movs	r3, #1
 800369e:	613b      	str	r3, [r7, #16]
 80036a0:	e010      	b.n	80036c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2b80      	cmp	r3, #128	@ 0x80
 80036a6:	d902      	bls.n	80036ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80036a8:	2303      	movs	r3, #3
 80036aa:	613b      	str	r3, [r7, #16]
 80036ac:	e00a      	b.n	80036c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2b80      	cmp	r3, #128	@ 0x80
 80036b2:	d102      	bne.n	80036ba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80036b4:	2302      	movs	r3, #2
 80036b6:	613b      	str	r3, [r7, #16]
 80036b8:	e004      	b.n	80036c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2b70      	cmp	r3, #112	@ 0x70
 80036be:	d101      	bne.n	80036c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80036c0:	2301      	movs	r3, #1
 80036c2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80036c4:	4b0b      	ldr	r3, [pc, #44]	@ (80036f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f023 0207 	bic.w	r2, r3, #7
 80036cc:	4909      	ldr	r1, [pc, #36]	@ (80036f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80036d4:	4b07      	ldr	r3, [pc, #28]	@ (80036f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0307 	and.w	r3, r3, #7
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d001      	beq.n	80036e6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e000      	b.n	80036e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3718      	adds	r7, #24
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	40021000 	.word	0x40021000
 80036f4:	40022000 	.word	0x40022000

080036f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003700:	2300      	movs	r3, #0
 8003702:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003704:	2300      	movs	r3, #0
 8003706:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003710:	2b00      	cmp	r3, #0
 8003712:	d041      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003718:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800371c:	d02a      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800371e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003722:	d824      	bhi.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003724:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003728:	d008      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800372a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800372e:	d81e      	bhi.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003730:	2b00      	cmp	r3, #0
 8003732:	d00a      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003734:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003738:	d010      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800373a:	e018      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800373c:	4b86      	ldr	r3, [pc, #536]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	4a85      	ldr	r2, [pc, #532]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003742:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003746:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003748:	e015      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	3304      	adds	r3, #4
 800374e:	2100      	movs	r1, #0
 8003750:	4618      	mov	r0, r3
 8003752:	f001 f829 	bl	80047a8 <RCCEx_PLLSAI1_Config>
 8003756:	4603      	mov	r3, r0
 8003758:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800375a:	e00c      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	3320      	adds	r3, #32
 8003760:	2100      	movs	r1, #0
 8003762:	4618      	mov	r0, r3
 8003764:	f001 f914 	bl	8004990 <RCCEx_PLLSAI2_Config>
 8003768:	4603      	mov	r3, r0
 800376a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800376c:	e003      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	74fb      	strb	r3, [r7, #19]
      break;
 8003772:	e000      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003774:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003776:	7cfb      	ldrb	r3, [r7, #19]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d10b      	bne.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800377c:	4b76      	ldr	r3, [pc, #472]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800377e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003782:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800378a:	4973      	ldr	r1, [pc, #460]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800378c:	4313      	orrs	r3, r2
 800378e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003792:	e001      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003794:	7cfb      	ldrb	r3, [r7, #19]
 8003796:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d041      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037a8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80037ac:	d02a      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80037ae:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80037b2:	d824      	bhi.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80037b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80037b8:	d008      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80037ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80037be:	d81e      	bhi.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00a      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80037c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037c8:	d010      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80037ca:	e018      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80037cc:	4b62      	ldr	r3, [pc, #392]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	4a61      	ldr	r2, [pc, #388]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037d6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037d8:	e015      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	3304      	adds	r3, #4
 80037de:	2100      	movs	r1, #0
 80037e0:	4618      	mov	r0, r3
 80037e2:	f000 ffe1 	bl	80047a8 <RCCEx_PLLSAI1_Config>
 80037e6:	4603      	mov	r3, r0
 80037e8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037ea:	e00c      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	3320      	adds	r3, #32
 80037f0:	2100      	movs	r1, #0
 80037f2:	4618      	mov	r0, r3
 80037f4:	f001 f8cc 	bl	8004990 <RCCEx_PLLSAI2_Config>
 80037f8:	4603      	mov	r3, r0
 80037fa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037fc:	e003      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	74fb      	strb	r3, [r7, #19]
      break;
 8003802:	e000      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003804:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003806:	7cfb      	ldrb	r3, [r7, #19]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d10b      	bne.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800380c:	4b52      	ldr	r3, [pc, #328]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800380e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003812:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800381a:	494f      	ldr	r1, [pc, #316]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800381c:	4313      	orrs	r3, r2
 800381e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003822:	e001      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003824:	7cfb      	ldrb	r3, [r7, #19]
 8003826:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003830:	2b00      	cmp	r3, #0
 8003832:	f000 80a0 	beq.w	8003976 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003836:	2300      	movs	r3, #0
 8003838:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800383a:	4b47      	ldr	r3, [pc, #284]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800383c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800383e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003846:	2301      	movs	r3, #1
 8003848:	e000      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800384a:	2300      	movs	r3, #0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00d      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003850:	4b41      	ldr	r3, [pc, #260]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003854:	4a40      	ldr	r2, [pc, #256]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003856:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800385a:	6593      	str	r3, [r2, #88]	@ 0x58
 800385c:	4b3e      	ldr	r3, [pc, #248]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800385e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003860:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003864:	60bb      	str	r3, [r7, #8]
 8003866:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003868:	2301      	movs	r3, #1
 800386a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800386c:	4b3b      	ldr	r3, [pc, #236]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a3a      	ldr	r2, [pc, #232]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003872:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003876:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003878:	f7fd fe1c 	bl	80014b4 <HAL_GetTick>
 800387c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800387e:	e009      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003880:	f7fd fe18 	bl	80014b4 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d902      	bls.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	74fb      	strb	r3, [r7, #19]
        break;
 8003892:	e005      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003894:	4b31      	ldr	r3, [pc, #196]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800389c:	2b00      	cmp	r3, #0
 800389e:	d0ef      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80038a0:	7cfb      	ldrb	r3, [r7, #19]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d15c      	bne.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80038a6:	4b2c      	ldr	r3, [pc, #176]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038b0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d01f      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d019      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80038c4:	4b24      	ldr	r3, [pc, #144]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038d0:	4b21      	ldr	r3, [pc, #132]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038d6:	4a20      	ldr	r2, [pc, #128]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038e0:	4b1d      	ldr	r3, [pc, #116]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038e6:	4a1c      	ldr	r2, [pc, #112]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038f0:	4a19      	ldr	r2, [pc, #100]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d016      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003902:	f7fd fdd7 	bl	80014b4 <HAL_GetTick>
 8003906:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003908:	e00b      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800390a:	f7fd fdd3 	bl	80014b4 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003918:	4293      	cmp	r3, r2
 800391a:	d902      	bls.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	74fb      	strb	r3, [r7, #19]
            break;
 8003920:	e006      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003922:	4b0d      	ldr	r3, [pc, #52]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003924:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d0ec      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003930:	7cfb      	ldrb	r3, [r7, #19]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10c      	bne.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003936:	4b08      	ldr	r3, [pc, #32]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003938:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800393c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003946:	4904      	ldr	r1, [pc, #16]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003948:	4313      	orrs	r3, r2
 800394a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800394e:	e009      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003950:	7cfb      	ldrb	r3, [r7, #19]
 8003952:	74bb      	strb	r3, [r7, #18]
 8003954:	e006      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003956:	bf00      	nop
 8003958:	40021000 	.word	0x40021000
 800395c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003960:	7cfb      	ldrb	r3, [r7, #19]
 8003962:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003964:	7c7b      	ldrb	r3, [r7, #17]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d105      	bne.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800396a:	4b9e      	ldr	r3, [pc, #632]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800396c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800396e:	4a9d      	ldr	r2, [pc, #628]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003970:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003974:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00a      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003982:	4b98      	ldr	r3, [pc, #608]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003984:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003988:	f023 0203 	bic.w	r2, r3, #3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003990:	4994      	ldr	r1, [pc, #592]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003992:	4313      	orrs	r3, r2
 8003994:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00a      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039a4:	4b8f      	ldr	r3, [pc, #572]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039aa:	f023 020c 	bic.w	r2, r3, #12
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039b2:	498c      	ldr	r1, [pc, #560]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0304 	and.w	r3, r3, #4
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00a      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039c6:	4b87      	ldr	r3, [pc, #540]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039cc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d4:	4983      	ldr	r1, [pc, #524]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0308 	and.w	r3, r3, #8
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00a      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80039e8:	4b7e      	ldr	r3, [pc, #504]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039f6:	497b      	ldr	r1, [pc, #492]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0310 	and.w	r3, r3, #16
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00a      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a0a:	4b76      	ldr	r3, [pc, #472]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a18:	4972      	ldr	r1, [pc, #456]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0320 	and.w	r3, r3, #32
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d00a      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a2c:	4b6d      	ldr	r3, [pc, #436]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a32:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a3a:	496a      	ldr	r1, [pc, #424]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00a      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a4e:	4b65      	ldr	r3, [pc, #404]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a54:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a5c:	4961      	ldr	r1, [pc, #388]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d00a      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a70:	4b5c      	ldr	r3, [pc, #368]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a76:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a7e:	4959      	ldr	r1, [pc, #356]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00a      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a92:	4b54      	ldr	r3, [pc, #336]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a98:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003aa0:	4950      	ldr	r1, [pc, #320]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00a      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ab4:	4b4b      	ldr	r3, [pc, #300]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aba:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ac2:	4948      	ldr	r1, [pc, #288]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00a      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ad6:	4b43      	ldr	r3, [pc, #268]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003adc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ae4:	493f      	ldr	r1, [pc, #252]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d028      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003af8:	4b3a      	ldr	r3, [pc, #232]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003afe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b06:	4937      	ldr	r1, [pc, #220]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b16:	d106      	bne.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b18:	4b32      	ldr	r3, [pc, #200]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	4a31      	ldr	r2, [pc, #196]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b22:	60d3      	str	r3, [r2, #12]
 8003b24:	e011      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b2a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003b2e:	d10c      	bne.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	3304      	adds	r3, #4
 8003b34:	2101      	movs	r1, #1
 8003b36:	4618      	mov	r0, r3
 8003b38:	f000 fe36 	bl	80047a8 <RCCEx_PLLSAI1_Config>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003b40:	7cfb      	ldrb	r3, [r7, #19]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d001      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003b46:	7cfb      	ldrb	r3, [r7, #19]
 8003b48:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d028      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b56:	4b23      	ldr	r3, [pc, #140]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b5c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b64:	491f      	ldr	r1, [pc, #124]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b70:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b74:	d106      	bne.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b76:	4b1b      	ldr	r3, [pc, #108]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	4a1a      	ldr	r2, [pc, #104]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b7c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b80:	60d3      	str	r3, [r2, #12]
 8003b82:	e011      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b88:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003b8c:	d10c      	bne.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	3304      	adds	r3, #4
 8003b92:	2101      	movs	r1, #1
 8003b94:	4618      	mov	r0, r3
 8003b96:	f000 fe07 	bl	80047a8 <RCCEx_PLLSAI1_Config>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b9e:	7cfb      	ldrb	r3, [r7, #19]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003ba4:	7cfb      	ldrb	r3, [r7, #19]
 8003ba6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d02b      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bc2:	4908      	ldr	r1, [pc, #32]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003bd2:	d109      	bne.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bd4:	4b03      	ldr	r3, [pc, #12]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	4a02      	ldr	r2, [pc, #8]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003bde:	60d3      	str	r3, [r2, #12]
 8003be0:	e014      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003be2:	bf00      	nop
 8003be4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003bf0:	d10c      	bne.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	3304      	adds	r3, #4
 8003bf6:	2101      	movs	r1, #1
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f000 fdd5 	bl	80047a8 <RCCEx_PLLSAI1_Config>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c02:	7cfb      	ldrb	r3, [r7, #19]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d001      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003c08:	7cfb      	ldrb	r3, [r7, #19]
 8003c0a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d02f      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c18:	4b2b      	ldr	r3, [pc, #172]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c1e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c26:	4928      	ldr	r1, [pc, #160]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c36:	d10d      	bne.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	3304      	adds	r3, #4
 8003c3c:	2102      	movs	r1, #2
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f000 fdb2 	bl	80047a8 <RCCEx_PLLSAI1_Config>
 8003c44:	4603      	mov	r3, r0
 8003c46:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c48:	7cfb      	ldrb	r3, [r7, #19]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d014      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003c4e:	7cfb      	ldrb	r3, [r7, #19]
 8003c50:	74bb      	strb	r3, [r7, #18]
 8003c52:	e011      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c5c:	d10c      	bne.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	3320      	adds	r3, #32
 8003c62:	2102      	movs	r1, #2
 8003c64:	4618      	mov	r0, r3
 8003c66:	f000 fe93 	bl	8004990 <RCCEx_PLLSAI2_Config>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c6e:	7cfb      	ldrb	r3, [r7, #19]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d001      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003c74:	7cfb      	ldrb	r3, [r7, #19]
 8003c76:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00a      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c84:	4b10      	ldr	r3, [pc, #64]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c8a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c92:	490d      	ldr	r1, [pc, #52]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00b      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ca6:	4b08      	ldr	r3, [pc, #32]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cac:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cb6:	4904      	ldr	r1, [pc, #16]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003cbe:	7cbb      	ldrb	r3, [r7, #18]
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3718      	adds	r7, #24
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	40021000 	.word	0x40021000

08003ccc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b088      	sub	sp, #32
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003cde:	d13e      	bne.n	8003d5e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003ce0:	4bb2      	ldr	r3, [pc, #712]	@ (8003fac <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ce6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cea:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cf2:	d028      	beq.n	8003d46 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cfa:	f200 8542 	bhi.w	8004782 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d04:	d005      	beq.n	8003d12 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d0c:	d00e      	beq.n	8003d2c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8003d0e:	f000 bd38 	b.w	8004782 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003d12:	4ba6      	ldr	r3, [pc, #664]	@ (8003fac <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d18:	f003 0302 	and.w	r3, r3, #2
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	f040 8532 	bne.w	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 8003d22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d26:	61fb      	str	r3, [r7, #28]
      break;
 8003d28:	f000 bd2d 	b.w	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003d2c:	4b9f      	ldr	r3, [pc, #636]	@ (8003fac <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003d2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	f040 8527 	bne.w	800478a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 8003d3c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003d40:	61fb      	str	r3, [r7, #28]
      break;
 8003d42:	f000 bd22 	b.w	800478a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003d46:	4b99      	ldr	r3, [pc, #612]	@ (8003fac <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d52:	f040 851c 	bne.w	800478e <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 8003d56:	4b96      	ldr	r3, [pc, #600]	@ (8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8003d58:	61fb      	str	r3, [r7, #28]
      break;
 8003d5a:	f000 bd18 	b.w	800478e <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d5e:	4b93      	ldr	r3, [pc, #588]	@ (8003fac <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	f003 0303 	and.w	r3, r3, #3
 8003d66:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	2b03      	cmp	r3, #3
 8003d6c:	d036      	beq.n	8003ddc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	2b03      	cmp	r3, #3
 8003d72:	d840      	bhi.n	8003df6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d003      	beq.n	8003d82 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d020      	beq.n	8003dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8003d80:	e039      	b.n	8003df6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003d82:	4b8a      	ldr	r3, [pc, #552]	@ (8003fac <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d116      	bne.n	8003dbc <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003d8e:	4b87      	ldr	r3, [pc, #540]	@ (8003fac <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0308 	and.w	r3, r3, #8
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d005      	beq.n	8003da6 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8003d9a:	4b84      	ldr	r3, [pc, #528]	@ (8003fac <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	091b      	lsrs	r3, r3, #4
 8003da0:	f003 030f 	and.w	r3, r3, #15
 8003da4:	e005      	b.n	8003db2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8003da6:	4b81      	ldr	r3, [pc, #516]	@ (8003fac <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003da8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dac:	0a1b      	lsrs	r3, r3, #8
 8003dae:	f003 030f 	and.w	r3, r3, #15
 8003db2:	4a80      	ldr	r2, [pc, #512]	@ (8003fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8003db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003db8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003dba:	e01f      	b.n	8003dfc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	61bb      	str	r3, [r7, #24]
      break;
 8003dc0:	e01c      	b.n	8003dfc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003dc2:	4b7a      	ldr	r3, [pc, #488]	@ (8003fac <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dce:	d102      	bne.n	8003dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8003dd0:	4b79      	ldr	r3, [pc, #484]	@ (8003fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8003dd2:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003dd4:	e012      	b.n	8003dfc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	61bb      	str	r3, [r7, #24]
      break;
 8003dda:	e00f      	b.n	8003dfc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003ddc:	4b73      	ldr	r3, [pc, #460]	@ (8003fac <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003de4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003de8:	d102      	bne.n	8003df0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8003dea:	4b74      	ldr	r3, [pc, #464]	@ (8003fbc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003dec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003dee:	e005      	b.n	8003dfc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003df0:	2300      	movs	r3, #0
 8003df2:	61bb      	str	r3, [r7, #24]
      break;
 8003df4:	e002      	b.n	8003dfc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8003df6:	2300      	movs	r3, #0
 8003df8:	61bb      	str	r3, [r7, #24]
      break;
 8003dfa:	bf00      	nop
    }

    switch(PeriphClk)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003e02:	f000 80dd 	beq.w	8003fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003e0c:	f200 84c1 	bhi.w	8004792 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003e16:	f000 80d3 	beq.w	8003fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003e20:	f200 84b7 	bhi.w	8004792 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e2a:	f000 835f 	beq.w	80044ec <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e34:	f200 84ad 	bhi.w	8004792 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e3e:	f000 847e 	beq.w	800473e <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e48:	f200 84a3 	bhi.w	8004792 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e52:	f000 82cd 	beq.w	80043f0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e5c:	f200 8499 	bhi.w	8004792 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e66:	f000 80ab 	beq.w	8003fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e70:	f200 848f 	bhi.w	8004792 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e7a:	f000 8090 	beq.w	8003f9e <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e84:	f200 8485 	bhi.w	8004792 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e8e:	d07f      	beq.n	8003f90 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e96:	f200 847c 	bhi.w	8004792 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ea0:	f000 8403 	beq.w	80046aa <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003eaa:	f200 8472 	bhi.w	8004792 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003eb4:	f000 83af 	beq.w	8004616 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ebe:	f200 8468 	bhi.w	8004792 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ec8:	f000 8379 	beq.w	80045be <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ed2:	f200 845e 	bhi.w	8004792 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2b80      	cmp	r3, #128	@ 0x80
 8003eda:	f000 8344 	beq.w	8004566 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2b80      	cmp	r3, #128	@ 0x80
 8003ee2:	f200 8456 	bhi.w	8004792 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2b20      	cmp	r3, #32
 8003eea:	d84b      	bhi.n	8003f84 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f000 844f 	beq.w	8004792 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	2b1f      	cmp	r3, #31
 8003efa:	f200 844a 	bhi.w	8004792 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003efe:	a201      	add	r2, pc, #4	@ (adr r2, 8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8003f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f04:	080040ed 	.word	0x080040ed
 8003f08:	0800415b 	.word	0x0800415b
 8003f0c:	08004793 	.word	0x08004793
 8003f10:	080041ef 	.word	0x080041ef
 8003f14:	08004793 	.word	0x08004793
 8003f18:	08004793 	.word	0x08004793
 8003f1c:	08004793 	.word	0x08004793
 8003f20:	08004275 	.word	0x08004275
 8003f24:	08004793 	.word	0x08004793
 8003f28:	08004793 	.word	0x08004793
 8003f2c:	08004793 	.word	0x08004793
 8003f30:	08004793 	.word	0x08004793
 8003f34:	08004793 	.word	0x08004793
 8003f38:	08004793 	.word	0x08004793
 8003f3c:	08004793 	.word	0x08004793
 8003f40:	080042ed 	.word	0x080042ed
 8003f44:	08004793 	.word	0x08004793
 8003f48:	08004793 	.word	0x08004793
 8003f4c:	08004793 	.word	0x08004793
 8003f50:	08004793 	.word	0x08004793
 8003f54:	08004793 	.word	0x08004793
 8003f58:	08004793 	.word	0x08004793
 8003f5c:	08004793 	.word	0x08004793
 8003f60:	08004793 	.word	0x08004793
 8003f64:	08004793 	.word	0x08004793
 8003f68:	08004793 	.word	0x08004793
 8003f6c:	08004793 	.word	0x08004793
 8003f70:	08004793 	.word	0x08004793
 8003f74:	08004793 	.word	0x08004793
 8003f78:	08004793 	.word	0x08004793
 8003f7c:	08004793 	.word	0x08004793
 8003f80:	0800436f 	.word	0x0800436f
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b40      	cmp	r3, #64	@ 0x40
 8003f88:	f000 82c1 	beq.w	800450e <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8003f8c:	f000 bc01 	b.w	8004792 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8003f90:	69b9      	ldr	r1, [r7, #24]
 8003f92:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003f96:	f000 fdd9 	bl	8004b4c <RCCEx_GetSAIxPeriphCLKFreq>
 8003f9a:	61f8      	str	r0, [r7, #28]
      break;
 8003f9c:	e3fa      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8003f9e:	69b9      	ldr	r1, [r7, #24]
 8003fa0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003fa4:	f000 fdd2 	bl	8004b4c <RCCEx_GetSAIxPeriphCLKFreq>
 8003fa8:	61f8      	str	r0, [r7, #28]
      break;
 8003faa:	e3f3      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8003fac:	40021000 	.word	0x40021000
 8003fb0:	0003d090 	.word	0x0003d090
 8003fb4:	080079c8 	.word	0x080079c8
 8003fb8:	00f42400 	.word	0x00f42400
 8003fbc:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8003fc0:	4ba9      	ldr	r3, [pc, #676]	@ (8004268 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fc6:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8003fca:	613b      	str	r3, [r7, #16]
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003fd2:	d00c      	beq.n	8003fee <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003fda:	d87f      	bhi.n	80040dc <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003fe2:	d04e      	beq.n	8004082 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fea:	d01d      	beq.n	8004028 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 8003fec:	e076      	b.n	80040dc <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003fee:	4b9e      	ldr	r3, [pc, #632]	@ (8004268 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d172      	bne.n	80040e0 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003ffa:	4b9b      	ldr	r3, [pc, #620]	@ (8004268 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0308 	and.w	r3, r3, #8
 8004002:	2b00      	cmp	r3, #0
 8004004:	d005      	beq.n	8004012 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 8004006:	4b98      	ldr	r3, [pc, #608]	@ (8004268 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	091b      	lsrs	r3, r3, #4
 800400c:	f003 030f 	and.w	r3, r3, #15
 8004010:	e005      	b.n	800401e <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 8004012:	4b95      	ldr	r3, [pc, #596]	@ (8004268 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004014:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004018:	0a1b      	lsrs	r3, r3, #8
 800401a:	f003 030f 	and.w	r3, r3, #15
 800401e:	4a93      	ldr	r2, [pc, #588]	@ (800426c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8004020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004024:	61fb      	str	r3, [r7, #28]
          break;
 8004026:	e05b      	b.n	80040e0 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004028:	4b8f      	ldr	r3, [pc, #572]	@ (8004268 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004030:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004034:	d156      	bne.n	80040e4 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004036:	4b8c      	ldr	r3, [pc, #560]	@ (8004268 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800403e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004042:	d14f      	bne.n	80040e4 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004044:	4b88      	ldr	r3, [pc, #544]	@ (8004268 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	0a1b      	lsrs	r3, r3, #8
 800404a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800404e:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	fb03 f202 	mul.w	r2, r3, r2
 8004058:	4b83      	ldr	r3, [pc, #524]	@ (8004268 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	091b      	lsrs	r3, r3, #4
 800405e:	f003 0307 	and.w	r3, r3, #7
 8004062:	3301      	adds	r3, #1
 8004064:	fbb2 f3f3 	udiv	r3, r2, r3
 8004068:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800406a:	4b7f      	ldr	r3, [pc, #508]	@ (8004268 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	0d5b      	lsrs	r3, r3, #21
 8004070:	f003 0303 	and.w	r3, r3, #3
 8004074:	3301      	adds	r3, #1
 8004076:	005b      	lsls	r3, r3, #1
 8004078:	69ba      	ldr	r2, [r7, #24]
 800407a:	fbb2 f3f3 	udiv	r3, r2, r3
 800407e:	61fb      	str	r3, [r7, #28]
          break;
 8004080:	e030      	b.n	80040e4 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8004082:	4b79      	ldr	r3, [pc, #484]	@ (8004268 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800408a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800408e:	d12b      	bne.n	80040e8 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8004090:	4b75      	ldr	r3, [pc, #468]	@ (8004268 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004098:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800409c:	d124      	bne.n	80040e8 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800409e:	4b72      	ldr	r3, [pc, #456]	@ (8004268 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	0a1b      	lsrs	r3, r3, #8
 80040a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040a8:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	fb03 f202 	mul.w	r2, r3, r2
 80040b2:	4b6d      	ldr	r3, [pc, #436]	@ (8004268 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	091b      	lsrs	r3, r3, #4
 80040b8:	f003 0307 	and.w	r3, r3, #7
 80040bc:	3301      	adds	r3, #1
 80040be:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c2:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80040c4:	4b68      	ldr	r3, [pc, #416]	@ (8004268 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	0d5b      	lsrs	r3, r3, #21
 80040ca:	f003 0303 	and.w	r3, r3, #3
 80040ce:	3301      	adds	r3, #1
 80040d0:	005b      	lsls	r3, r3, #1
 80040d2:	69ba      	ldr	r2, [r7, #24]
 80040d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d8:	61fb      	str	r3, [r7, #28]
          break;
 80040da:	e005      	b.n	80040e8 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 80040dc:	bf00      	nop
 80040de:	e359      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80040e0:	bf00      	nop
 80040e2:	e357      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80040e4:	bf00      	nop
 80040e6:	e355      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80040e8:	bf00      	nop
        break;
 80040ea:	e353      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80040ec:	4b5e      	ldr	r3, [pc, #376]	@ (8004268 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80040ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040f2:	f003 0303 	and.w	r3, r3, #3
 80040f6:	613b      	str	r3, [r7, #16]
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	2b03      	cmp	r3, #3
 80040fc:	d827      	bhi.n	800414e <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 80040fe:	a201      	add	r2, pc, #4	@ (adr r2, 8004104 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8004100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004104:	08004115 	.word	0x08004115
 8004108:	0800411d 	.word	0x0800411d
 800410c:	08004125 	.word	0x08004125
 8004110:	08004139 	.word	0x08004139
          frequency = HAL_RCC_GetPCLK2Freq();
 8004114:	f7ff fa7a 	bl	800360c <HAL_RCC_GetPCLK2Freq>
 8004118:	61f8      	str	r0, [r7, #28]
          break;
 800411a:	e01d      	b.n	8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 800411c:	f7ff f9c8 	bl	80034b0 <HAL_RCC_GetSysClockFreq>
 8004120:	61f8      	str	r0, [r7, #28]
          break;
 8004122:	e019      	b.n	8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004124:	4b50      	ldr	r3, [pc, #320]	@ (8004268 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800412c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004130:	d10f      	bne.n	8004152 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 8004132:	4b4f      	ldr	r3, [pc, #316]	@ (8004270 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8004134:	61fb      	str	r3, [r7, #28]
          break;
 8004136:	e00c      	b.n	8004152 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004138:	4b4b      	ldr	r3, [pc, #300]	@ (8004268 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800413a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b02      	cmp	r3, #2
 8004144:	d107      	bne.n	8004156 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 8004146:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800414a:	61fb      	str	r3, [r7, #28]
          break;
 800414c:	e003      	b.n	8004156 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 800414e:	bf00      	nop
 8004150:	e320      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004152:	bf00      	nop
 8004154:	e31e      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004156:	bf00      	nop
        break;
 8004158:	e31c      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800415a:	4b43      	ldr	r3, [pc, #268]	@ (8004268 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800415c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004160:	f003 030c 	and.w	r3, r3, #12
 8004164:	613b      	str	r3, [r7, #16]
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	2b0c      	cmp	r3, #12
 800416a:	d83a      	bhi.n	80041e2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800416c:	a201      	add	r2, pc, #4	@ (adr r2, 8004174 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 800416e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004172:	bf00      	nop
 8004174:	080041a9 	.word	0x080041a9
 8004178:	080041e3 	.word	0x080041e3
 800417c:	080041e3 	.word	0x080041e3
 8004180:	080041e3 	.word	0x080041e3
 8004184:	080041b1 	.word	0x080041b1
 8004188:	080041e3 	.word	0x080041e3
 800418c:	080041e3 	.word	0x080041e3
 8004190:	080041e3 	.word	0x080041e3
 8004194:	080041b9 	.word	0x080041b9
 8004198:	080041e3 	.word	0x080041e3
 800419c:	080041e3 	.word	0x080041e3
 80041a0:	080041e3 	.word	0x080041e3
 80041a4:	080041cd 	.word	0x080041cd
          frequency = HAL_RCC_GetPCLK1Freq();
 80041a8:	f7ff fa1a 	bl	80035e0 <HAL_RCC_GetPCLK1Freq>
 80041ac:	61f8      	str	r0, [r7, #28]
          break;
 80041ae:	e01d      	b.n	80041ec <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 80041b0:	f7ff f97e 	bl	80034b0 <HAL_RCC_GetSysClockFreq>
 80041b4:	61f8      	str	r0, [r7, #28]
          break;
 80041b6:	e019      	b.n	80041ec <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80041b8:	4b2b      	ldr	r3, [pc, #172]	@ (8004268 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041c4:	d10f      	bne.n	80041e6 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 80041c6:	4b2a      	ldr	r3, [pc, #168]	@ (8004270 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80041c8:	61fb      	str	r3, [r7, #28]
          break;
 80041ca:	e00c      	b.n	80041e6 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80041cc:	4b26      	ldr	r3, [pc, #152]	@ (8004268 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80041ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d107      	bne.n	80041ea <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 80041da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041de:	61fb      	str	r3, [r7, #28]
          break;
 80041e0:	e003      	b.n	80041ea <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 80041e2:	bf00      	nop
 80041e4:	e2d6      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80041e6:	bf00      	nop
 80041e8:	e2d4      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80041ea:	bf00      	nop
        break;
 80041ec:	e2d2      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80041ee:	4b1e      	ldr	r3, [pc, #120]	@ (8004268 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80041f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041f4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80041f8:	613b      	str	r3, [r7, #16]
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	2b30      	cmp	r3, #48	@ 0x30
 80041fe:	d021      	beq.n	8004244 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	2b30      	cmp	r3, #48	@ 0x30
 8004204:	d829      	bhi.n	800425a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	2b20      	cmp	r3, #32
 800420a:	d011      	beq.n	8004230 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	2b20      	cmp	r3, #32
 8004210:	d823      	bhi.n	800425a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d003      	beq.n	8004220 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	2b10      	cmp	r3, #16
 800421c:	d004      	beq.n	8004228 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 800421e:	e01c      	b.n	800425a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004220:	f7ff f9de 	bl	80035e0 <HAL_RCC_GetPCLK1Freq>
 8004224:	61f8      	str	r0, [r7, #28]
          break;
 8004226:	e01d      	b.n	8004264 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 8004228:	f7ff f942 	bl	80034b0 <HAL_RCC_GetSysClockFreq>
 800422c:	61f8      	str	r0, [r7, #28]
          break;
 800422e:	e019      	b.n	8004264 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004230:	4b0d      	ldr	r3, [pc, #52]	@ (8004268 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004238:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800423c:	d10f      	bne.n	800425e <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 800423e:	4b0c      	ldr	r3, [pc, #48]	@ (8004270 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8004240:	61fb      	str	r3, [r7, #28]
          break;
 8004242:	e00c      	b.n	800425e <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004244:	4b08      	ldr	r3, [pc, #32]	@ (8004268 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004246:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b02      	cmp	r3, #2
 8004250:	d107      	bne.n	8004262 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 8004252:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004256:	61fb      	str	r3, [r7, #28]
          break;
 8004258:	e003      	b.n	8004262 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 800425a:	bf00      	nop
 800425c:	e29a      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800425e:	bf00      	nop
 8004260:	e298      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004262:	bf00      	nop
        break;
 8004264:	e296      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8004266:	bf00      	nop
 8004268:	40021000 	.word	0x40021000
 800426c:	080079c8 	.word	0x080079c8
 8004270:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004274:	4b9b      	ldr	r3, [pc, #620]	@ (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800427a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800427e:	613b      	str	r3, [r7, #16]
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	2bc0      	cmp	r3, #192	@ 0xc0
 8004284:	d021      	beq.n	80042ca <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	2bc0      	cmp	r3, #192	@ 0xc0
 800428a:	d829      	bhi.n	80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	2b80      	cmp	r3, #128	@ 0x80
 8004290:	d011      	beq.n	80042b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	2b80      	cmp	r3, #128	@ 0x80
 8004296:	d823      	bhi.n	80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d003      	beq.n	80042a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	2b40      	cmp	r3, #64	@ 0x40
 80042a2:	d004      	beq.n	80042ae <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 80042a4:	e01c      	b.n	80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 80042a6:	f7ff f99b 	bl	80035e0 <HAL_RCC_GetPCLK1Freq>
 80042aa:	61f8      	str	r0, [r7, #28]
          break;
 80042ac:	e01d      	b.n	80042ea <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 80042ae:	f7ff f8ff 	bl	80034b0 <HAL_RCC_GetSysClockFreq>
 80042b2:	61f8      	str	r0, [r7, #28]
          break;
 80042b4:	e019      	b.n	80042ea <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80042b6:	4b8b      	ldr	r3, [pc, #556]	@ (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042c2:	d10f      	bne.n	80042e4 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 80042c4:	4b88      	ldr	r3, [pc, #544]	@ (80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80042c6:	61fb      	str	r3, [r7, #28]
          break;
 80042c8:	e00c      	b.n	80042e4 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80042ca:	4b86      	ldr	r3, [pc, #536]	@ (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80042cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d107      	bne.n	80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 80042d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042dc:	61fb      	str	r3, [r7, #28]
          break;
 80042de:	e003      	b.n	80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 80042e0:	bf00      	nop
 80042e2:	e257      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80042e4:	bf00      	nop
 80042e6:	e255      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80042e8:	bf00      	nop
        break;
 80042ea:	e253      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80042ec:	4b7d      	ldr	r3, [pc, #500]	@ (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80042ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042f6:	613b      	str	r3, [r7, #16]
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042fe:	d025      	beq.n	800434c <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004306:	d82c      	bhi.n	8004362 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800430e:	d013      	beq.n	8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004316:	d824      	bhi.n	8004362 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d004      	beq.n	8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004324:	d004      	beq.n	8004330 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 8004326:	e01c      	b.n	8004362 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004328:	f7ff f95a 	bl	80035e0 <HAL_RCC_GetPCLK1Freq>
 800432c:	61f8      	str	r0, [r7, #28]
          break;
 800432e:	e01d      	b.n	800436c <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8004330:	f7ff f8be 	bl	80034b0 <HAL_RCC_GetSysClockFreq>
 8004334:	61f8      	str	r0, [r7, #28]
          break;
 8004336:	e019      	b.n	800436c <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004338:	4b6a      	ldr	r3, [pc, #424]	@ (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004340:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004344:	d10f      	bne.n	8004366 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 8004346:	4b68      	ldr	r3, [pc, #416]	@ (80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8004348:	61fb      	str	r3, [r7, #28]
          break;
 800434a:	e00c      	b.n	8004366 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800434c:	4b65      	ldr	r3, [pc, #404]	@ (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800434e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004352:	f003 0302 	and.w	r3, r3, #2
 8004356:	2b02      	cmp	r3, #2
 8004358:	d107      	bne.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 800435a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800435e:	61fb      	str	r3, [r7, #28]
          break;
 8004360:	e003      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 8004362:	bf00      	nop
 8004364:	e216      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004366:	bf00      	nop
 8004368:	e214      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800436a:	bf00      	nop
        break;
 800436c:	e212      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800436e:	4b5d      	ldr	r3, [pc, #372]	@ (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004370:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004374:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004378:	613b      	str	r3, [r7, #16]
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004380:	d025      	beq.n	80043ce <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004388:	d82c      	bhi.n	80043e4 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004390:	d013      	beq.n	80043ba <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004398:	d824      	bhi.n	80043e4 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d004      	beq.n	80043aa <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043a6:	d004      	beq.n	80043b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 80043a8:	e01c      	b.n	80043e4 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 80043aa:	f7ff f919 	bl	80035e0 <HAL_RCC_GetPCLK1Freq>
 80043ae:	61f8      	str	r0, [r7, #28]
          break;
 80043b0:	e01d      	b.n	80043ee <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 80043b2:	f7ff f87d 	bl	80034b0 <HAL_RCC_GetSysClockFreq>
 80043b6:	61f8      	str	r0, [r7, #28]
          break;
 80043b8:	e019      	b.n	80043ee <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80043ba:	4b4a      	ldr	r3, [pc, #296]	@ (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043c6:	d10f      	bne.n	80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 80043c8:	4b47      	ldr	r3, [pc, #284]	@ (80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80043ca:	61fb      	str	r3, [r7, #28]
          break;
 80043cc:	e00c      	b.n	80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80043ce:	4b45      	ldr	r3, [pc, #276]	@ (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80043d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d107      	bne.n	80043ec <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 80043dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043e0:	61fb      	str	r3, [r7, #28]
          break;
 80043e2:	e003      	b.n	80043ec <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 80043e4:	bf00      	nop
 80043e6:	e1d5      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80043e8:	bf00      	nop
 80043ea:	e1d3      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80043ec:	bf00      	nop
        break;
 80043ee:	e1d1      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80043f0:	4b3c      	ldr	r3, [pc, #240]	@ (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80043f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80043fa:	613b      	str	r3, [r7, #16]
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004402:	d00c      	beq.n	800441e <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800440a:	d864      	bhi.n	80044d6 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004412:	d008      	beq.n	8004426 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800441a:	d030      	beq.n	800447e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 800441c:	e05b      	b.n	80044d6 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 800441e:	f7ff f847 	bl	80034b0 <HAL_RCC_GetSysClockFreq>
 8004422:	61f8      	str	r0, [r7, #28]
          break;
 8004424:	e05c      	b.n	80044e0 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8004426:	4b2f      	ldr	r3, [pc, #188]	@ (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800442e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004432:	d152      	bne.n	80044da <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 8004434:	4b2b      	ldr	r3, [pc, #172]	@ (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d04c      	beq.n	80044da <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004440:	4b28      	ldr	r3, [pc, #160]	@ (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	0a1b      	lsrs	r3, r3, #8
 8004446:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800444a:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	fb03 f202 	mul.w	r2, r3, r2
 8004454:	4b23      	ldr	r3, [pc, #140]	@ (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	091b      	lsrs	r3, r3, #4
 800445a:	f003 0307 	and.w	r3, r3, #7
 800445e:	3301      	adds	r3, #1
 8004460:	fbb2 f3f3 	udiv	r3, r2, r3
 8004464:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8004466:	4b1f      	ldr	r3, [pc, #124]	@ (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	0e5b      	lsrs	r3, r3, #25
 800446c:	f003 0303 	and.w	r3, r3, #3
 8004470:	3301      	adds	r3, #1
 8004472:	005b      	lsls	r3, r3, #1
 8004474:	69ba      	ldr	r2, [r7, #24]
 8004476:	fbb2 f3f3 	udiv	r3, r2, r3
 800447a:	61fb      	str	r3, [r7, #28]
          break;
 800447c:	e02d      	b.n	80044da <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 800447e:	4b19      	ldr	r3, [pc, #100]	@ (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004486:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800448a:	d128      	bne.n	80044de <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 800448c:	4b15      	ldr	r3, [pc, #84]	@ (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800448e:	695b      	ldr	r3, [r3, #20]
 8004490:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d022      	beq.n	80044de <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8004498:	4b12      	ldr	r3, [pc, #72]	@ (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800449a:	695b      	ldr	r3, [r3, #20]
 800449c:	0a1b      	lsrs	r3, r3, #8
 800449e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044a2:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	fb03 f202 	mul.w	r2, r3, r2
 80044ac:	4b0d      	ldr	r3, [pc, #52]	@ (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	091b      	lsrs	r3, r3, #4
 80044b2:	f003 0307 	and.w	r3, r3, #7
 80044b6:	3301      	adds	r3, #1
 80044b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044bc:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 80044be:	4b09      	ldr	r3, [pc, #36]	@ (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	0e5b      	lsrs	r3, r3, #25
 80044c4:	f003 0303 	and.w	r3, r3, #3
 80044c8:	3301      	adds	r3, #1
 80044ca:	005b      	lsls	r3, r3, #1
 80044cc:	69ba      	ldr	r2, [r7, #24]
 80044ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d2:	61fb      	str	r3, [r7, #28]
          break;
 80044d4:	e003      	b.n	80044de <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 80044d6:	bf00      	nop
 80044d8:	e15c      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80044da:	bf00      	nop
 80044dc:	e15a      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80044de:	bf00      	nop
        break;
 80044e0:	e158      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80044e2:	bf00      	nop
 80044e4:	40021000 	.word	0x40021000
 80044e8:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80044ec:	4b9d      	ldr	r3, [pc, #628]	@ (8004764 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80044ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80044f6:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d103      	bne.n	8004506 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 80044fe:	f7ff f885 	bl	800360c <HAL_RCC_GetPCLK2Freq>
 8004502:	61f8      	str	r0, [r7, #28]
        break;
 8004504:	e146      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 8004506:	f7fe ffd3 	bl	80034b0 <HAL_RCC_GetSysClockFreq>
 800450a:	61f8      	str	r0, [r7, #28]
        break;
 800450c:	e142      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800450e:	4b95      	ldr	r3, [pc, #596]	@ (8004764 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004510:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004514:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004518:	613b      	str	r3, [r7, #16]
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004520:	d013      	beq.n	800454a <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004528:	d819      	bhi.n	800455e <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d004      	beq.n	800453a <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004536:	d004      	beq.n	8004542 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 8004538:	e011      	b.n	800455e <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 800453a:	f7ff f851 	bl	80035e0 <HAL_RCC_GetPCLK1Freq>
 800453e:	61f8      	str	r0, [r7, #28]
          break;
 8004540:	e010      	b.n	8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 8004542:	f7fe ffb5 	bl	80034b0 <HAL_RCC_GetSysClockFreq>
 8004546:	61f8      	str	r0, [r7, #28]
          break;
 8004548:	e00c      	b.n	8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800454a:	4b86      	ldr	r3, [pc, #536]	@ (8004764 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004552:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004556:	d104      	bne.n	8004562 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 8004558:	4b83      	ldr	r3, [pc, #524]	@ (8004768 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800455a:	61fb      	str	r3, [r7, #28]
          break;
 800455c:	e001      	b.n	8004562 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 800455e:	bf00      	nop
 8004560:	e118      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004562:	bf00      	nop
        break;
 8004564:	e116      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004566:	4b7f      	ldr	r3, [pc, #508]	@ (8004764 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004568:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800456c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004570:	613b      	str	r3, [r7, #16]
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004578:	d013      	beq.n	80045a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004580:	d819      	bhi.n	80045b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d004      	beq.n	8004592 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800458e:	d004      	beq.n	800459a <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 8004590:	e011      	b.n	80045b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004592:	f7ff f825 	bl	80035e0 <HAL_RCC_GetPCLK1Freq>
 8004596:	61f8      	str	r0, [r7, #28]
          break;
 8004598:	e010      	b.n	80045bc <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 800459a:	f7fe ff89 	bl	80034b0 <HAL_RCC_GetSysClockFreq>
 800459e:	61f8      	str	r0, [r7, #28]
          break;
 80045a0:	e00c      	b.n	80045bc <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80045a2:	4b70      	ldr	r3, [pc, #448]	@ (8004764 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045ae:	d104      	bne.n	80045ba <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 80045b0:	4b6d      	ldr	r3, [pc, #436]	@ (8004768 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80045b2:	61fb      	str	r3, [r7, #28]
          break;
 80045b4:	e001      	b.n	80045ba <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 80045b6:	bf00      	nop
 80045b8:	e0ec      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80045ba:	bf00      	nop
        break;
 80045bc:	e0ea      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80045be:	4b69      	ldr	r3, [pc, #420]	@ (8004764 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80045c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80045c8:	613b      	str	r3, [r7, #16]
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80045d0:	d013      	beq.n	80045fa <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80045d8:	d819      	bhi.n	800460e <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d004      	beq.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045e6:	d004      	beq.n	80045f2 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 80045e8:	e011      	b.n	800460e <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 80045ea:	f7fe fff9 	bl	80035e0 <HAL_RCC_GetPCLK1Freq>
 80045ee:	61f8      	str	r0, [r7, #28]
          break;
 80045f0:	e010      	b.n	8004614 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 80045f2:	f7fe ff5d 	bl	80034b0 <HAL_RCC_GetSysClockFreq>
 80045f6:	61f8      	str	r0, [r7, #28]
          break;
 80045f8:	e00c      	b.n	8004614 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80045fa:	4b5a      	ldr	r3, [pc, #360]	@ (8004764 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004602:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004606:	d104      	bne.n	8004612 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 8004608:	4b57      	ldr	r3, [pc, #348]	@ (8004768 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800460a:	61fb      	str	r3, [r7, #28]
          break;
 800460c:	e001      	b.n	8004612 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 800460e:	bf00      	nop
 8004610:	e0c0      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004612:	bf00      	nop
        break;
 8004614:	e0be      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004616:	4b53      	ldr	r3, [pc, #332]	@ (8004764 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004618:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800461c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004620:	613b      	str	r3, [r7, #16]
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004628:	d02c      	beq.n	8004684 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004630:	d833      	bhi.n	800469a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004638:	d01a      	beq.n	8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004640:	d82b      	bhi.n	800469a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d004      	beq.n	8004652 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800464e:	d004      	beq.n	800465a <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 8004650:	e023      	b.n	800469a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004652:	f7fe ffc5 	bl	80035e0 <HAL_RCC_GetPCLK1Freq>
 8004656:	61f8      	str	r0, [r7, #28]
          break;
 8004658:	e026      	b.n	80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800465a:	4b42      	ldr	r3, [pc, #264]	@ (8004764 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800465c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004660:	f003 0302 	and.w	r3, r3, #2
 8004664:	2b02      	cmp	r3, #2
 8004666:	d11a      	bne.n	800469e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 8004668:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800466c:	61fb      	str	r3, [r7, #28]
          break;
 800466e:	e016      	b.n	800469e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004670:	4b3c      	ldr	r3, [pc, #240]	@ (8004764 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004678:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800467c:	d111      	bne.n	80046a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 800467e:	4b3a      	ldr	r3, [pc, #232]	@ (8004768 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004680:	61fb      	str	r3, [r7, #28]
          break;
 8004682:	e00e      	b.n	80046a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004684:	4b37      	ldr	r3, [pc, #220]	@ (8004764 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004686:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800468a:	f003 0302 	and.w	r3, r3, #2
 800468e:	2b02      	cmp	r3, #2
 8004690:	d109      	bne.n	80046a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 8004692:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004696:	61fb      	str	r3, [r7, #28]
          break;
 8004698:	e005      	b.n	80046a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 800469a:	bf00      	nop
 800469c:	e07a      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800469e:	bf00      	nop
 80046a0:	e078      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80046a2:	bf00      	nop
 80046a4:	e076      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80046a6:	bf00      	nop
        break;
 80046a8:	e074      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80046aa:	4b2e      	ldr	r3, [pc, #184]	@ (8004764 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80046ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046b0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80046b4:	613b      	str	r3, [r7, #16]
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80046bc:	d02c      	beq.n	8004718 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80046c4:	d833      	bhi.n	800472e <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80046cc:	d01a      	beq.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80046d4:	d82b      	bhi.n	800472e <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d004      	beq.n	80046e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046e2:	d004      	beq.n	80046ee <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 80046e4:	e023      	b.n	800472e <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 80046e6:	f7fe ff7b 	bl	80035e0 <HAL_RCC_GetPCLK1Freq>
 80046ea:	61f8      	str	r0, [r7, #28]
          break;
 80046ec:	e026      	b.n	800473c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80046ee:	4b1d      	ldr	r3, [pc, #116]	@ (8004764 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80046f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d11a      	bne.n	8004732 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 80046fc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004700:	61fb      	str	r3, [r7, #28]
          break;
 8004702:	e016      	b.n	8004732 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004704:	4b17      	ldr	r3, [pc, #92]	@ (8004764 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800470c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004710:	d111      	bne.n	8004736 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 8004712:	4b15      	ldr	r3, [pc, #84]	@ (8004768 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004714:	61fb      	str	r3, [r7, #28]
          break;
 8004716:	e00e      	b.n	8004736 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004718:	4b12      	ldr	r3, [pc, #72]	@ (8004764 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800471a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800471e:	f003 0302 	and.w	r3, r3, #2
 8004722:	2b02      	cmp	r3, #2
 8004724:	d109      	bne.n	800473a <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 8004726:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800472a:	61fb      	str	r3, [r7, #28]
          break;
 800472c:	e005      	b.n	800473a <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 800472e:	bf00      	nop
 8004730:	e030      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004732:	bf00      	nop
 8004734:	e02e      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004736:	bf00      	nop
 8004738:	e02c      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800473a:	bf00      	nop
        break;
 800473c:	e02a      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 800473e:	4b09      	ldr	r3, [pc, #36]	@ (8004764 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004740:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004744:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004748:	613b      	str	r3, [r7, #16]
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d004      	beq.n	800475a <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004756:	d009      	beq.n	800476c <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 8004758:	e012      	b.n	8004780 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 800475a:	f7fe ff41 	bl	80035e0 <HAL_RCC_GetPCLK1Freq>
 800475e:	61f8      	str	r0, [r7, #28]
          break;
 8004760:	e00e      	b.n	8004780 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 8004762:	bf00      	nop
 8004764:	40021000 	.word	0x40021000
 8004768:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800476c:	4b0c      	ldr	r3, [pc, #48]	@ (80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004774:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004778:	d101      	bne.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 800477a:	4b0a      	ldr	r3, [pc, #40]	@ (80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 800477c:	61fb      	str	r3, [r7, #28]
          break;
 800477e:	bf00      	nop
        break;
 8004780:	e008      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004782:	bf00      	nop
 8004784:	e006      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004786:	bf00      	nop
 8004788:	e004      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800478a:	bf00      	nop
 800478c:	e002      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800478e:	bf00      	nop
 8004790:	e000      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004792:	bf00      	nop
    }
  }

  return(frequency);
 8004794:	69fb      	ldr	r3, [r7, #28]
}
 8004796:	4618      	mov	r0, r3
 8004798:	3720      	adds	r7, #32
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	40021000 	.word	0x40021000
 80047a4:	00f42400 	.word	0x00f42400

080047a8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047b2:	2300      	movs	r3, #0
 80047b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047b6:	4b75      	ldr	r3, [pc, #468]	@ (800498c <RCCEx_PLLSAI1_Config+0x1e4>)
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	f003 0303 	and.w	r3, r3, #3
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d018      	beq.n	80047f4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80047c2:	4b72      	ldr	r3, [pc, #456]	@ (800498c <RCCEx_PLLSAI1_Config+0x1e4>)
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	f003 0203 	and.w	r2, r3, #3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d10d      	bne.n	80047ee <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
       ||
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d009      	beq.n	80047ee <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80047da:	4b6c      	ldr	r3, [pc, #432]	@ (800498c <RCCEx_PLLSAI1_Config+0x1e4>)
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	091b      	lsrs	r3, r3, #4
 80047e0:	f003 0307 	and.w	r3, r3, #7
 80047e4:	1c5a      	adds	r2, r3, #1
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
       ||
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d047      	beq.n	800487e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	73fb      	strb	r3, [r7, #15]
 80047f2:	e044      	b.n	800487e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2b03      	cmp	r3, #3
 80047fa:	d018      	beq.n	800482e <RCCEx_PLLSAI1_Config+0x86>
 80047fc:	2b03      	cmp	r3, #3
 80047fe:	d825      	bhi.n	800484c <RCCEx_PLLSAI1_Config+0xa4>
 8004800:	2b01      	cmp	r3, #1
 8004802:	d002      	beq.n	800480a <RCCEx_PLLSAI1_Config+0x62>
 8004804:	2b02      	cmp	r3, #2
 8004806:	d009      	beq.n	800481c <RCCEx_PLLSAI1_Config+0x74>
 8004808:	e020      	b.n	800484c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800480a:	4b60      	ldr	r3, [pc, #384]	@ (800498c <RCCEx_PLLSAI1_Config+0x1e4>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d11d      	bne.n	8004852 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800481a:	e01a      	b.n	8004852 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800481c:	4b5b      	ldr	r3, [pc, #364]	@ (800498c <RCCEx_PLLSAI1_Config+0x1e4>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004824:	2b00      	cmp	r3, #0
 8004826:	d116      	bne.n	8004856 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800482c:	e013      	b.n	8004856 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800482e:	4b57      	ldr	r3, [pc, #348]	@ (800498c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d10f      	bne.n	800485a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800483a:	4b54      	ldr	r3, [pc, #336]	@ (800498c <RCCEx_PLLSAI1_Config+0x1e4>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d109      	bne.n	800485a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800484a:	e006      	b.n	800485a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	73fb      	strb	r3, [r7, #15]
      break;
 8004850:	e004      	b.n	800485c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004852:	bf00      	nop
 8004854:	e002      	b.n	800485c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004856:	bf00      	nop
 8004858:	e000      	b.n	800485c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800485a:	bf00      	nop
    }

    if(status == HAL_OK)
 800485c:	7bfb      	ldrb	r3, [r7, #15]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10d      	bne.n	800487e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004862:	4b4a      	ldr	r3, [pc, #296]	@ (800498c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6819      	ldr	r1, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	3b01      	subs	r3, #1
 8004874:	011b      	lsls	r3, r3, #4
 8004876:	430b      	orrs	r3, r1
 8004878:	4944      	ldr	r1, [pc, #272]	@ (800498c <RCCEx_PLLSAI1_Config+0x1e4>)
 800487a:	4313      	orrs	r3, r2
 800487c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800487e:	7bfb      	ldrb	r3, [r7, #15]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d17d      	bne.n	8004980 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004884:	4b41      	ldr	r3, [pc, #260]	@ (800498c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a40      	ldr	r2, [pc, #256]	@ (800498c <RCCEx_PLLSAI1_Config+0x1e4>)
 800488a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800488e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004890:	f7fc fe10 	bl	80014b4 <HAL_GetTick>
 8004894:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004896:	e009      	b.n	80048ac <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004898:	f7fc fe0c 	bl	80014b4 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d902      	bls.n	80048ac <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	73fb      	strb	r3, [r7, #15]
        break;
 80048aa:	e005      	b.n	80048b8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048ac:	4b37      	ldr	r3, [pc, #220]	@ (800498c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d1ef      	bne.n	8004898 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80048b8:	7bfb      	ldrb	r3, [r7, #15]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d160      	bne.n	8004980 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d111      	bne.n	80048e8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048c4:	4b31      	ldr	r3, [pc, #196]	@ (800498c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80048cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	6892      	ldr	r2, [r2, #8]
 80048d4:	0211      	lsls	r1, r2, #8
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	68d2      	ldr	r2, [r2, #12]
 80048da:	0912      	lsrs	r2, r2, #4
 80048dc:	0452      	lsls	r2, r2, #17
 80048de:	430a      	orrs	r2, r1
 80048e0:	492a      	ldr	r1, [pc, #168]	@ (800498c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	610b      	str	r3, [r1, #16]
 80048e6:	e027      	b.n	8004938 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d112      	bne.n	8004914 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048ee:	4b27      	ldr	r3, [pc, #156]	@ (800498c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80048f6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	6892      	ldr	r2, [r2, #8]
 80048fe:	0211      	lsls	r1, r2, #8
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	6912      	ldr	r2, [r2, #16]
 8004904:	0852      	lsrs	r2, r2, #1
 8004906:	3a01      	subs	r2, #1
 8004908:	0552      	lsls	r2, r2, #21
 800490a:	430a      	orrs	r2, r1
 800490c:	491f      	ldr	r1, [pc, #124]	@ (800498c <RCCEx_PLLSAI1_Config+0x1e4>)
 800490e:	4313      	orrs	r3, r2
 8004910:	610b      	str	r3, [r1, #16]
 8004912:	e011      	b.n	8004938 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004914:	4b1d      	ldr	r3, [pc, #116]	@ (800498c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800491c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	6892      	ldr	r2, [r2, #8]
 8004924:	0211      	lsls	r1, r2, #8
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	6952      	ldr	r2, [r2, #20]
 800492a:	0852      	lsrs	r2, r2, #1
 800492c:	3a01      	subs	r2, #1
 800492e:	0652      	lsls	r2, r2, #25
 8004930:	430a      	orrs	r2, r1
 8004932:	4916      	ldr	r1, [pc, #88]	@ (800498c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004934:	4313      	orrs	r3, r2
 8004936:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004938:	4b14      	ldr	r3, [pc, #80]	@ (800498c <RCCEx_PLLSAI1_Config+0x1e4>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a13      	ldr	r2, [pc, #76]	@ (800498c <RCCEx_PLLSAI1_Config+0x1e4>)
 800493e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004942:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004944:	f7fc fdb6 	bl	80014b4 <HAL_GetTick>
 8004948:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800494a:	e009      	b.n	8004960 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800494c:	f7fc fdb2 	bl	80014b4 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	2b02      	cmp	r3, #2
 8004958:	d902      	bls.n	8004960 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	73fb      	strb	r3, [r7, #15]
          break;
 800495e:	e005      	b.n	800496c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004960:	4b0a      	ldr	r3, [pc, #40]	@ (800498c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d0ef      	beq.n	800494c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800496c:	7bfb      	ldrb	r3, [r7, #15]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d106      	bne.n	8004980 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004972:	4b06      	ldr	r3, [pc, #24]	@ (800498c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004974:	691a      	ldr	r2, [r3, #16]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	699b      	ldr	r3, [r3, #24]
 800497a:	4904      	ldr	r1, [pc, #16]	@ (800498c <RCCEx_PLLSAI1_Config+0x1e4>)
 800497c:	4313      	orrs	r3, r2
 800497e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004980:	7bfb      	ldrb	r3, [r7, #15]
}
 8004982:	4618      	mov	r0, r3
 8004984:	3710      	adds	r7, #16
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	40021000 	.word	0x40021000

08004990 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800499a:	2300      	movs	r3, #0
 800499c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800499e:	4b6a      	ldr	r3, [pc, #424]	@ (8004b48 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	f003 0303 	and.w	r3, r3, #3
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d018      	beq.n	80049dc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80049aa:	4b67      	ldr	r3, [pc, #412]	@ (8004b48 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	f003 0203 	and.w	r2, r3, #3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d10d      	bne.n	80049d6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
       ||
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d009      	beq.n	80049d6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80049c2:	4b61      	ldr	r3, [pc, #388]	@ (8004b48 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	091b      	lsrs	r3, r3, #4
 80049c8:	f003 0307 	and.w	r3, r3, #7
 80049cc:	1c5a      	adds	r2, r3, #1
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	685b      	ldr	r3, [r3, #4]
       ||
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d047      	beq.n	8004a66 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	73fb      	strb	r3, [r7, #15]
 80049da:	e044      	b.n	8004a66 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2b03      	cmp	r3, #3
 80049e2:	d018      	beq.n	8004a16 <RCCEx_PLLSAI2_Config+0x86>
 80049e4:	2b03      	cmp	r3, #3
 80049e6:	d825      	bhi.n	8004a34 <RCCEx_PLLSAI2_Config+0xa4>
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d002      	beq.n	80049f2 <RCCEx_PLLSAI2_Config+0x62>
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d009      	beq.n	8004a04 <RCCEx_PLLSAI2_Config+0x74>
 80049f0:	e020      	b.n	8004a34 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80049f2:	4b55      	ldr	r3, [pc, #340]	@ (8004b48 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0302 	and.w	r3, r3, #2
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d11d      	bne.n	8004a3a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a02:	e01a      	b.n	8004a3a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a04:	4b50      	ldr	r3, [pc, #320]	@ (8004b48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d116      	bne.n	8004a3e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a14:	e013      	b.n	8004a3e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a16:	4b4c      	ldr	r3, [pc, #304]	@ (8004b48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d10f      	bne.n	8004a42 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a22:	4b49      	ldr	r3, [pc, #292]	@ (8004b48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d109      	bne.n	8004a42 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a32:	e006      	b.n	8004a42 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	73fb      	strb	r3, [r7, #15]
      break;
 8004a38:	e004      	b.n	8004a44 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a3a:	bf00      	nop
 8004a3c:	e002      	b.n	8004a44 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a3e:	bf00      	nop
 8004a40:	e000      	b.n	8004a44 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a42:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a44:	7bfb      	ldrb	r3, [r7, #15]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d10d      	bne.n	8004a66 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a4a:	4b3f      	ldr	r3, [pc, #252]	@ (8004b48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6819      	ldr	r1, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	011b      	lsls	r3, r3, #4
 8004a5e:	430b      	orrs	r3, r1
 8004a60:	4939      	ldr	r1, [pc, #228]	@ (8004b48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a66:	7bfb      	ldrb	r3, [r7, #15]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d167      	bne.n	8004b3c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004a6c:	4b36      	ldr	r3, [pc, #216]	@ (8004b48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a35      	ldr	r2, [pc, #212]	@ (8004b48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a78:	f7fc fd1c 	bl	80014b4 <HAL_GetTick>
 8004a7c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a7e:	e009      	b.n	8004a94 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a80:	f7fc fd18 	bl	80014b4 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d902      	bls.n	8004a94 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	73fb      	strb	r3, [r7, #15]
        break;
 8004a92:	e005      	b.n	8004aa0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a94:	4b2c      	ldr	r3, [pc, #176]	@ (8004b48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d1ef      	bne.n	8004a80 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004aa0:	7bfb      	ldrb	r3, [r7, #15]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d14a      	bne.n	8004b3c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d111      	bne.n	8004ad0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004aac:	4b26      	ldr	r3, [pc, #152]	@ (8004b48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aae:	695b      	ldr	r3, [r3, #20]
 8004ab0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004ab4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	6892      	ldr	r2, [r2, #8]
 8004abc:	0211      	lsls	r1, r2, #8
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	68d2      	ldr	r2, [r2, #12]
 8004ac2:	0912      	lsrs	r2, r2, #4
 8004ac4:	0452      	lsls	r2, r2, #17
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	491f      	ldr	r1, [pc, #124]	@ (8004b48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	614b      	str	r3, [r1, #20]
 8004ace:	e011      	b.n	8004af4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ad0:	4b1d      	ldr	r3, [pc, #116]	@ (8004b48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004ad8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	6892      	ldr	r2, [r2, #8]
 8004ae0:	0211      	lsls	r1, r2, #8
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	6912      	ldr	r2, [r2, #16]
 8004ae6:	0852      	lsrs	r2, r2, #1
 8004ae8:	3a01      	subs	r2, #1
 8004aea:	0652      	lsls	r2, r2, #25
 8004aec:	430a      	orrs	r2, r1
 8004aee:	4916      	ldr	r1, [pc, #88]	@ (8004b48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004af4:	4b14      	ldr	r3, [pc, #80]	@ (8004b48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a13      	ldr	r2, [pc, #76]	@ (8004b48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004afa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004afe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b00:	f7fc fcd8 	bl	80014b4 <HAL_GetTick>
 8004b04:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b06:	e009      	b.n	8004b1c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b08:	f7fc fcd4 	bl	80014b4 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d902      	bls.n	8004b1c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	73fb      	strb	r3, [r7, #15]
          break;
 8004b1a:	e005      	b.n	8004b28 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8004b48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d0ef      	beq.n	8004b08 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004b28:	7bfb      	ldrb	r3, [r7, #15]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d106      	bne.n	8004b3c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004b2e:	4b06      	ldr	r3, [pc, #24]	@ (8004b48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b30:	695a      	ldr	r2, [r3, #20]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	4904      	ldr	r1, [pc, #16]	@ (8004b48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	40021000 	.word	0x40021000

08004b4c <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b089      	sub	sp, #36	@ 0x24
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8004b56:	2300      	movs	r3, #0
 8004b58:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b68:	d10c      	bne.n	8004b84 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004b6a:	4b6e      	ldr	r3, [pc, #440]	@ (8004d24 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b70:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004b74:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004b7c:	d112      	bne.n	8004ba4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004b7e:	4b6a      	ldr	r3, [pc, #424]	@ (8004d28 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8004b80:	61fb      	str	r3, [r7, #28]
 8004b82:	e00f      	b.n	8004ba4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b8a:	d10b      	bne.n	8004ba4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8004b8c:	4b65      	ldr	r3, [pc, #404]	@ (8004d24 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b92:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8004b96:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004b9e:	d101      	bne.n	8004ba4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8004ba0:	4b61      	ldr	r3, [pc, #388]	@ (8004d28 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8004ba2:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	f040 80b4 	bne.w	8004d14 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004bb6:	d003      	beq.n	8004bc0 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004bbe:	d135      	bne.n	8004c2c <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004bc0:	4b58      	ldr	r3, [pc, #352]	@ (8004d24 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bc8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004bcc:	f040 80a1 	bne.w	8004d12 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8004bd0:	4b54      	ldr	r3, [pc, #336]	@ (8004d24 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f000 809a 	beq.w	8004d12 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004bde:	4b51      	ldr	r3, [pc, #324]	@ (8004d24 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	091b      	lsrs	r3, r3, #4
 8004be4:	f003 0307 	and.w	r3, r3, #7
 8004be8:	3301      	adds	r3, #1
 8004bea:	693a      	ldr	r2, [r7, #16]
 8004bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf0:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004bf2:	4b4c      	ldr	r3, [pc, #304]	@ (8004d24 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	0a1b      	lsrs	r3, r3, #8
 8004bf8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bfc:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d10a      	bne.n	8004c1a <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004c04:	4b47      	ldr	r3, [pc, #284]	@ (8004d24 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d002      	beq.n	8004c16 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8004c10:	2311      	movs	r3, #17
 8004c12:	617b      	str	r3, [r7, #20]
 8004c14:	e001      	b.n	8004c1a <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 8004c16:	2307      	movs	r3, #7
 8004c18:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	fb03 f202 	mul.w	r2, r3, r2
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c28:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004c2a:	e072      	b.n	8004d12 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d133      	bne.n	8004c9a <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8004c32:	4b3c      	ldr	r3, [pc, #240]	@ (8004d24 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c3a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c3e:	d169      	bne.n	8004d14 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8004c40:	4b38      	ldr	r3, [pc, #224]	@ (8004d24 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d063      	beq.n	8004d14 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004c4c:	4b35      	ldr	r3, [pc, #212]	@ (8004d24 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	091b      	lsrs	r3, r3, #4
 8004c52:	f003 0307 	and.w	r3, r3, #7
 8004c56:	3301      	adds	r3, #1
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c5e:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004c60:	4b30      	ldr	r3, [pc, #192]	@ (8004d24 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	0a1b      	lsrs	r3, r3, #8
 8004c66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c6a:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10a      	bne.n	8004c88 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8004c72:	4b2c      	ldr	r3, [pc, #176]	@ (8004d24 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d002      	beq.n	8004c84 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 8004c7e:	2311      	movs	r3, #17
 8004c80:	617b      	str	r3, [r7, #20]
 8004c82:	e001      	b.n	8004c88 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8004c84:	2307      	movs	r3, #7
 8004c86:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	fb03 f202 	mul.w	r2, r3, r2
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c96:	61fb      	str	r3, [r7, #28]
 8004c98:	e03c      	b.n	8004d14 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ca0:	d003      	beq.n	8004caa <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ca8:	d134      	bne.n	8004d14 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8004caa:	4b1e      	ldr	r3, [pc, #120]	@ (8004d24 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004cb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004cb6:	d12d      	bne.n	8004d14 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8004cb8:	4b1a      	ldr	r3, [pc, #104]	@ (8004d24 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004cba:	695b      	ldr	r3, [r3, #20]
 8004cbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d027      	beq.n	8004d14 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004cc4:	4b17      	ldr	r3, [pc, #92]	@ (8004d24 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	091b      	lsrs	r3, r3, #4
 8004cca:	f003 0307 	and.w	r3, r3, #7
 8004cce:	3301      	adds	r3, #1
 8004cd0:	693a      	ldr	r2, [r7, #16]
 8004cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd6:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8004cd8:	4b12      	ldr	r3, [pc, #72]	@ (8004d24 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004cda:	695b      	ldr	r3, [r3, #20]
 8004cdc:	0a1b      	lsrs	r3, r3, #8
 8004cde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ce2:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d10a      	bne.n	8004d00 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8004cea:	4b0e      	ldr	r3, [pc, #56]	@ (8004d24 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d002      	beq.n	8004cfc <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 8004cf6:	2311      	movs	r3, #17
 8004cf8:	617b      	str	r3, [r7, #20]
 8004cfa:	e001      	b.n	8004d00 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 8004cfc:	2307      	movs	r3, #7
 8004cfe:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	fb03 f202 	mul.w	r2, r3, r2
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d0e:	61fb      	str	r3, [r7, #28]
 8004d10:	e000      	b.n	8004d14 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004d12:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8004d14:	69fb      	ldr	r3, [r7, #28]
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3724      	adds	r7, #36	@ 0x24
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr
 8004d22:	bf00      	nop
 8004d24:	40021000 	.word	0x40021000
 8004d28:	001fff68 	.word	0x001fff68

08004d2c <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b086      	sub	sp, #24
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]
 8004d38:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d904      	bls.n	8004d4a <HAL_SAI_InitProtocol+0x1e>
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	3b03      	subs	r3, #3
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d812      	bhi.n	8004d6e <HAL_SAI_InitProtocol+0x42>
 8004d48:	e008      	b.n	8004d5c <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	68b9      	ldr	r1, [r7, #8]
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f000 fba3 	bl	800549c <SAI_InitI2S>
 8004d56:	4603      	mov	r3, r0
 8004d58:	75fb      	strb	r3, [r7, #23]
      break;
 8004d5a:	e00b      	b.n	8004d74 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	68b9      	ldr	r1, [r7, #8]
 8004d62:	68f8      	ldr	r0, [r7, #12]
 8004d64:	f000 fc4c 	bl	8005600 <SAI_InitPCM>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	75fb      	strb	r3, [r7, #23]
      break;
 8004d6c:	e002      	b.n	8004d74 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	75fb      	strb	r3, [r7, #23]
      break;
 8004d72:	bf00      	nop
  }

  if (status == HAL_OK)
 8004d74:	7dfb      	ldrb	r3, [r7, #23]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d104      	bne.n	8004d84 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	f000 f808 	bl	8004d90 <HAL_SAI_Init>
 8004d80:	4603      	mov	r3, r0
 8004d82:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004d84:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3718      	adds	r7, #24
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
	...

08004d90 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b088      	sub	sp, #32
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d101      	bne.n	8004da2 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e155      	b.n	800504e <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d106      	bne.n	8004dbc <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f7fb fee8 	bl	8000b8c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 fca1 	bl	8005704 <SAI_Disable>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d001      	beq.n	8004dcc <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e140      	b.n	800504e <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2202      	movs	r2, #2
 8004dd0:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d00c      	beq.n	8004df6 <HAL_SAI_Init+0x66>
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d80d      	bhi.n	8004dfc <HAL_SAI_Init+0x6c>
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d002      	beq.n	8004dea <HAL_SAI_Init+0x5a>
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d003      	beq.n	8004df0 <HAL_SAI_Init+0x60>
 8004de8:	e008      	b.n	8004dfc <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8004dea:	2300      	movs	r3, #0
 8004dec:	61fb      	str	r3, [r7, #28]
      break;
 8004dee:	e008      	b.n	8004e02 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004df0:	2310      	movs	r3, #16
 8004df2:	61fb      	str	r3, [r7, #28]
      break;
 8004df4:	e005      	b.n	8004e02 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8004df6:	2320      	movs	r3, #32
 8004df8:	61fb      	str	r3, [r7, #28]
      break;
 8004dfa:	e002      	b.n	8004e02 <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	61fb      	str	r3, [r7, #28]
      break;
 8004e00:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	2b03      	cmp	r3, #3
 8004e08:	d81d      	bhi.n	8004e46 <HAL_SAI_Init+0xb6>
 8004e0a:	a201      	add	r2, pc, #4	@ (adr r2, 8004e10 <HAL_SAI_Init+0x80>)
 8004e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e10:	08004e21 	.word	0x08004e21
 8004e14:	08004e27 	.word	0x08004e27
 8004e18:	08004e2f 	.word	0x08004e2f
 8004e1c:	08004e37 	.word	0x08004e37
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8004e20:	2300      	movs	r3, #0
 8004e22:	617b      	str	r3, [r7, #20]
      break;
 8004e24:	e012      	b.n	8004e4c <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8004e26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004e2a:	617b      	str	r3, [r7, #20]
      break;
 8004e2c:	e00e      	b.n	8004e4c <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004e2e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004e32:	617b      	str	r3, [r7, #20]
      break;
 8004e34:	e00a      	b.n	8004e4c <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004e36:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004e3a:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	f043 0301 	orr.w	r3, r3, #1
 8004e42:	61fb      	str	r3, [r7, #28]
      break;
 8004e44:	e002      	b.n	8004e4c <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8004e46:	2300      	movs	r3, #0
 8004e48:	617b      	str	r3, [r7, #20]
      break;
 8004e4a:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a81      	ldr	r2, [pc, #516]	@ (8005058 <HAL_SAI_Init+0x2c8>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d004      	beq.n	8004e60 <HAL_SAI_Init+0xd0>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a80      	ldr	r2, [pc, #512]	@ (800505c <HAL_SAI_Init+0x2cc>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d103      	bne.n	8004e68 <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 8004e60:	4a7f      	ldr	r2, [pc, #508]	@ (8005060 <HAL_SAI_Init+0x2d0>)
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	6013      	str	r3, [r2, #0]
 8004e66:	e002      	b.n	8004e6e <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8004e68:	4a7e      	ldr	r2, [pc, #504]	@ (8005064 <HAL_SAI_Init+0x2d4>)
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	69db      	ldr	r3, [r3, #28]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d041      	beq.n	8004efa <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a77      	ldr	r2, [pc, #476]	@ (8005058 <HAL_SAI_Init+0x2c8>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d004      	beq.n	8004e8a <HAL_SAI_Init+0xfa>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a75      	ldr	r2, [pc, #468]	@ (800505c <HAL_SAI_Init+0x2cc>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d105      	bne.n	8004e96 <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004e8a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004e8e:	f7fe ff1d 	bl	8003ccc <HAL_RCCEx_GetPeriphCLKFreq>
 8004e92:	6138      	str	r0, [r7, #16]
 8004e94:	e004      	b.n	8004ea0 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004e96:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004e9a:	f7fe ff17 	bl	8003ccc <HAL_RCCEx_GetPeriphCLKFreq>
 8004e9e:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	4413      	add	r3, r2
 8004ea8:	005b      	lsls	r3, r3, #1
 8004eaa:	461a      	mov	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	69db      	ldr	r3, [r3, #28]
 8004eb0:	025b      	lsls	r3, r3, #9
 8004eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb6:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	4a6b      	ldr	r2, [pc, #428]	@ (8005068 <HAL_SAI_Init+0x2d8>)
 8004ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec0:	08da      	lsrs	r2, r3, #3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8004ec6:	68f9      	ldr	r1, [r7, #12]
 8004ec8:	4b67      	ldr	r3, [pc, #412]	@ (8005068 <HAL_SAI_Init+0x2d8>)
 8004eca:	fba3 2301 	umull	r2, r3, r3, r1
 8004ece:	08da      	lsrs	r2, r3, #3
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	4413      	add	r3, r2
 8004ed6:	005b      	lsls	r3, r3, #1
 8004ed8:	1aca      	subs	r2, r1, r3
 8004eda:	2a08      	cmp	r2, #8
 8004edc:	d904      	bls.n	8004ee8 <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	1c5a      	adds	r2, r3, #1
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eec:	2b04      	cmp	r3, #4
 8004eee:	d104      	bne.n	8004efa <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a1b      	ldr	r3, [r3, #32]
 8004ef4:	085a      	lsrs	r2, r3, #1
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d003      	beq.n	8004f0a <HAL_SAI_Init+0x17a>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d109      	bne.n	8004f1e <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d101      	bne.n	8004f16 <HAL_SAI_Init+0x186>
 8004f12:	2300      	movs	r3, #0
 8004f14:	e001      	b.n	8004f1a <HAL_SAI_Init+0x18a>
 8004f16:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004f1a:	61bb      	str	r3, [r7, #24]
 8004f1c:	e008      	b.n	8004f30 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d102      	bne.n	8004f2c <HAL_SAI_Init+0x19c>
 8004f26:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004f2a:	e000      	b.n	8004f2e <HAL_SAI_Init+0x19e>
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	6819      	ldr	r1, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	4b4c      	ldr	r3, [pc, #304]	@ (800506c <HAL_SAI_Init+0x2dc>)
 8004f3c:	400b      	ands	r3, r1
 8004f3e:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	6819      	ldr	r1, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685a      	ldr	r2, [r3, #4]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f4e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004f54:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f5a:	431a      	orrs	r2, r3
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                             \
 8004f68:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004f74:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	051b      	lsls	r3, r3, #20
 8004f7c:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	430a      	orrs	r2, r1
 8004f84:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	6812      	ldr	r2, [r2, #0]
 8004f90:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8004f94:	f023 030f 	bic.w	r3, r3, #15
 8004f98:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	6859      	ldr	r1, [r3, #4]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	699a      	ldr	r2, [r3, #24]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fa8:	431a      	orrs	r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fae:	431a      	orrs	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	6899      	ldr	r1, [r3, #8]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	4b2b      	ldr	r3, [pc, #172]	@ (8005070 <HAL_SAI_Init+0x2e0>)
 8004fc4:	400b      	ands	r3, r1
 8004fc6:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	6899      	ldr	r1, [r3, #8]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd2:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004fd8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 8004fde:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 8004fe4:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fea:	3b01      	subs	r3, #1
 8004fec:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8004fee:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	430a      	orrs	r2, r1
 8004ff6:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68d9      	ldr	r1, [r3, #12]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8005006:	400b      	ands	r3, r1
 8005008:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68d9      	ldr	r1, [r3, #12]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005018:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800501e:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005020:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005026:	3b01      	subs	r3, #1
 8005028:	021b      	lsls	r3, r3, #8
 800502a:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	430a      	orrs	r2, r1
 8005032:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3720      	adds	r7, #32
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	40015404 	.word	0x40015404
 800505c:	40015424 	.word	0x40015424
 8005060:	40015400 	.word	0x40015400
 8005064:	40015800 	.word	0x40015800
 8005068:	cccccccd 	.word	0xcccccccd
 800506c:	ff05c010 	.word	0xff05c010
 8005070:	fff88000 	.word	0xfff88000

08005074 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800507c:	2300      	movs	r3, #0
 800507e:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8005086:	2b01      	cmp	r3, #1
 8005088:	d101      	bne.n	800508e <HAL_SAI_Abort+0x1a>
 800508a:	2302      	movs	r3, #2
 800508c:	e053      	b.n	8005136 <HAL_SAI_Abort+0xc2>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 fb34 	bl	8005704 <SAI_Disable>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d001      	beq.n	80050a6 <HAL_SAI_Abort+0x32>
  {
    status = HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80050b4:	d125      	bne.n	8005102 <HAL_SAI_Abort+0x8e>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80050c4:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2b12      	cmp	r3, #18
 80050d0:	d108      	bne.n	80050e4 <HAL_SAI_Abort+0x70>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d004      	beq.n	80050e4 <HAL_SAI_Abort+0x70>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmatx);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050de:	4618      	mov	r0, r3
 80050e0:	f7fc fbe2 	bl	80018a8 <HAL_DMA_Abort>
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	2b22      	cmp	r3, #34	@ 0x22
 80050ee:	d108      	bne.n	8005102 <HAL_SAI_Abort+0x8e>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d004      	beq.n	8005102 <HAL_SAI_Abort+0x8e>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmarx);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050fc:	4618      	mov	r0, r3
 80050fe:	f7fc fbd3 	bl	80018a8 <HAL_DMA_Abort>
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2200      	movs	r2, #0
 8005108:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f04f 32ff 	mov.w	r2, #4294967295
 8005112:	619a      	str	r2, [r3, #24]

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	685a      	ldr	r2, [r3, #4]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f042 0208 	orr.w	r2, r2, #8
 8005122:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return status;
 8005134:	7bfb      	ldrb	r3, [r7, #15]
}
 8005136:	4618      	mov	r0, r3
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
	...

08005140 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b086      	sub	sp, #24
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800514e:	b2db      	uxtb	r3, r3
 8005150:	2b00      	cmp	r3, #0
 8005152:	f000 8192 	beq.w	800547a <HAL_SAI_IRQHandler+0x33a>
  {
    uint32_t itflags = hsai->Instance->SR;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	695b      	ldr	r3, [r3, #20]
 800515c:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred -----------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	f003 0308 	and.w	r3, r3, #8
 8005174:	2b00      	cmp	r3, #0
 8005176:	d009      	beq.n	800518c <HAL_SAI_IRQHandler+0x4c>
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	f003 0308 	and.w	r3, r3, #8
 800517e:	2b00      	cmp	r3, #0
 8005180:	d004      	beq.n	800518c <HAL_SAI_IRQHandler+0x4c>
    {
      hsai->InterruptServiceRoutine(hsai);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	4798      	blx	r3
 800518a:	e176      	b.n	800547a <HAL_SAI_IRQHandler+0x33a>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	f003 0301 	and.w	r3, r3, #1
 8005192:	2b00      	cmp	r3, #0
 8005194:	d01e      	beq.n	80051d4 <HAL_SAI_IRQHandler+0x94>
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	f003 0301 	and.w	r3, r3, #1
 800519c:	2b00      	cmp	r3, #0
 800519e:	d019      	beq.n	80051d4 <HAL_SAI_IRQHandler+0x94>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2201      	movs	r2, #1
 80051a6:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	2b22      	cmp	r3, #34	@ 0x22
 80051b2:	d101      	bne.n	80051b8 <HAL_SAI_IRQHandler+0x78>
 80051b4:	2301      	movs	r3, #1
 80051b6:	e000      	b.n	80051ba <HAL_SAI_IRQHandler+0x7a>
 80051b8:	2302      	movs	r3, #2
 80051ba:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	431a      	orrs	r2, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f000 f95b 	bl	8005488 <HAL_SAI_ErrorCallback>
 80051d2:	e152      	b.n	800547a <HAL_SAI_IRQHandler+0x33a>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	f003 0302 	and.w	r3, r3, #2
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d011      	beq.n	8005202 <HAL_SAI_IRQHandler+0xc2>
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	f003 0302 	and.w	r3, r3, #2
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d00c      	beq.n	8005202 <HAL_SAI_IRQHandler+0xc2>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2202      	movs	r2, #2
 80051ee:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f000 8140 	beq.w	800547a <HAL_SAI_IRQHandler+0x33a>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051fe:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 8005200:	e13b      	b.n	800547a <HAL_SAI_IRQHandler+0x33a>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	f003 0320 	and.w	r3, r3, #32
 8005208:	2b00      	cmp	r3, #0
 800520a:	d055      	beq.n	80052b8 <HAL_SAI_IRQHandler+0x178>
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	f003 0320 	and.w	r3, r3, #32
 8005212:	2b00      	cmp	r3, #0
 8005214:	d050      	beq.n	80052b8 <HAL_SAI_IRQHandler+0x178>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2220      	movs	r2, #32
 800521c:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005224:	f043 0204 	orr.w	r2, r3, #4
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d038      	beq.n	80052aa <HAL_SAI_IRQHandler+0x16a>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800523c:	2b00      	cmp	r3, #0
 800523e:	d016      	beq.n	800526e <HAL_SAI_IRQHandler+0x12e>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005244:	4a8f      	ldr	r2, [pc, #572]	@ (8005484 <HAL_SAI_IRQHandler+0x344>)
 8005246:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800524c:	4618      	mov	r0, r3
 800524e:	f7fc fb69 	bl	8001924 <HAL_DMA_Abort_IT>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00a      	beq.n	800526e <HAL_SAI_IRQHandler+0x12e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800525e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 f90d 	bl	8005488 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005272:	2b00      	cmp	r3, #0
 8005274:	f000 80fc 	beq.w	8005470 <HAL_SAI_IRQHandler+0x330>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800527c:	4a81      	ldr	r2, [pc, #516]	@ (8005484 <HAL_SAI_IRQHandler+0x344>)
 800527e:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005284:	4618      	mov	r0, r3
 8005286:	f7fc fb4d 	bl	8001924 <HAL_DMA_Abort_IT>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	f000 80ef 	beq.w	8005470 <HAL_SAI_IRQHandler+0x330>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005298:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 f8f0 	bl	8005488 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80052a8:	e0e2      	b.n	8005470 <HAL_SAI_IRQHandler+0x330>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f7ff fee2 	bl	8005074 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f000 f8e9 	bl	8005488 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80052b6:	e0db      	b.n	8005470 <HAL_SAI_IRQHandler+0x330>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d055      	beq.n	800536e <HAL_SAI_IRQHandler+0x22e>
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d050      	beq.n	800536e <HAL_SAI_IRQHandler+0x22e>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2240      	movs	r2, #64	@ 0x40
 80052d2:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052da:	f043 0208 	orr.w	r2, r3, #8
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d038      	beq.n	8005360 <HAL_SAI_IRQHandler+0x220>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d016      	beq.n	8005324 <HAL_SAI_IRQHandler+0x1e4>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052fa:	4a62      	ldr	r2, [pc, #392]	@ (8005484 <HAL_SAI_IRQHandler+0x344>)
 80052fc:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005302:	4618      	mov	r0, r3
 8005304:	f7fc fb0e 	bl	8001924 <HAL_DMA_Abort_IT>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00a      	beq.n	8005324 <HAL_SAI_IRQHandler+0x1e4>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005314:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 f8b2 	bl	8005488 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005328:	2b00      	cmp	r3, #0
 800532a:	f000 80a3 	beq.w	8005474 <HAL_SAI_IRQHandler+0x334>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005332:	4a54      	ldr	r2, [pc, #336]	@ (8005484 <HAL_SAI_IRQHandler+0x344>)
 8005334:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800533a:	4618      	mov	r0, r3
 800533c:	f7fc faf2 	bl	8001924 <HAL_DMA_Abort_IT>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	f000 8096 	beq.w	8005474 <HAL_SAI_IRQHandler+0x334>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800534e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 f895 	bl	8005488 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800535e:	e089      	b.n	8005474 <HAL_SAI_IRQHandler+0x334>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f7ff fe87 	bl	8005074 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 f88e 	bl	8005488 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800536c:	e082      	b.n	8005474 <HAL_SAI_IRQHandler+0x334>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	f003 0304 	and.w	r3, r3, #4
 8005374:	2b00      	cmp	r3, #0
 8005376:	d061      	beq.n	800543c <HAL_SAI_IRQHandler+0x2fc>
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	f003 0304 	and.w	r3, r3, #4
 800537e:	2b00      	cmp	r3, #0
 8005380:	d05c      	beq.n	800543c <HAL_SAI_IRQHandler+0x2fc>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2204      	movs	r2, #4
 8005388:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005390:	f043 0220 	orr.w	r2, r3, #32
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d036      	beq.n	8005412 <HAL_SAI_IRQHandler+0x2d2>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d016      	beq.n	80053da <HAL_SAI_IRQHandler+0x29a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053b0:	4a34      	ldr	r2, [pc, #208]	@ (8005484 <HAL_SAI_IRQHandler+0x344>)
 80053b2:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053b8:	4618      	mov	r0, r3
 80053ba:	f7fc fab3 	bl	8001924 <HAL_DMA_Abort_IT>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00a      	beq.n	80053da <HAL_SAI_IRQHandler+0x29a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053ca:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f000 f857 	bl	8005488 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d04a      	beq.n	8005478 <HAL_SAI_IRQHandler+0x338>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053e6:	4a27      	ldr	r2, [pc, #156]	@ (8005484 <HAL_SAI_IRQHandler+0x344>)
 80053e8:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7fc fa98 	bl	8001924 <HAL_DMA_Abort_IT>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d03e      	beq.n	8005478 <HAL_SAI_IRQHandler+0x338>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005400:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 f83c 	bl	8005488 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005410:	e032      	b.n	8005478 <HAL_SAI_IRQHandler+0x338>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2200      	movs	r2, #0
 8005418:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f04f 32ff 	mov.w	r2, #4294967295
 8005422:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 f827 	bl	8005488 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800543a:	e01d      	b.n	8005478 <HAL_SAI_IRQHandler+0x338>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	f003 0310 	and.w	r3, r3, #16
 8005442:	2b00      	cmp	r3, #0
 8005444:	d019      	beq.n	800547a <HAL_SAI_IRQHandler+0x33a>
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	f003 0310 	and.w	r3, r3, #16
 800544c:	2b00      	cmp	r3, #0
 800544e:	d014      	beq.n	800547a <HAL_SAI_IRQHandler+0x33a>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2210      	movs	r2, #16
 8005456:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800545e:	f043 0210 	orr.w	r2, r3, #16
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 f80d 	bl	8005488 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 800546e:	e004      	b.n	800547a <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005470:	bf00      	nop
 8005472:	e002      	b.n	800547a <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005474:	bf00      	nop
 8005476:	e000      	b.n	800547a <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005478:	bf00      	nop
}
 800547a:	bf00      	nop
 800547c:	3718      	adds	r7, #24
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	08005779 	.word	0x08005779

08005488 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800549c:	b480      	push	{r7}
 800549e:	b087      	sub	sp, #28
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	607a      	str	r2, [r7, #4]
 80054a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054aa:	2300      	movs	r3, #0
 80054ac:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2200      	movs	r2, #0
 80054b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d003      	beq.n	80054ca <SAI_InitI2S+0x2e>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d103      	bne.n	80054d2 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	63da      	str	r2, [r3, #60]	@ 0x3c
 80054d0:	e002      	b.n	80054d8 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2201      	movs	r2, #1
 80054d6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80054de:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80054e6:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2200      	movs	r2, #0
 80054ec:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	683a      	ldr	r2, [r7, #0]
 80054f2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	f003 0301 	and.w	r3, r3, #1
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d001      	beq.n	8005502 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e077      	b.n	80055f2 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d107      	bne.n	8005518 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005514:	651a      	str	r2, [r3, #80]	@ 0x50
 8005516:	e006      	b.n	8005526 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800551e:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Frame definition */
  switch (datasize)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2b03      	cmp	r3, #3
 800552a:	d84f      	bhi.n	80055cc <SAI_InitI2S+0x130>
 800552c:	a201      	add	r2, pc, #4	@ (adr r2, 8005534 <SAI_InitI2S+0x98>)
 800552e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005532:	bf00      	nop
 8005534:	08005545 	.word	0x08005545
 8005538:	08005567 	.word	0x08005567
 800553c:	08005589 	.word	0x08005589
 8005540:	080055ab 	.word	0x080055ab
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2280      	movs	r2, #128	@ 0x80
 8005548:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	085b      	lsrs	r3, r3, #1
 800554e:	015a      	lsls	r2, r3, #5
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	085b      	lsrs	r3, r3, #1
 8005558:	011a      	lsls	r2, r3, #4
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2240      	movs	r2, #64	@ 0x40
 8005562:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005564:	e035      	b.n	80055d2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2280      	movs	r2, #128	@ 0x80
 800556a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	085b      	lsrs	r3, r3, #1
 8005570:	019a      	lsls	r2, r3, #6
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	085b      	lsrs	r3, r3, #1
 800557a:	015a      	lsls	r2, r3, #5
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2280      	movs	r2, #128	@ 0x80
 8005584:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005586:	e024      	b.n	80055d2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	22c0      	movs	r2, #192	@ 0xc0
 800558c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	085b      	lsrs	r3, r3, #1
 8005592:	019a      	lsls	r2, r3, #6
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	085b      	lsrs	r3, r3, #1
 800559c:	015a      	lsls	r2, r3, #5
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2280      	movs	r2, #128	@ 0x80
 80055a6:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80055a8:	e013      	b.n	80055d2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	22e0      	movs	r2, #224	@ 0xe0
 80055ae:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	085b      	lsrs	r3, r3, #1
 80055b4:	019a      	lsls	r2, r3, #6
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	085b      	lsrs	r3, r3, #1
 80055be:	015a      	lsls	r2, r3, #5
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2280      	movs	r2, #128	@ 0x80
 80055c8:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80055ca:	e002      	b.n	80055d2 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	75fb      	strb	r3, [r7, #23]
      break;
 80055d0:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d10b      	bne.n	80055f0 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d102      	bne.n	80055e4 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2210      	movs	r2, #16
 80055e2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	d102      	bne.n	80055f0 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2208      	movs	r2, #8
 80055ee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  return status;
 80055f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	371c      	adds	r7, #28
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop

08005600 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005600:	b480      	push	{r7}
 8005602:	b087      	sub	sp, #28
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	607a      	str	r2, [r7, #4]
 800560c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800560e:	2300      	movs	r3, #0
 8005610:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2200      	movs	r2, #0
 8005616:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2200      	movs	r2, #0
 800561c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d003      	beq.n	800562e <SAI_InitPCM+0x2e>
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	2b02      	cmp	r3, #2
 800562c:	d103      	bne.n	8005636 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2201      	movs	r2, #1
 8005632:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005634:	e002      	b.n	800563c <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2200      	movs	r2, #0
 800563a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2200      	movs	r2, #0
 8005640:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005648:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005650:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	683a      	ldr	r2, [r7, #0]
 800565c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005664:	661a      	str	r2, [r3, #96]	@ 0x60

  if (protocol == SAI_PCM_SHORT)
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	2b04      	cmp	r3, #4
 800566a:	d103      	bne.n	8005674 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2201      	movs	r2, #1
 8005670:	645a      	str	r2, [r3, #68]	@ 0x44
 8005672:	e002      	b.n	800567a <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	220d      	movs	r2, #13
 8005678:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  switch (datasize)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2b03      	cmp	r3, #3
 800567e:	d837      	bhi.n	80056f0 <SAI_InitPCM+0xf0>
 8005680:	a201      	add	r2, pc, #4	@ (adr r2, 8005688 <SAI_InitPCM+0x88>)
 8005682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005686:	bf00      	nop
 8005688:	08005699 	.word	0x08005699
 800568c:	080056af 	.word	0x080056af
 8005690:	080056c5 	.word	0x080056c5
 8005694:	080056db 	.word	0x080056db
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2280      	movs	r2, #128	@ 0x80
 800569c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	011a      	lsls	r2, r3, #4
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2240      	movs	r2, #64	@ 0x40
 80056aa:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80056ac:	e023      	b.n	80056f6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2280      	movs	r2, #128	@ 0x80
 80056b2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	015a      	lsls	r2, r3, #5
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2280      	movs	r2, #128	@ 0x80
 80056c0:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80056c2:	e018      	b.n	80056f6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	22c0      	movs	r2, #192	@ 0xc0
 80056c8:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	015a      	lsls	r2, r3, #5
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2280      	movs	r2, #128	@ 0x80
 80056d6:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80056d8:	e00d      	b.n	80056f6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	22e0      	movs	r2, #224	@ 0xe0
 80056de:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	015a      	lsls	r2, r3, #5
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2280      	movs	r2, #128	@ 0x80
 80056ec:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80056ee:	e002      	b.n	80056f6 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	75fb      	strb	r3, [r7, #23]
      break;
 80056f4:	bf00      	nop
  }

  return status;
 80056f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	371c      	adds	r7, #28
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800570c:	4b18      	ldr	r3, [pc, #96]	@ (8005770 <SAI_Disable+0x6c>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a18      	ldr	r2, [pc, #96]	@ (8005774 <SAI_Disable+0x70>)
 8005712:	fba2 2303 	umull	r2, r3, r2, r3
 8005716:	0b1b      	lsrs	r3, r3, #12
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800571c:	2300      	movs	r3, #0
 800571e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800572e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d10a      	bne.n	800574c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800573c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	72fb      	strb	r3, [r7, #11]
      break;
 800574a:	e009      	b.n	8005760 <SAI_Disable+0x5c>
    }
    count--;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	3b01      	subs	r3, #1
 8005750:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800575c:	2b00      	cmp	r3, #0
 800575e:	d1e7      	bne.n	8005730 <SAI_Disable+0x2c>

  return status;
 8005760:	7afb      	ldrb	r3, [r7, #11]
}
 8005762:	4618      	mov	r0, r3
 8005764:	3714      	adds	r7, #20
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	20000000 	.word	0x20000000
 8005774:	95cbec1b 	.word	0x95cbec1b

08005778 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005784:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005794:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2200      	movs	r2, #0
 800579c:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f04f 32ff 	mov.w	r2, #4294967295
 80057a6:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057ae:	2b20      	cmp	r3, #32
 80057b0:	d00a      	beq.n	80057c8 <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 80057b2:	68f8      	ldr	r0, [r7, #12]
 80057b4:	f7ff ffa6 	bl	8005704 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	685a      	ldr	r2, [r3, #4]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f042 0208 	orr.w	r2, r2, #8
 80057c6:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 80057d8:	68f8      	ldr	r0, [r7, #12]
 80057da:	f7ff fe55 	bl	8005488 <HAL_SAI_ErrorCallback>
#endif
}
 80057de:	bf00      	nop
 80057e0:	3710      	adds	r7, #16
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}

080057e6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057e6:	b580      	push	{r7, lr}
 80057e8:	b084      	sub	sp, #16
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d101      	bne.n	80057f8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e095      	b.n	8005924 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d108      	bne.n	8005812 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005808:	d009      	beq.n	800581e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	61da      	str	r2, [r3, #28]
 8005810:	e005      	b.n	800581e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800582a:	b2db      	uxtb	r3, r3
 800582c:	2b00      	cmp	r3, #0
 800582e:	d106      	bne.n	800583e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f7fb fb87 	bl	8000f4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2202      	movs	r2, #2
 8005842:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005854:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800585e:	d902      	bls.n	8005866 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005860:	2300      	movs	r3, #0
 8005862:	60fb      	str	r3, [r7, #12]
 8005864:	e002      	b.n	800586c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005866:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800586a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005874:	d007      	beq.n	8005886 <HAL_SPI_Init+0xa0>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800587e:	d002      	beq.n	8005886 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005896:	431a      	orrs	r2, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	f003 0302 	and.w	r3, r3, #2
 80058a0:	431a      	orrs	r2, r3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	695b      	ldr	r3, [r3, #20]
 80058a6:	f003 0301 	and.w	r3, r3, #1
 80058aa:	431a      	orrs	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	699b      	ldr	r3, [r3, #24]
 80058b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058b4:	431a      	orrs	r2, r3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	69db      	ldr	r3, [r3, #28]
 80058ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80058be:	431a      	orrs	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6a1b      	ldr	r3, [r3, #32]
 80058c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058c8:	ea42 0103 	orr.w	r1, r2, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058d0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	430a      	orrs	r2, r1
 80058da:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	699b      	ldr	r3, [r3, #24]
 80058e0:	0c1b      	lsrs	r3, r3, #16
 80058e2:	f003 0204 	and.w	r2, r3, #4
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ea:	f003 0310 	and.w	r3, r3, #16
 80058ee:	431a      	orrs	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058f4:	f003 0308 	and.w	r3, r3, #8
 80058f8:	431a      	orrs	r2, r3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005902:	ea42 0103 	orr.w	r1, r2, r3
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	430a      	orrs	r2, r1
 8005912:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3710      	adds	r7, #16
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b088      	sub	sp, #32
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	603b      	str	r3, [r7, #0]
 8005938:	4613      	mov	r3, r2
 800593a:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800593c:	f7fb fdba 	bl	80014b4 <HAL_GetTick>
 8005940:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005942:	88fb      	ldrh	r3, [r7, #6]
 8005944:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800594c:	b2db      	uxtb	r3, r3
 800594e:	2b01      	cmp	r3, #1
 8005950:	d001      	beq.n	8005956 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005952:	2302      	movs	r3, #2
 8005954:	e15c      	b.n	8005c10 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d002      	beq.n	8005962 <HAL_SPI_Transmit+0x36>
 800595c:	88fb      	ldrh	r3, [r7, #6]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d101      	bne.n	8005966 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e154      	b.n	8005c10 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800596c:	2b01      	cmp	r3, #1
 800596e:	d101      	bne.n	8005974 <HAL_SPI_Transmit+0x48>
 8005970:	2302      	movs	r3, #2
 8005972:	e14d      	b.n	8005c10 <HAL_SPI_Transmit+0x2e4>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2203      	movs	r2, #3
 8005980:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2200      	movs	r2, #0
 8005988:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	68ba      	ldr	r2, [r7, #8]
 800598e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	88fa      	ldrh	r2, [r7, #6]
 8005994:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	88fa      	ldrh	r2, [r7, #6]
 800599a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2200      	movs	r2, #0
 80059a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2200      	movs	r2, #0
 80059b6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2200      	movs	r2, #0
 80059bc:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059c6:	d10f      	bne.n	80059e8 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059d6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80059e6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059f2:	2b40      	cmp	r3, #64	@ 0x40
 80059f4:	d007      	beq.n	8005a06 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a04:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005a0e:	d952      	bls.n	8005ab6 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d002      	beq.n	8005a1e <HAL_SPI_Transmit+0xf2>
 8005a18:	8b7b      	ldrh	r3, [r7, #26]
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d145      	bne.n	8005aaa <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a22:	881a      	ldrh	r2, [r3, #0]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a2e:	1c9a      	adds	r2, r3, #2
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	b29a      	uxth	r2, r3
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005a42:	e032      	b.n	8005aaa <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f003 0302 	and.w	r3, r3, #2
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d112      	bne.n	8005a78 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a56:	881a      	ldrh	r2, [r3, #0]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a62:	1c9a      	adds	r2, r3, #2
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	b29a      	uxth	r2, r3
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005a76:	e018      	b.n	8005aaa <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a78:	f7fb fd1c 	bl	80014b4 <HAL_GetTick>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	683a      	ldr	r2, [r7, #0]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d803      	bhi.n	8005a90 <HAL_SPI_Transmit+0x164>
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a8e:	d102      	bne.n	8005a96 <HAL_SPI_Transmit+0x16a>
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d109      	bne.n	8005aaa <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005aa6:	2303      	movs	r3, #3
 8005aa8:	e0b2      	b.n	8005c10 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d1c7      	bne.n	8005a44 <HAL_SPI_Transmit+0x118>
 8005ab4:	e083      	b.n	8005bbe <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d002      	beq.n	8005ac4 <HAL_SPI_Transmit+0x198>
 8005abe:	8b7b      	ldrh	r3, [r7, #26]
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d177      	bne.n	8005bb4 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d912      	bls.n	8005af4 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ad2:	881a      	ldrh	r2, [r3, #0]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ade:	1c9a      	adds	r2, r3, #2
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	3b02      	subs	r3, #2
 8005aec:	b29a      	uxth	r2, r3
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005af2:	e05f      	b.n	8005bb4 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	330c      	adds	r3, #12
 8005afe:	7812      	ldrb	r2, [r2, #0]
 8005b00:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b06:	1c5a      	adds	r2, r3, #1
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	3b01      	subs	r3, #1
 8005b14:	b29a      	uxth	r2, r3
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005b1a:	e04b      	b.n	8005bb4 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f003 0302 	and.w	r3, r3, #2
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d12b      	bne.n	8005b82 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d912      	bls.n	8005b5a <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b38:	881a      	ldrh	r2, [r3, #0]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b44:	1c9a      	adds	r2, r3, #2
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	3b02      	subs	r3, #2
 8005b52:	b29a      	uxth	r2, r3
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005b58:	e02c      	b.n	8005bb4 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	330c      	adds	r3, #12
 8005b64:	7812      	ldrb	r2, [r2, #0]
 8005b66:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b6c:	1c5a      	adds	r2, r3, #1
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	3b01      	subs	r3, #1
 8005b7a:	b29a      	uxth	r2, r3
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005b80:	e018      	b.n	8005bb4 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b82:	f7fb fc97 	bl	80014b4 <HAL_GetTick>
 8005b86:	4602      	mov	r2, r0
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	683a      	ldr	r2, [r7, #0]
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d803      	bhi.n	8005b9a <HAL_SPI_Transmit+0x26e>
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b98:	d102      	bne.n	8005ba0 <HAL_SPI_Transmit+0x274>
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d109      	bne.n	8005bb4 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	e02d      	b.n	8005c10 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d1ae      	bne.n	8005b1c <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bbe:	69fa      	ldr	r2, [r7, #28]
 8005bc0:	6839      	ldr	r1, [r7, #0]
 8005bc2:	68f8      	ldr	r0, [r7, #12]
 8005bc4:	f000 f946 	bl	8005e54 <SPI_EndRxTxTransaction>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d002      	beq.n	8005bd4 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2220      	movs	r2, #32
 8005bd2:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d10a      	bne.n	8005bf2 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005bdc:	2300      	movs	r3, #0
 8005bde:	617b      	str	r3, [r7, #20]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	617b      	str	r3, [r7, #20]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	617b      	str	r3, [r7, #20]
 8005bf0:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d001      	beq.n	8005c0e <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e000      	b.n	8005c10 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8005c0e:	2300      	movs	r3, #0
  }
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3720      	adds	r7, #32
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b088      	sub	sp, #32
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	603b      	str	r3, [r7, #0]
 8005c24:	4613      	mov	r3, r2
 8005c26:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005c28:	f7fb fc44 	bl	80014b4 <HAL_GetTick>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c30:	1a9b      	subs	r3, r3, r2
 8005c32:	683a      	ldr	r2, [r7, #0]
 8005c34:	4413      	add	r3, r2
 8005c36:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005c38:	f7fb fc3c 	bl	80014b4 <HAL_GetTick>
 8005c3c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005c3e:	4b39      	ldr	r3, [pc, #228]	@ (8005d24 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	015b      	lsls	r3, r3, #5
 8005c44:	0d1b      	lsrs	r3, r3, #20
 8005c46:	69fa      	ldr	r2, [r7, #28]
 8005c48:	fb02 f303 	mul.w	r3, r2, r3
 8005c4c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c4e:	e054      	b.n	8005cfa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c56:	d050      	beq.n	8005cfa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c58:	f7fb fc2c 	bl	80014b4 <HAL_GetTick>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	69fa      	ldr	r2, [r7, #28]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d902      	bls.n	8005c6e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d13d      	bne.n	8005cea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	685a      	ldr	r2, [r3, #4]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005c7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c86:	d111      	bne.n	8005cac <SPI_WaitFlagStateUntilTimeout+0x94>
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c90:	d004      	beq.n	8005c9c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c9a:	d107      	bne.n	8005cac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005caa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cb4:	d10f      	bne.n	8005cd6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005cc4:	601a      	str	r2, [r3, #0]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005cd4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e017      	b.n	8005d1a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d101      	bne.n	8005cf4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	689a      	ldr	r2, [r3, #8]
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	4013      	ands	r3, r2
 8005d04:	68ba      	ldr	r2, [r7, #8]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	bf0c      	ite	eq
 8005d0a:	2301      	moveq	r3, #1
 8005d0c:	2300      	movne	r3, #0
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	461a      	mov	r2, r3
 8005d12:	79fb      	ldrb	r3, [r7, #7]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d19b      	bne.n	8005c50 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3720      	adds	r7, #32
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	20000000 	.word	0x20000000

08005d28 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b08a      	sub	sp, #40	@ 0x28
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
 8005d34:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005d36:	2300      	movs	r3, #0
 8005d38:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005d3a:	f7fb fbbb 	bl	80014b4 <HAL_GetTick>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d42:	1a9b      	subs	r3, r3, r2
 8005d44:	683a      	ldr	r2, [r7, #0]
 8005d46:	4413      	add	r3, r2
 8005d48:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005d4a:	f7fb fbb3 	bl	80014b4 <HAL_GetTick>
 8005d4e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	330c      	adds	r3, #12
 8005d56:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005d58:	4b3d      	ldr	r3, [pc, #244]	@ (8005e50 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	4413      	add	r3, r2
 8005d62:	00da      	lsls	r2, r3, #3
 8005d64:	1ad3      	subs	r3, r2, r3
 8005d66:	0d1b      	lsrs	r3, r3, #20
 8005d68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d6a:	fb02 f303 	mul.w	r3, r2, r3
 8005d6e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005d70:	e060      	b.n	8005e34 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005d78:	d107      	bne.n	8005d8a <SPI_WaitFifoStateUntilTimeout+0x62>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d104      	bne.n	8005d8a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005d88:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d90:	d050      	beq.n	8005e34 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005d92:	f7fb fb8f 	bl	80014b4 <HAL_GetTick>
 8005d96:	4602      	mov	r2, r0
 8005d98:	6a3b      	ldr	r3, [r7, #32]
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d902      	bls.n	8005da8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d13d      	bne.n	8005e24 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	685a      	ldr	r2, [r3, #4]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005db6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005dc0:	d111      	bne.n	8005de6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005dca:	d004      	beq.n	8005dd6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005dd4:	d107      	bne.n	8005de6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005de4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dee:	d10f      	bne.n	8005e10 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005dfe:	601a      	str	r2, [r3, #0]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005e0e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005e20:	2303      	movs	r3, #3
 8005e22:	e010      	b.n	8005e46 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d101      	bne.n	8005e2e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	3b01      	subs	r3, #1
 8005e32:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	689a      	ldr	r2, [r3, #8]
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d196      	bne.n	8005d72 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3728      	adds	r7, #40	@ 0x28
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	20000000 	.word	0x20000000

08005e54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b086      	sub	sp, #24
 8005e58:	af02      	add	r7, sp, #8
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	9300      	str	r3, [sp, #0]
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005e6c:	68f8      	ldr	r0, [r7, #12]
 8005e6e:	f7ff ff5b 	bl	8005d28 <SPI_WaitFifoStateUntilTimeout>
 8005e72:	4603      	mov	r3, r0
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d007      	beq.n	8005e88 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e7c:	f043 0220 	orr.w	r2, r3, #32
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005e84:	2303      	movs	r3, #3
 8005e86:	e027      	b.n	8005ed8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	9300      	str	r3, [sp, #0]
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	2180      	movs	r1, #128	@ 0x80
 8005e92:	68f8      	ldr	r0, [r7, #12]
 8005e94:	f7ff fec0 	bl	8005c18 <SPI_WaitFlagStateUntilTimeout>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d007      	beq.n	8005eae <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ea2:	f043 0220 	orr.w	r2, r3, #32
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e014      	b.n	8005ed8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	9300      	str	r3, [sp, #0]
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005eba:	68f8      	ldr	r0, [r7, #12]
 8005ebc:	f7ff ff34 	bl	8005d28 <SPI_WaitFifoStateUntilTimeout>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d007      	beq.n	8005ed6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005eca:	f043 0220 	orr.w	r2, r3, #32
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e000      	b.n	8005ed8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005ed6:	2300      	movs	r3, #0
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3710      	adds	r7, #16
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d101      	bne.n	8005ef2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e040      	b.n	8005f74 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d106      	bne.n	8005f08 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f7fb f9e0 	bl	80012c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2224      	movs	r2, #36	@ 0x24
 8005f0c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f022 0201 	bic.w	r2, r2, #1
 8005f1c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d002      	beq.n	8005f2c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 fb6a 	bl	8006600 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f000 f8af 	bl	8006090 <UART_SetConfig>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d101      	bne.n	8005f3c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e01b      	b.n	8005f74 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	685a      	ldr	r2, [r3, #4]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005f4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	689a      	ldr	r2, [r3, #8]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005f5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f042 0201 	orr.w	r2, r2, #1
 8005f6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 fbe9 	bl	8006744 <UART_CheckIdleState>
 8005f72:	4603      	mov	r3, r0
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3708      	adds	r7, #8
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b08a      	sub	sp, #40	@ 0x28
 8005f80:	af02      	add	r7, sp, #8
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	603b      	str	r3, [r7, #0]
 8005f88:	4613      	mov	r3, r2
 8005f8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f90:	2b20      	cmp	r3, #32
 8005f92:	d177      	bne.n	8006084 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d002      	beq.n	8005fa0 <HAL_UART_Transmit+0x24>
 8005f9a:	88fb      	ldrh	r3, [r7, #6]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d101      	bne.n	8005fa4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e070      	b.n	8006086 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2221      	movs	r2, #33	@ 0x21
 8005fb0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005fb2:	f7fb fa7f 	bl	80014b4 <HAL_GetTick>
 8005fb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	88fa      	ldrh	r2, [r7, #6]
 8005fbc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	88fa      	ldrh	r2, [r7, #6]
 8005fc4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fd0:	d108      	bne.n	8005fe4 <HAL_UART_Transmit+0x68>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	691b      	ldr	r3, [r3, #16]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d104      	bne.n	8005fe4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	61bb      	str	r3, [r7, #24]
 8005fe2:	e003      	b.n	8005fec <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005fec:	e02f      	b.n	800604e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	9300      	str	r3, [sp, #0]
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	2180      	movs	r1, #128	@ 0x80
 8005ff8:	68f8      	ldr	r0, [r7, #12]
 8005ffa:	f000 fc4b 	bl	8006894 <UART_WaitOnFlagUntilTimeout>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d004      	beq.n	800600e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2220      	movs	r2, #32
 8006008:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e03b      	b.n	8006086 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d10b      	bne.n	800602c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	881a      	ldrh	r2, [r3, #0]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006020:	b292      	uxth	r2, r2
 8006022:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	3302      	adds	r3, #2
 8006028:	61bb      	str	r3, [r7, #24]
 800602a:	e007      	b.n	800603c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	781a      	ldrb	r2, [r3, #0]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	3301      	adds	r3, #1
 800603a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006042:	b29b      	uxth	r3, r3
 8006044:	3b01      	subs	r3, #1
 8006046:	b29a      	uxth	r2, r3
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006054:	b29b      	uxth	r3, r3
 8006056:	2b00      	cmp	r3, #0
 8006058:	d1c9      	bne.n	8005fee <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	9300      	str	r3, [sp, #0]
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	2200      	movs	r2, #0
 8006062:	2140      	movs	r1, #64	@ 0x40
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f000 fc15 	bl	8006894 <UART_WaitOnFlagUntilTimeout>
 800606a:	4603      	mov	r3, r0
 800606c:	2b00      	cmp	r3, #0
 800606e:	d004      	beq.n	800607a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2220      	movs	r2, #32
 8006074:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006076:	2303      	movs	r3, #3
 8006078:	e005      	b.n	8006086 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2220      	movs	r2, #32
 800607e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006080:	2300      	movs	r3, #0
 8006082:	e000      	b.n	8006086 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006084:	2302      	movs	r3, #2
  }
}
 8006086:	4618      	mov	r0, r3
 8006088:	3720      	adds	r7, #32
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
	...

08006090 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006090:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006094:	b08a      	sub	sp, #40	@ 0x28
 8006096:	af00      	add	r7, sp, #0
 8006098:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800609a:	2300      	movs	r3, #0
 800609c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	689a      	ldr	r2, [r3, #8]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	431a      	orrs	r2, r3
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	695b      	ldr	r3, [r3, #20]
 80060ae:	431a      	orrs	r2, r3
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	69db      	ldr	r3, [r3, #28]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	4ba4      	ldr	r3, [pc, #656]	@ (8006350 <UART_SetConfig+0x2c0>)
 80060c0:	4013      	ands	r3, r2
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	6812      	ldr	r2, [r2, #0]
 80060c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80060c8:	430b      	orrs	r3, r1
 80060ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	68da      	ldr	r2, [r3, #12]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	430a      	orrs	r2, r1
 80060e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a99      	ldr	r2, [pc, #612]	@ (8006354 <UART_SetConfig+0x2c4>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d004      	beq.n	80060fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6a1b      	ldr	r3, [r3, #32]
 80060f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060f8:	4313      	orrs	r3, r2
 80060fa:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800610c:	430a      	orrs	r2, r1
 800610e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a90      	ldr	r2, [pc, #576]	@ (8006358 <UART_SetConfig+0x2c8>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d126      	bne.n	8006168 <UART_SetConfig+0xd8>
 800611a:	4b90      	ldr	r3, [pc, #576]	@ (800635c <UART_SetConfig+0x2cc>)
 800611c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006120:	f003 0303 	and.w	r3, r3, #3
 8006124:	2b03      	cmp	r3, #3
 8006126:	d81b      	bhi.n	8006160 <UART_SetConfig+0xd0>
 8006128:	a201      	add	r2, pc, #4	@ (adr r2, 8006130 <UART_SetConfig+0xa0>)
 800612a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800612e:	bf00      	nop
 8006130:	08006141 	.word	0x08006141
 8006134:	08006151 	.word	0x08006151
 8006138:	08006149 	.word	0x08006149
 800613c:	08006159 	.word	0x08006159
 8006140:	2301      	movs	r3, #1
 8006142:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006146:	e116      	b.n	8006376 <UART_SetConfig+0x2e6>
 8006148:	2302      	movs	r3, #2
 800614a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800614e:	e112      	b.n	8006376 <UART_SetConfig+0x2e6>
 8006150:	2304      	movs	r3, #4
 8006152:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006156:	e10e      	b.n	8006376 <UART_SetConfig+0x2e6>
 8006158:	2308      	movs	r3, #8
 800615a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800615e:	e10a      	b.n	8006376 <UART_SetConfig+0x2e6>
 8006160:	2310      	movs	r3, #16
 8006162:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006166:	e106      	b.n	8006376 <UART_SetConfig+0x2e6>
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a7c      	ldr	r2, [pc, #496]	@ (8006360 <UART_SetConfig+0x2d0>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d138      	bne.n	80061e4 <UART_SetConfig+0x154>
 8006172:	4b7a      	ldr	r3, [pc, #488]	@ (800635c <UART_SetConfig+0x2cc>)
 8006174:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006178:	f003 030c 	and.w	r3, r3, #12
 800617c:	2b0c      	cmp	r3, #12
 800617e:	d82d      	bhi.n	80061dc <UART_SetConfig+0x14c>
 8006180:	a201      	add	r2, pc, #4	@ (adr r2, 8006188 <UART_SetConfig+0xf8>)
 8006182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006186:	bf00      	nop
 8006188:	080061bd 	.word	0x080061bd
 800618c:	080061dd 	.word	0x080061dd
 8006190:	080061dd 	.word	0x080061dd
 8006194:	080061dd 	.word	0x080061dd
 8006198:	080061cd 	.word	0x080061cd
 800619c:	080061dd 	.word	0x080061dd
 80061a0:	080061dd 	.word	0x080061dd
 80061a4:	080061dd 	.word	0x080061dd
 80061a8:	080061c5 	.word	0x080061c5
 80061ac:	080061dd 	.word	0x080061dd
 80061b0:	080061dd 	.word	0x080061dd
 80061b4:	080061dd 	.word	0x080061dd
 80061b8:	080061d5 	.word	0x080061d5
 80061bc:	2300      	movs	r3, #0
 80061be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061c2:	e0d8      	b.n	8006376 <UART_SetConfig+0x2e6>
 80061c4:	2302      	movs	r3, #2
 80061c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061ca:	e0d4      	b.n	8006376 <UART_SetConfig+0x2e6>
 80061cc:	2304      	movs	r3, #4
 80061ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061d2:	e0d0      	b.n	8006376 <UART_SetConfig+0x2e6>
 80061d4:	2308      	movs	r3, #8
 80061d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061da:	e0cc      	b.n	8006376 <UART_SetConfig+0x2e6>
 80061dc:	2310      	movs	r3, #16
 80061de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061e2:	e0c8      	b.n	8006376 <UART_SetConfig+0x2e6>
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a5e      	ldr	r2, [pc, #376]	@ (8006364 <UART_SetConfig+0x2d4>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d125      	bne.n	800623a <UART_SetConfig+0x1aa>
 80061ee:	4b5b      	ldr	r3, [pc, #364]	@ (800635c <UART_SetConfig+0x2cc>)
 80061f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061f4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80061f8:	2b30      	cmp	r3, #48	@ 0x30
 80061fa:	d016      	beq.n	800622a <UART_SetConfig+0x19a>
 80061fc:	2b30      	cmp	r3, #48	@ 0x30
 80061fe:	d818      	bhi.n	8006232 <UART_SetConfig+0x1a2>
 8006200:	2b20      	cmp	r3, #32
 8006202:	d00a      	beq.n	800621a <UART_SetConfig+0x18a>
 8006204:	2b20      	cmp	r3, #32
 8006206:	d814      	bhi.n	8006232 <UART_SetConfig+0x1a2>
 8006208:	2b00      	cmp	r3, #0
 800620a:	d002      	beq.n	8006212 <UART_SetConfig+0x182>
 800620c:	2b10      	cmp	r3, #16
 800620e:	d008      	beq.n	8006222 <UART_SetConfig+0x192>
 8006210:	e00f      	b.n	8006232 <UART_SetConfig+0x1a2>
 8006212:	2300      	movs	r3, #0
 8006214:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006218:	e0ad      	b.n	8006376 <UART_SetConfig+0x2e6>
 800621a:	2302      	movs	r3, #2
 800621c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006220:	e0a9      	b.n	8006376 <UART_SetConfig+0x2e6>
 8006222:	2304      	movs	r3, #4
 8006224:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006228:	e0a5      	b.n	8006376 <UART_SetConfig+0x2e6>
 800622a:	2308      	movs	r3, #8
 800622c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006230:	e0a1      	b.n	8006376 <UART_SetConfig+0x2e6>
 8006232:	2310      	movs	r3, #16
 8006234:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006238:	e09d      	b.n	8006376 <UART_SetConfig+0x2e6>
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a4a      	ldr	r2, [pc, #296]	@ (8006368 <UART_SetConfig+0x2d8>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d125      	bne.n	8006290 <UART_SetConfig+0x200>
 8006244:	4b45      	ldr	r3, [pc, #276]	@ (800635c <UART_SetConfig+0x2cc>)
 8006246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800624a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800624e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006250:	d016      	beq.n	8006280 <UART_SetConfig+0x1f0>
 8006252:	2bc0      	cmp	r3, #192	@ 0xc0
 8006254:	d818      	bhi.n	8006288 <UART_SetConfig+0x1f8>
 8006256:	2b80      	cmp	r3, #128	@ 0x80
 8006258:	d00a      	beq.n	8006270 <UART_SetConfig+0x1e0>
 800625a:	2b80      	cmp	r3, #128	@ 0x80
 800625c:	d814      	bhi.n	8006288 <UART_SetConfig+0x1f8>
 800625e:	2b00      	cmp	r3, #0
 8006260:	d002      	beq.n	8006268 <UART_SetConfig+0x1d8>
 8006262:	2b40      	cmp	r3, #64	@ 0x40
 8006264:	d008      	beq.n	8006278 <UART_SetConfig+0x1e8>
 8006266:	e00f      	b.n	8006288 <UART_SetConfig+0x1f8>
 8006268:	2300      	movs	r3, #0
 800626a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800626e:	e082      	b.n	8006376 <UART_SetConfig+0x2e6>
 8006270:	2302      	movs	r3, #2
 8006272:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006276:	e07e      	b.n	8006376 <UART_SetConfig+0x2e6>
 8006278:	2304      	movs	r3, #4
 800627a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800627e:	e07a      	b.n	8006376 <UART_SetConfig+0x2e6>
 8006280:	2308      	movs	r3, #8
 8006282:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006286:	e076      	b.n	8006376 <UART_SetConfig+0x2e6>
 8006288:	2310      	movs	r3, #16
 800628a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800628e:	e072      	b.n	8006376 <UART_SetConfig+0x2e6>
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a35      	ldr	r2, [pc, #212]	@ (800636c <UART_SetConfig+0x2dc>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d12a      	bne.n	80062f0 <UART_SetConfig+0x260>
 800629a:	4b30      	ldr	r3, [pc, #192]	@ (800635c <UART_SetConfig+0x2cc>)
 800629c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062a8:	d01a      	beq.n	80062e0 <UART_SetConfig+0x250>
 80062aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062ae:	d81b      	bhi.n	80062e8 <UART_SetConfig+0x258>
 80062b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062b4:	d00c      	beq.n	80062d0 <UART_SetConfig+0x240>
 80062b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062ba:	d815      	bhi.n	80062e8 <UART_SetConfig+0x258>
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d003      	beq.n	80062c8 <UART_SetConfig+0x238>
 80062c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062c4:	d008      	beq.n	80062d8 <UART_SetConfig+0x248>
 80062c6:	e00f      	b.n	80062e8 <UART_SetConfig+0x258>
 80062c8:	2300      	movs	r3, #0
 80062ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062ce:	e052      	b.n	8006376 <UART_SetConfig+0x2e6>
 80062d0:	2302      	movs	r3, #2
 80062d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062d6:	e04e      	b.n	8006376 <UART_SetConfig+0x2e6>
 80062d8:	2304      	movs	r3, #4
 80062da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062de:	e04a      	b.n	8006376 <UART_SetConfig+0x2e6>
 80062e0:	2308      	movs	r3, #8
 80062e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062e6:	e046      	b.n	8006376 <UART_SetConfig+0x2e6>
 80062e8:	2310      	movs	r3, #16
 80062ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062ee:	e042      	b.n	8006376 <UART_SetConfig+0x2e6>
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a17      	ldr	r2, [pc, #92]	@ (8006354 <UART_SetConfig+0x2c4>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d13a      	bne.n	8006370 <UART_SetConfig+0x2e0>
 80062fa:	4b18      	ldr	r3, [pc, #96]	@ (800635c <UART_SetConfig+0x2cc>)
 80062fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006300:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006304:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006308:	d01a      	beq.n	8006340 <UART_SetConfig+0x2b0>
 800630a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800630e:	d81b      	bhi.n	8006348 <UART_SetConfig+0x2b8>
 8006310:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006314:	d00c      	beq.n	8006330 <UART_SetConfig+0x2a0>
 8006316:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800631a:	d815      	bhi.n	8006348 <UART_SetConfig+0x2b8>
 800631c:	2b00      	cmp	r3, #0
 800631e:	d003      	beq.n	8006328 <UART_SetConfig+0x298>
 8006320:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006324:	d008      	beq.n	8006338 <UART_SetConfig+0x2a8>
 8006326:	e00f      	b.n	8006348 <UART_SetConfig+0x2b8>
 8006328:	2300      	movs	r3, #0
 800632a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800632e:	e022      	b.n	8006376 <UART_SetConfig+0x2e6>
 8006330:	2302      	movs	r3, #2
 8006332:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006336:	e01e      	b.n	8006376 <UART_SetConfig+0x2e6>
 8006338:	2304      	movs	r3, #4
 800633a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800633e:	e01a      	b.n	8006376 <UART_SetConfig+0x2e6>
 8006340:	2308      	movs	r3, #8
 8006342:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006346:	e016      	b.n	8006376 <UART_SetConfig+0x2e6>
 8006348:	2310      	movs	r3, #16
 800634a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800634e:	e012      	b.n	8006376 <UART_SetConfig+0x2e6>
 8006350:	efff69f3 	.word	0xefff69f3
 8006354:	40008000 	.word	0x40008000
 8006358:	40013800 	.word	0x40013800
 800635c:	40021000 	.word	0x40021000
 8006360:	40004400 	.word	0x40004400
 8006364:	40004800 	.word	0x40004800
 8006368:	40004c00 	.word	0x40004c00
 800636c:	40005000 	.word	0x40005000
 8006370:	2310      	movs	r3, #16
 8006372:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a9f      	ldr	r2, [pc, #636]	@ (80065f8 <UART_SetConfig+0x568>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d17a      	bne.n	8006476 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006380:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006384:	2b08      	cmp	r3, #8
 8006386:	d824      	bhi.n	80063d2 <UART_SetConfig+0x342>
 8006388:	a201      	add	r2, pc, #4	@ (adr r2, 8006390 <UART_SetConfig+0x300>)
 800638a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800638e:	bf00      	nop
 8006390:	080063b5 	.word	0x080063b5
 8006394:	080063d3 	.word	0x080063d3
 8006398:	080063bd 	.word	0x080063bd
 800639c:	080063d3 	.word	0x080063d3
 80063a0:	080063c3 	.word	0x080063c3
 80063a4:	080063d3 	.word	0x080063d3
 80063a8:	080063d3 	.word	0x080063d3
 80063ac:	080063d3 	.word	0x080063d3
 80063b0:	080063cb 	.word	0x080063cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063b4:	f7fd f914 	bl	80035e0 <HAL_RCC_GetPCLK1Freq>
 80063b8:	61f8      	str	r0, [r7, #28]
        break;
 80063ba:	e010      	b.n	80063de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063bc:	4b8f      	ldr	r3, [pc, #572]	@ (80065fc <UART_SetConfig+0x56c>)
 80063be:	61fb      	str	r3, [r7, #28]
        break;
 80063c0:	e00d      	b.n	80063de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063c2:	f7fd f875 	bl	80034b0 <HAL_RCC_GetSysClockFreq>
 80063c6:	61f8      	str	r0, [r7, #28]
        break;
 80063c8:	e009      	b.n	80063de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063ce:	61fb      	str	r3, [r7, #28]
        break;
 80063d0:	e005      	b.n	80063de <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80063d2:	2300      	movs	r3, #0
 80063d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80063dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	f000 80fb 	beq.w	80065dc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	685a      	ldr	r2, [r3, #4]
 80063ea:	4613      	mov	r3, r2
 80063ec:	005b      	lsls	r3, r3, #1
 80063ee:	4413      	add	r3, r2
 80063f0:	69fa      	ldr	r2, [r7, #28]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d305      	bcc.n	8006402 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80063fc:	69fa      	ldr	r2, [r7, #28]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d903      	bls.n	800640a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006408:	e0e8      	b.n	80065dc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	2200      	movs	r2, #0
 800640e:	461c      	mov	r4, r3
 8006410:	4615      	mov	r5, r2
 8006412:	f04f 0200 	mov.w	r2, #0
 8006416:	f04f 0300 	mov.w	r3, #0
 800641a:	022b      	lsls	r3, r5, #8
 800641c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006420:	0222      	lsls	r2, r4, #8
 8006422:	68f9      	ldr	r1, [r7, #12]
 8006424:	6849      	ldr	r1, [r1, #4]
 8006426:	0849      	lsrs	r1, r1, #1
 8006428:	2000      	movs	r0, #0
 800642a:	4688      	mov	r8, r1
 800642c:	4681      	mov	r9, r0
 800642e:	eb12 0a08 	adds.w	sl, r2, r8
 8006432:	eb43 0b09 	adc.w	fp, r3, r9
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	603b      	str	r3, [r7, #0]
 800643e:	607a      	str	r2, [r7, #4]
 8006440:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006444:	4650      	mov	r0, sl
 8006446:	4659      	mov	r1, fp
 8006448:	f7f9 ff12 	bl	8000270 <__aeabi_uldivmod>
 800644c:	4602      	mov	r2, r0
 800644e:	460b      	mov	r3, r1
 8006450:	4613      	mov	r3, r2
 8006452:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800645a:	d308      	bcc.n	800646e <UART_SetConfig+0x3de>
 800645c:	69bb      	ldr	r3, [r7, #24]
 800645e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006462:	d204      	bcs.n	800646e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	69ba      	ldr	r2, [r7, #24]
 800646a:	60da      	str	r2, [r3, #12]
 800646c:	e0b6      	b.n	80065dc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006474:	e0b2      	b.n	80065dc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	69db      	ldr	r3, [r3, #28]
 800647a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800647e:	d15e      	bne.n	800653e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006480:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006484:	2b08      	cmp	r3, #8
 8006486:	d828      	bhi.n	80064da <UART_SetConfig+0x44a>
 8006488:	a201      	add	r2, pc, #4	@ (adr r2, 8006490 <UART_SetConfig+0x400>)
 800648a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648e:	bf00      	nop
 8006490:	080064b5 	.word	0x080064b5
 8006494:	080064bd 	.word	0x080064bd
 8006498:	080064c5 	.word	0x080064c5
 800649c:	080064db 	.word	0x080064db
 80064a0:	080064cb 	.word	0x080064cb
 80064a4:	080064db 	.word	0x080064db
 80064a8:	080064db 	.word	0x080064db
 80064ac:	080064db 	.word	0x080064db
 80064b0:	080064d3 	.word	0x080064d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064b4:	f7fd f894 	bl	80035e0 <HAL_RCC_GetPCLK1Freq>
 80064b8:	61f8      	str	r0, [r7, #28]
        break;
 80064ba:	e014      	b.n	80064e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064bc:	f7fd f8a6 	bl	800360c <HAL_RCC_GetPCLK2Freq>
 80064c0:	61f8      	str	r0, [r7, #28]
        break;
 80064c2:	e010      	b.n	80064e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064c4:	4b4d      	ldr	r3, [pc, #308]	@ (80065fc <UART_SetConfig+0x56c>)
 80064c6:	61fb      	str	r3, [r7, #28]
        break;
 80064c8:	e00d      	b.n	80064e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064ca:	f7fc fff1 	bl	80034b0 <HAL_RCC_GetSysClockFreq>
 80064ce:	61f8      	str	r0, [r7, #28]
        break;
 80064d0:	e009      	b.n	80064e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064d6:	61fb      	str	r3, [r7, #28]
        break;
 80064d8:	e005      	b.n	80064e6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80064da:	2300      	movs	r3, #0
 80064dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80064e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d077      	beq.n	80065dc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	005a      	lsls	r2, r3, #1
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	085b      	lsrs	r3, r3, #1
 80064f6:	441a      	add	r2, r3
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006500:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	2b0f      	cmp	r3, #15
 8006506:	d916      	bls.n	8006536 <UART_SetConfig+0x4a6>
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800650e:	d212      	bcs.n	8006536 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	b29b      	uxth	r3, r3
 8006514:	f023 030f 	bic.w	r3, r3, #15
 8006518:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	085b      	lsrs	r3, r3, #1
 800651e:	b29b      	uxth	r3, r3
 8006520:	f003 0307 	and.w	r3, r3, #7
 8006524:	b29a      	uxth	r2, r3
 8006526:	8afb      	ldrh	r3, [r7, #22]
 8006528:	4313      	orrs	r3, r2
 800652a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	8afa      	ldrh	r2, [r7, #22]
 8006532:	60da      	str	r2, [r3, #12]
 8006534:	e052      	b.n	80065dc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800653c:	e04e      	b.n	80065dc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800653e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006542:	2b08      	cmp	r3, #8
 8006544:	d827      	bhi.n	8006596 <UART_SetConfig+0x506>
 8006546:	a201      	add	r2, pc, #4	@ (adr r2, 800654c <UART_SetConfig+0x4bc>)
 8006548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800654c:	08006571 	.word	0x08006571
 8006550:	08006579 	.word	0x08006579
 8006554:	08006581 	.word	0x08006581
 8006558:	08006597 	.word	0x08006597
 800655c:	08006587 	.word	0x08006587
 8006560:	08006597 	.word	0x08006597
 8006564:	08006597 	.word	0x08006597
 8006568:	08006597 	.word	0x08006597
 800656c:	0800658f 	.word	0x0800658f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006570:	f7fd f836 	bl	80035e0 <HAL_RCC_GetPCLK1Freq>
 8006574:	61f8      	str	r0, [r7, #28]
        break;
 8006576:	e014      	b.n	80065a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006578:	f7fd f848 	bl	800360c <HAL_RCC_GetPCLK2Freq>
 800657c:	61f8      	str	r0, [r7, #28]
        break;
 800657e:	e010      	b.n	80065a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006580:	4b1e      	ldr	r3, [pc, #120]	@ (80065fc <UART_SetConfig+0x56c>)
 8006582:	61fb      	str	r3, [r7, #28]
        break;
 8006584:	e00d      	b.n	80065a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006586:	f7fc ff93 	bl	80034b0 <HAL_RCC_GetSysClockFreq>
 800658a:	61f8      	str	r0, [r7, #28]
        break;
 800658c:	e009      	b.n	80065a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800658e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006592:	61fb      	str	r3, [r7, #28]
        break;
 8006594:	e005      	b.n	80065a2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006596:	2300      	movs	r3, #0
 8006598:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80065a0:	bf00      	nop
    }

    if (pclk != 0U)
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d019      	beq.n	80065dc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	085a      	lsrs	r2, r3, #1
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	441a      	add	r2, r3
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80065ba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065bc:	69bb      	ldr	r3, [r7, #24]
 80065be:	2b0f      	cmp	r3, #15
 80065c0:	d909      	bls.n	80065d6 <UART_SetConfig+0x546>
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065c8:	d205      	bcs.n	80065d6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	b29a      	uxth	r2, r3
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	60da      	str	r2, [r3, #12]
 80065d4:	e002      	b.n	80065dc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2200      	movs	r2, #0
 80065e0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2200      	movs	r2, #0
 80065e6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80065e8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3728      	adds	r7, #40	@ 0x28
 80065f0:	46bd      	mov	sp, r7
 80065f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065f6:	bf00      	nop
 80065f8:	40008000 	.word	0x40008000
 80065fc:	00f42400 	.word	0x00f42400

08006600 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800660c:	f003 0308 	and.w	r3, r3, #8
 8006610:	2b00      	cmp	r3, #0
 8006612:	d00a      	beq.n	800662a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	430a      	orrs	r2, r1
 8006628:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800662e:	f003 0301 	and.w	r3, r3, #1
 8006632:	2b00      	cmp	r3, #0
 8006634:	d00a      	beq.n	800664c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	430a      	orrs	r2, r1
 800664a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006650:	f003 0302 	and.w	r3, r3, #2
 8006654:	2b00      	cmp	r3, #0
 8006656:	d00a      	beq.n	800666e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	430a      	orrs	r2, r1
 800666c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006672:	f003 0304 	and.w	r3, r3, #4
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00a      	beq.n	8006690 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	430a      	orrs	r2, r1
 800668e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006694:	f003 0310 	and.w	r3, r3, #16
 8006698:	2b00      	cmp	r3, #0
 800669a:	d00a      	beq.n	80066b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	430a      	orrs	r2, r1
 80066b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066b6:	f003 0320 	and.w	r3, r3, #32
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00a      	beq.n	80066d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	430a      	orrs	r2, r1
 80066d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d01a      	beq.n	8006716 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	430a      	orrs	r2, r1
 80066f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80066fe:	d10a      	bne.n	8006716 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	430a      	orrs	r2, r1
 8006714:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800671a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800671e:	2b00      	cmp	r3, #0
 8006720:	d00a      	beq.n	8006738 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	430a      	orrs	r2, r1
 8006736:	605a      	str	r2, [r3, #4]
  }
}
 8006738:	bf00      	nop
 800673a:	370c      	adds	r7, #12
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr

08006744 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b098      	sub	sp, #96	@ 0x60
 8006748:	af02      	add	r7, sp, #8
 800674a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006754:	f7fa feae 	bl	80014b4 <HAL_GetTick>
 8006758:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 0308 	and.w	r3, r3, #8
 8006764:	2b08      	cmp	r3, #8
 8006766:	d12e      	bne.n	80067c6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006768:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800676c:	9300      	str	r3, [sp, #0]
 800676e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006770:	2200      	movs	r2, #0
 8006772:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 f88c 	bl	8006894 <UART_WaitOnFlagUntilTimeout>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d021      	beq.n	80067c6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800678a:	e853 3f00 	ldrex	r3, [r3]
 800678e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006792:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006796:	653b      	str	r3, [r7, #80]	@ 0x50
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	461a      	mov	r2, r3
 800679e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80067a2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80067a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80067a8:	e841 2300 	strex	r3, r2, [r1]
 80067ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80067ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d1e6      	bne.n	8006782 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2220      	movs	r2, #32
 80067b8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067c2:	2303      	movs	r3, #3
 80067c4:	e062      	b.n	800688c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f003 0304 	and.w	r3, r3, #4
 80067d0:	2b04      	cmp	r3, #4
 80067d2:	d149      	bne.n	8006868 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80067d8:	9300      	str	r3, [sp, #0]
 80067da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067dc:	2200      	movs	r2, #0
 80067de:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 f856 	bl	8006894 <UART_WaitOnFlagUntilTimeout>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d03c      	beq.n	8006868 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f6:	e853 3f00 	ldrex	r3, [r3]
 80067fa:	623b      	str	r3, [r7, #32]
   return(result);
 80067fc:	6a3b      	ldr	r3, [r7, #32]
 80067fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006802:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	461a      	mov	r2, r3
 800680a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800680c:	633b      	str	r3, [r7, #48]	@ 0x30
 800680e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006810:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006812:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006814:	e841 2300 	strex	r3, r2, [r1]
 8006818:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800681a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800681c:	2b00      	cmp	r3, #0
 800681e:	d1e6      	bne.n	80067ee <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	3308      	adds	r3, #8
 8006826:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	e853 3f00 	ldrex	r3, [r3]
 800682e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f023 0301 	bic.w	r3, r3, #1
 8006836:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	3308      	adds	r3, #8
 800683e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006840:	61fa      	str	r2, [r7, #28]
 8006842:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006844:	69b9      	ldr	r1, [r7, #24]
 8006846:	69fa      	ldr	r2, [r7, #28]
 8006848:	e841 2300 	strex	r3, r2, [r1]
 800684c:	617b      	str	r3, [r7, #20]
   return(result);
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d1e5      	bne.n	8006820 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2220      	movs	r2, #32
 8006858:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006864:	2303      	movs	r3, #3
 8006866:	e011      	b.n	800688c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2220      	movs	r2, #32
 800686c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2220      	movs	r2, #32
 8006872:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800688a:	2300      	movs	r3, #0
}
 800688c:	4618      	mov	r0, r3
 800688e:	3758      	adds	r7, #88	@ 0x58
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}

08006894 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	603b      	str	r3, [r7, #0]
 80068a0:	4613      	mov	r3, r2
 80068a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068a4:	e04f      	b.n	8006946 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068a6:	69bb      	ldr	r3, [r7, #24]
 80068a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ac:	d04b      	beq.n	8006946 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068ae:	f7fa fe01 	bl	80014b4 <HAL_GetTick>
 80068b2:	4602      	mov	r2, r0
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	1ad3      	subs	r3, r2, r3
 80068b8:	69ba      	ldr	r2, [r7, #24]
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d302      	bcc.n	80068c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80068be:	69bb      	ldr	r3, [r7, #24]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d101      	bne.n	80068c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80068c4:	2303      	movs	r3, #3
 80068c6:	e04e      	b.n	8006966 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f003 0304 	and.w	r3, r3, #4
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d037      	beq.n	8006946 <UART_WaitOnFlagUntilTimeout+0xb2>
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	2b80      	cmp	r3, #128	@ 0x80
 80068da:	d034      	beq.n	8006946 <UART_WaitOnFlagUntilTimeout+0xb2>
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	2b40      	cmp	r3, #64	@ 0x40
 80068e0:	d031      	beq.n	8006946 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	69db      	ldr	r3, [r3, #28]
 80068e8:	f003 0308 	and.w	r3, r3, #8
 80068ec:	2b08      	cmp	r3, #8
 80068ee:	d110      	bne.n	8006912 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2208      	movs	r2, #8
 80068f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068f8:	68f8      	ldr	r0, [r7, #12]
 80068fa:	f000 f838 	bl	800696e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2208      	movs	r2, #8
 8006902:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2200      	movs	r2, #0
 800690a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e029      	b.n	8006966 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	69db      	ldr	r3, [r3, #28]
 8006918:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800691c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006920:	d111      	bne.n	8006946 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800692a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800692c:	68f8      	ldr	r0, [r7, #12]
 800692e:	f000 f81e 	bl	800696e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2220      	movs	r2, #32
 8006936:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2200      	movs	r2, #0
 800693e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006942:	2303      	movs	r3, #3
 8006944:	e00f      	b.n	8006966 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	69da      	ldr	r2, [r3, #28]
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	4013      	ands	r3, r2
 8006950:	68ba      	ldr	r2, [r7, #8]
 8006952:	429a      	cmp	r2, r3
 8006954:	bf0c      	ite	eq
 8006956:	2301      	moveq	r3, #1
 8006958:	2300      	movne	r3, #0
 800695a:	b2db      	uxtb	r3, r3
 800695c:	461a      	mov	r2, r3
 800695e:	79fb      	ldrb	r3, [r7, #7]
 8006960:	429a      	cmp	r2, r3
 8006962:	d0a0      	beq.n	80068a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006964:	2300      	movs	r3, #0
}
 8006966:	4618      	mov	r0, r3
 8006968:	3710      	adds	r7, #16
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}

0800696e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800696e:	b480      	push	{r7}
 8006970:	b095      	sub	sp, #84	@ 0x54
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800697e:	e853 3f00 	ldrex	r3, [r3]
 8006982:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006986:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800698a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	461a      	mov	r2, r3
 8006992:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006994:	643b      	str	r3, [r7, #64]	@ 0x40
 8006996:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006998:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800699a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800699c:	e841 2300 	strex	r3, r2, [r1]
 80069a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80069a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d1e6      	bne.n	8006976 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	3308      	adds	r3, #8
 80069ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b0:	6a3b      	ldr	r3, [r7, #32]
 80069b2:	e853 3f00 	ldrex	r3, [r3]
 80069b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	f023 0301 	bic.w	r3, r3, #1
 80069be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	3308      	adds	r3, #8
 80069c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80069ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80069ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069d0:	e841 2300 	strex	r3, r2, [r1]
 80069d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80069d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d1e5      	bne.n	80069a8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d118      	bne.n	8006a16 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	e853 3f00 	ldrex	r3, [r3]
 80069f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	f023 0310 	bic.w	r3, r3, #16
 80069f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	461a      	mov	r2, r3
 8006a00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a02:	61bb      	str	r3, [r7, #24]
 8006a04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a06:	6979      	ldr	r1, [r7, #20]
 8006a08:	69ba      	ldr	r2, [r7, #24]
 8006a0a:	e841 2300 	strex	r3, r2, [r1]
 8006a0e:	613b      	str	r3, [r7, #16]
   return(result);
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d1e6      	bne.n	80069e4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2220      	movs	r2, #32
 8006a1a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006a2a:	bf00      	nop
 8006a2c:	3754      	adds	r7, #84	@ 0x54
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr
	...

08006a38 <std>:
 8006a38:	2300      	movs	r3, #0
 8006a3a:	b510      	push	{r4, lr}
 8006a3c:	4604      	mov	r4, r0
 8006a3e:	e9c0 3300 	strd	r3, r3, [r0]
 8006a42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a46:	6083      	str	r3, [r0, #8]
 8006a48:	8181      	strh	r1, [r0, #12]
 8006a4a:	6643      	str	r3, [r0, #100]	@ 0x64
 8006a4c:	81c2      	strh	r2, [r0, #14]
 8006a4e:	6183      	str	r3, [r0, #24]
 8006a50:	4619      	mov	r1, r3
 8006a52:	2208      	movs	r2, #8
 8006a54:	305c      	adds	r0, #92	@ 0x5c
 8006a56:	f000 f9f9 	bl	8006e4c <memset>
 8006a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8006a90 <std+0x58>)
 8006a5c:	6263      	str	r3, [r4, #36]	@ 0x24
 8006a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8006a94 <std+0x5c>)
 8006a60:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006a62:	4b0d      	ldr	r3, [pc, #52]	@ (8006a98 <std+0x60>)
 8006a64:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006a66:	4b0d      	ldr	r3, [pc, #52]	@ (8006a9c <std+0x64>)
 8006a68:	6323      	str	r3, [r4, #48]	@ 0x30
 8006a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8006aa0 <std+0x68>)
 8006a6c:	6224      	str	r4, [r4, #32]
 8006a6e:	429c      	cmp	r4, r3
 8006a70:	d006      	beq.n	8006a80 <std+0x48>
 8006a72:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006a76:	4294      	cmp	r4, r2
 8006a78:	d002      	beq.n	8006a80 <std+0x48>
 8006a7a:	33d0      	adds	r3, #208	@ 0xd0
 8006a7c:	429c      	cmp	r4, r3
 8006a7e:	d105      	bne.n	8006a8c <std+0x54>
 8006a80:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006a84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a88:	f000 ba58 	b.w	8006f3c <__retarget_lock_init_recursive>
 8006a8c:	bd10      	pop	{r4, pc}
 8006a8e:	bf00      	nop
 8006a90:	08006c9d 	.word	0x08006c9d
 8006a94:	08006cbf 	.word	0x08006cbf
 8006a98:	08006cf7 	.word	0x08006cf7
 8006a9c:	08006d1b 	.word	0x08006d1b
 8006aa0:	2000037c 	.word	0x2000037c

08006aa4 <stdio_exit_handler>:
 8006aa4:	4a02      	ldr	r2, [pc, #8]	@ (8006ab0 <stdio_exit_handler+0xc>)
 8006aa6:	4903      	ldr	r1, [pc, #12]	@ (8006ab4 <stdio_exit_handler+0x10>)
 8006aa8:	4803      	ldr	r0, [pc, #12]	@ (8006ab8 <stdio_exit_handler+0x14>)
 8006aaa:	f000 b869 	b.w	8006b80 <_fwalk_sglue>
 8006aae:	bf00      	nop
 8006ab0:	2000000c 	.word	0x2000000c
 8006ab4:	080077dd 	.word	0x080077dd
 8006ab8:	2000001c 	.word	0x2000001c

08006abc <cleanup_stdio>:
 8006abc:	6841      	ldr	r1, [r0, #4]
 8006abe:	4b0c      	ldr	r3, [pc, #48]	@ (8006af0 <cleanup_stdio+0x34>)
 8006ac0:	4299      	cmp	r1, r3
 8006ac2:	b510      	push	{r4, lr}
 8006ac4:	4604      	mov	r4, r0
 8006ac6:	d001      	beq.n	8006acc <cleanup_stdio+0x10>
 8006ac8:	f000 fe88 	bl	80077dc <_fflush_r>
 8006acc:	68a1      	ldr	r1, [r4, #8]
 8006ace:	4b09      	ldr	r3, [pc, #36]	@ (8006af4 <cleanup_stdio+0x38>)
 8006ad0:	4299      	cmp	r1, r3
 8006ad2:	d002      	beq.n	8006ada <cleanup_stdio+0x1e>
 8006ad4:	4620      	mov	r0, r4
 8006ad6:	f000 fe81 	bl	80077dc <_fflush_r>
 8006ada:	68e1      	ldr	r1, [r4, #12]
 8006adc:	4b06      	ldr	r3, [pc, #24]	@ (8006af8 <cleanup_stdio+0x3c>)
 8006ade:	4299      	cmp	r1, r3
 8006ae0:	d004      	beq.n	8006aec <cleanup_stdio+0x30>
 8006ae2:	4620      	mov	r0, r4
 8006ae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ae8:	f000 be78 	b.w	80077dc <_fflush_r>
 8006aec:	bd10      	pop	{r4, pc}
 8006aee:	bf00      	nop
 8006af0:	2000037c 	.word	0x2000037c
 8006af4:	200003e4 	.word	0x200003e4
 8006af8:	2000044c 	.word	0x2000044c

08006afc <global_stdio_init.part.0>:
 8006afc:	b510      	push	{r4, lr}
 8006afe:	4b0b      	ldr	r3, [pc, #44]	@ (8006b2c <global_stdio_init.part.0+0x30>)
 8006b00:	4c0b      	ldr	r4, [pc, #44]	@ (8006b30 <global_stdio_init.part.0+0x34>)
 8006b02:	4a0c      	ldr	r2, [pc, #48]	@ (8006b34 <global_stdio_init.part.0+0x38>)
 8006b04:	601a      	str	r2, [r3, #0]
 8006b06:	4620      	mov	r0, r4
 8006b08:	2200      	movs	r2, #0
 8006b0a:	2104      	movs	r1, #4
 8006b0c:	f7ff ff94 	bl	8006a38 <std>
 8006b10:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006b14:	2201      	movs	r2, #1
 8006b16:	2109      	movs	r1, #9
 8006b18:	f7ff ff8e 	bl	8006a38 <std>
 8006b1c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006b20:	2202      	movs	r2, #2
 8006b22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b26:	2112      	movs	r1, #18
 8006b28:	f7ff bf86 	b.w	8006a38 <std>
 8006b2c:	200004b4 	.word	0x200004b4
 8006b30:	2000037c 	.word	0x2000037c
 8006b34:	08006aa5 	.word	0x08006aa5

08006b38 <__sfp_lock_acquire>:
 8006b38:	4801      	ldr	r0, [pc, #4]	@ (8006b40 <__sfp_lock_acquire+0x8>)
 8006b3a:	f000 ba00 	b.w	8006f3e <__retarget_lock_acquire_recursive>
 8006b3e:	bf00      	nop
 8006b40:	200004bd 	.word	0x200004bd

08006b44 <__sfp_lock_release>:
 8006b44:	4801      	ldr	r0, [pc, #4]	@ (8006b4c <__sfp_lock_release+0x8>)
 8006b46:	f000 b9fb 	b.w	8006f40 <__retarget_lock_release_recursive>
 8006b4a:	bf00      	nop
 8006b4c:	200004bd 	.word	0x200004bd

08006b50 <__sinit>:
 8006b50:	b510      	push	{r4, lr}
 8006b52:	4604      	mov	r4, r0
 8006b54:	f7ff fff0 	bl	8006b38 <__sfp_lock_acquire>
 8006b58:	6a23      	ldr	r3, [r4, #32]
 8006b5a:	b11b      	cbz	r3, 8006b64 <__sinit+0x14>
 8006b5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b60:	f7ff bff0 	b.w	8006b44 <__sfp_lock_release>
 8006b64:	4b04      	ldr	r3, [pc, #16]	@ (8006b78 <__sinit+0x28>)
 8006b66:	6223      	str	r3, [r4, #32]
 8006b68:	4b04      	ldr	r3, [pc, #16]	@ (8006b7c <__sinit+0x2c>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d1f5      	bne.n	8006b5c <__sinit+0xc>
 8006b70:	f7ff ffc4 	bl	8006afc <global_stdio_init.part.0>
 8006b74:	e7f2      	b.n	8006b5c <__sinit+0xc>
 8006b76:	bf00      	nop
 8006b78:	08006abd 	.word	0x08006abd
 8006b7c:	200004b4 	.word	0x200004b4

08006b80 <_fwalk_sglue>:
 8006b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b84:	4607      	mov	r7, r0
 8006b86:	4688      	mov	r8, r1
 8006b88:	4614      	mov	r4, r2
 8006b8a:	2600      	movs	r6, #0
 8006b8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b90:	f1b9 0901 	subs.w	r9, r9, #1
 8006b94:	d505      	bpl.n	8006ba2 <_fwalk_sglue+0x22>
 8006b96:	6824      	ldr	r4, [r4, #0]
 8006b98:	2c00      	cmp	r4, #0
 8006b9a:	d1f7      	bne.n	8006b8c <_fwalk_sglue+0xc>
 8006b9c:	4630      	mov	r0, r6
 8006b9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ba2:	89ab      	ldrh	r3, [r5, #12]
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d907      	bls.n	8006bb8 <_fwalk_sglue+0x38>
 8006ba8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006bac:	3301      	adds	r3, #1
 8006bae:	d003      	beq.n	8006bb8 <_fwalk_sglue+0x38>
 8006bb0:	4629      	mov	r1, r5
 8006bb2:	4638      	mov	r0, r7
 8006bb4:	47c0      	blx	r8
 8006bb6:	4306      	orrs	r6, r0
 8006bb8:	3568      	adds	r5, #104	@ 0x68
 8006bba:	e7e9      	b.n	8006b90 <_fwalk_sglue+0x10>

08006bbc <iprintf>:
 8006bbc:	b40f      	push	{r0, r1, r2, r3}
 8006bbe:	b507      	push	{r0, r1, r2, lr}
 8006bc0:	4906      	ldr	r1, [pc, #24]	@ (8006bdc <iprintf+0x20>)
 8006bc2:	ab04      	add	r3, sp, #16
 8006bc4:	6808      	ldr	r0, [r1, #0]
 8006bc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bca:	6881      	ldr	r1, [r0, #8]
 8006bcc:	9301      	str	r3, [sp, #4]
 8006bce:	f000 fadb 	bl	8007188 <_vfiprintf_r>
 8006bd2:	b003      	add	sp, #12
 8006bd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bd8:	b004      	add	sp, #16
 8006bda:	4770      	bx	lr
 8006bdc:	20000018 	.word	0x20000018

08006be0 <_puts_r>:
 8006be0:	6a03      	ldr	r3, [r0, #32]
 8006be2:	b570      	push	{r4, r5, r6, lr}
 8006be4:	6884      	ldr	r4, [r0, #8]
 8006be6:	4605      	mov	r5, r0
 8006be8:	460e      	mov	r6, r1
 8006bea:	b90b      	cbnz	r3, 8006bf0 <_puts_r+0x10>
 8006bec:	f7ff ffb0 	bl	8006b50 <__sinit>
 8006bf0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006bf2:	07db      	lsls	r3, r3, #31
 8006bf4:	d405      	bmi.n	8006c02 <_puts_r+0x22>
 8006bf6:	89a3      	ldrh	r3, [r4, #12]
 8006bf8:	0598      	lsls	r0, r3, #22
 8006bfa:	d402      	bmi.n	8006c02 <_puts_r+0x22>
 8006bfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006bfe:	f000 f99e 	bl	8006f3e <__retarget_lock_acquire_recursive>
 8006c02:	89a3      	ldrh	r3, [r4, #12]
 8006c04:	0719      	lsls	r1, r3, #28
 8006c06:	d502      	bpl.n	8006c0e <_puts_r+0x2e>
 8006c08:	6923      	ldr	r3, [r4, #16]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d135      	bne.n	8006c7a <_puts_r+0x9a>
 8006c0e:	4621      	mov	r1, r4
 8006c10:	4628      	mov	r0, r5
 8006c12:	f000 f8c5 	bl	8006da0 <__swsetup_r>
 8006c16:	b380      	cbz	r0, 8006c7a <_puts_r+0x9a>
 8006c18:	f04f 35ff 	mov.w	r5, #4294967295
 8006c1c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006c1e:	07da      	lsls	r2, r3, #31
 8006c20:	d405      	bmi.n	8006c2e <_puts_r+0x4e>
 8006c22:	89a3      	ldrh	r3, [r4, #12]
 8006c24:	059b      	lsls	r3, r3, #22
 8006c26:	d402      	bmi.n	8006c2e <_puts_r+0x4e>
 8006c28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c2a:	f000 f989 	bl	8006f40 <__retarget_lock_release_recursive>
 8006c2e:	4628      	mov	r0, r5
 8006c30:	bd70      	pop	{r4, r5, r6, pc}
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	da04      	bge.n	8006c40 <_puts_r+0x60>
 8006c36:	69a2      	ldr	r2, [r4, #24]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	dc17      	bgt.n	8006c6c <_puts_r+0x8c>
 8006c3c:	290a      	cmp	r1, #10
 8006c3e:	d015      	beq.n	8006c6c <_puts_r+0x8c>
 8006c40:	6823      	ldr	r3, [r4, #0]
 8006c42:	1c5a      	adds	r2, r3, #1
 8006c44:	6022      	str	r2, [r4, #0]
 8006c46:	7019      	strb	r1, [r3, #0]
 8006c48:	68a3      	ldr	r3, [r4, #8]
 8006c4a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006c4e:	3b01      	subs	r3, #1
 8006c50:	60a3      	str	r3, [r4, #8]
 8006c52:	2900      	cmp	r1, #0
 8006c54:	d1ed      	bne.n	8006c32 <_puts_r+0x52>
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	da11      	bge.n	8006c7e <_puts_r+0x9e>
 8006c5a:	4622      	mov	r2, r4
 8006c5c:	210a      	movs	r1, #10
 8006c5e:	4628      	mov	r0, r5
 8006c60:	f000 f85f 	bl	8006d22 <__swbuf_r>
 8006c64:	3001      	adds	r0, #1
 8006c66:	d0d7      	beq.n	8006c18 <_puts_r+0x38>
 8006c68:	250a      	movs	r5, #10
 8006c6a:	e7d7      	b.n	8006c1c <_puts_r+0x3c>
 8006c6c:	4622      	mov	r2, r4
 8006c6e:	4628      	mov	r0, r5
 8006c70:	f000 f857 	bl	8006d22 <__swbuf_r>
 8006c74:	3001      	adds	r0, #1
 8006c76:	d1e7      	bne.n	8006c48 <_puts_r+0x68>
 8006c78:	e7ce      	b.n	8006c18 <_puts_r+0x38>
 8006c7a:	3e01      	subs	r6, #1
 8006c7c:	e7e4      	b.n	8006c48 <_puts_r+0x68>
 8006c7e:	6823      	ldr	r3, [r4, #0]
 8006c80:	1c5a      	adds	r2, r3, #1
 8006c82:	6022      	str	r2, [r4, #0]
 8006c84:	220a      	movs	r2, #10
 8006c86:	701a      	strb	r2, [r3, #0]
 8006c88:	e7ee      	b.n	8006c68 <_puts_r+0x88>
	...

08006c8c <puts>:
 8006c8c:	4b02      	ldr	r3, [pc, #8]	@ (8006c98 <puts+0xc>)
 8006c8e:	4601      	mov	r1, r0
 8006c90:	6818      	ldr	r0, [r3, #0]
 8006c92:	f7ff bfa5 	b.w	8006be0 <_puts_r>
 8006c96:	bf00      	nop
 8006c98:	20000018 	.word	0x20000018

08006c9c <__sread>:
 8006c9c:	b510      	push	{r4, lr}
 8006c9e:	460c      	mov	r4, r1
 8006ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ca4:	f000 f8fc 	bl	8006ea0 <_read_r>
 8006ca8:	2800      	cmp	r0, #0
 8006caa:	bfab      	itete	ge
 8006cac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006cae:	89a3      	ldrhlt	r3, [r4, #12]
 8006cb0:	181b      	addge	r3, r3, r0
 8006cb2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006cb6:	bfac      	ite	ge
 8006cb8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006cba:	81a3      	strhlt	r3, [r4, #12]
 8006cbc:	bd10      	pop	{r4, pc}

08006cbe <__swrite>:
 8006cbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cc2:	461f      	mov	r7, r3
 8006cc4:	898b      	ldrh	r3, [r1, #12]
 8006cc6:	05db      	lsls	r3, r3, #23
 8006cc8:	4605      	mov	r5, r0
 8006cca:	460c      	mov	r4, r1
 8006ccc:	4616      	mov	r6, r2
 8006cce:	d505      	bpl.n	8006cdc <__swrite+0x1e>
 8006cd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cd4:	2302      	movs	r3, #2
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f000 f8d0 	bl	8006e7c <_lseek_r>
 8006cdc:	89a3      	ldrh	r3, [r4, #12]
 8006cde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ce2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006ce6:	81a3      	strh	r3, [r4, #12]
 8006ce8:	4632      	mov	r2, r6
 8006cea:	463b      	mov	r3, r7
 8006cec:	4628      	mov	r0, r5
 8006cee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006cf2:	f000 b8e7 	b.w	8006ec4 <_write_r>

08006cf6 <__sseek>:
 8006cf6:	b510      	push	{r4, lr}
 8006cf8:	460c      	mov	r4, r1
 8006cfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cfe:	f000 f8bd 	bl	8006e7c <_lseek_r>
 8006d02:	1c43      	adds	r3, r0, #1
 8006d04:	89a3      	ldrh	r3, [r4, #12]
 8006d06:	bf15      	itete	ne
 8006d08:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006d0a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006d0e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006d12:	81a3      	strheq	r3, [r4, #12]
 8006d14:	bf18      	it	ne
 8006d16:	81a3      	strhne	r3, [r4, #12]
 8006d18:	bd10      	pop	{r4, pc}

08006d1a <__sclose>:
 8006d1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d1e:	f000 b89d 	b.w	8006e5c <_close_r>

08006d22 <__swbuf_r>:
 8006d22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d24:	460e      	mov	r6, r1
 8006d26:	4614      	mov	r4, r2
 8006d28:	4605      	mov	r5, r0
 8006d2a:	b118      	cbz	r0, 8006d34 <__swbuf_r+0x12>
 8006d2c:	6a03      	ldr	r3, [r0, #32]
 8006d2e:	b90b      	cbnz	r3, 8006d34 <__swbuf_r+0x12>
 8006d30:	f7ff ff0e 	bl	8006b50 <__sinit>
 8006d34:	69a3      	ldr	r3, [r4, #24]
 8006d36:	60a3      	str	r3, [r4, #8]
 8006d38:	89a3      	ldrh	r3, [r4, #12]
 8006d3a:	071a      	lsls	r2, r3, #28
 8006d3c:	d501      	bpl.n	8006d42 <__swbuf_r+0x20>
 8006d3e:	6923      	ldr	r3, [r4, #16]
 8006d40:	b943      	cbnz	r3, 8006d54 <__swbuf_r+0x32>
 8006d42:	4621      	mov	r1, r4
 8006d44:	4628      	mov	r0, r5
 8006d46:	f000 f82b 	bl	8006da0 <__swsetup_r>
 8006d4a:	b118      	cbz	r0, 8006d54 <__swbuf_r+0x32>
 8006d4c:	f04f 37ff 	mov.w	r7, #4294967295
 8006d50:	4638      	mov	r0, r7
 8006d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d54:	6823      	ldr	r3, [r4, #0]
 8006d56:	6922      	ldr	r2, [r4, #16]
 8006d58:	1a98      	subs	r0, r3, r2
 8006d5a:	6963      	ldr	r3, [r4, #20]
 8006d5c:	b2f6      	uxtb	r6, r6
 8006d5e:	4283      	cmp	r3, r0
 8006d60:	4637      	mov	r7, r6
 8006d62:	dc05      	bgt.n	8006d70 <__swbuf_r+0x4e>
 8006d64:	4621      	mov	r1, r4
 8006d66:	4628      	mov	r0, r5
 8006d68:	f000 fd38 	bl	80077dc <_fflush_r>
 8006d6c:	2800      	cmp	r0, #0
 8006d6e:	d1ed      	bne.n	8006d4c <__swbuf_r+0x2a>
 8006d70:	68a3      	ldr	r3, [r4, #8]
 8006d72:	3b01      	subs	r3, #1
 8006d74:	60a3      	str	r3, [r4, #8]
 8006d76:	6823      	ldr	r3, [r4, #0]
 8006d78:	1c5a      	adds	r2, r3, #1
 8006d7a:	6022      	str	r2, [r4, #0]
 8006d7c:	701e      	strb	r6, [r3, #0]
 8006d7e:	6962      	ldr	r2, [r4, #20]
 8006d80:	1c43      	adds	r3, r0, #1
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d004      	beq.n	8006d90 <__swbuf_r+0x6e>
 8006d86:	89a3      	ldrh	r3, [r4, #12]
 8006d88:	07db      	lsls	r3, r3, #31
 8006d8a:	d5e1      	bpl.n	8006d50 <__swbuf_r+0x2e>
 8006d8c:	2e0a      	cmp	r6, #10
 8006d8e:	d1df      	bne.n	8006d50 <__swbuf_r+0x2e>
 8006d90:	4621      	mov	r1, r4
 8006d92:	4628      	mov	r0, r5
 8006d94:	f000 fd22 	bl	80077dc <_fflush_r>
 8006d98:	2800      	cmp	r0, #0
 8006d9a:	d0d9      	beq.n	8006d50 <__swbuf_r+0x2e>
 8006d9c:	e7d6      	b.n	8006d4c <__swbuf_r+0x2a>
	...

08006da0 <__swsetup_r>:
 8006da0:	b538      	push	{r3, r4, r5, lr}
 8006da2:	4b29      	ldr	r3, [pc, #164]	@ (8006e48 <__swsetup_r+0xa8>)
 8006da4:	4605      	mov	r5, r0
 8006da6:	6818      	ldr	r0, [r3, #0]
 8006da8:	460c      	mov	r4, r1
 8006daa:	b118      	cbz	r0, 8006db4 <__swsetup_r+0x14>
 8006dac:	6a03      	ldr	r3, [r0, #32]
 8006dae:	b90b      	cbnz	r3, 8006db4 <__swsetup_r+0x14>
 8006db0:	f7ff fece 	bl	8006b50 <__sinit>
 8006db4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006db8:	0719      	lsls	r1, r3, #28
 8006dba:	d422      	bmi.n	8006e02 <__swsetup_r+0x62>
 8006dbc:	06da      	lsls	r2, r3, #27
 8006dbe:	d407      	bmi.n	8006dd0 <__swsetup_r+0x30>
 8006dc0:	2209      	movs	r2, #9
 8006dc2:	602a      	str	r2, [r5, #0]
 8006dc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006dc8:	81a3      	strh	r3, [r4, #12]
 8006dca:	f04f 30ff 	mov.w	r0, #4294967295
 8006dce:	e033      	b.n	8006e38 <__swsetup_r+0x98>
 8006dd0:	0758      	lsls	r0, r3, #29
 8006dd2:	d512      	bpl.n	8006dfa <__swsetup_r+0x5a>
 8006dd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006dd6:	b141      	cbz	r1, 8006dea <__swsetup_r+0x4a>
 8006dd8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006ddc:	4299      	cmp	r1, r3
 8006dde:	d002      	beq.n	8006de6 <__swsetup_r+0x46>
 8006de0:	4628      	mov	r0, r5
 8006de2:	f000 f8af 	bl	8006f44 <_free_r>
 8006de6:	2300      	movs	r3, #0
 8006de8:	6363      	str	r3, [r4, #52]	@ 0x34
 8006dea:	89a3      	ldrh	r3, [r4, #12]
 8006dec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006df0:	81a3      	strh	r3, [r4, #12]
 8006df2:	2300      	movs	r3, #0
 8006df4:	6063      	str	r3, [r4, #4]
 8006df6:	6923      	ldr	r3, [r4, #16]
 8006df8:	6023      	str	r3, [r4, #0]
 8006dfa:	89a3      	ldrh	r3, [r4, #12]
 8006dfc:	f043 0308 	orr.w	r3, r3, #8
 8006e00:	81a3      	strh	r3, [r4, #12]
 8006e02:	6923      	ldr	r3, [r4, #16]
 8006e04:	b94b      	cbnz	r3, 8006e1a <__swsetup_r+0x7a>
 8006e06:	89a3      	ldrh	r3, [r4, #12]
 8006e08:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006e0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e10:	d003      	beq.n	8006e1a <__swsetup_r+0x7a>
 8006e12:	4621      	mov	r1, r4
 8006e14:	4628      	mov	r0, r5
 8006e16:	f000 fd2f 	bl	8007878 <__smakebuf_r>
 8006e1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e1e:	f013 0201 	ands.w	r2, r3, #1
 8006e22:	d00a      	beq.n	8006e3a <__swsetup_r+0x9a>
 8006e24:	2200      	movs	r2, #0
 8006e26:	60a2      	str	r2, [r4, #8]
 8006e28:	6962      	ldr	r2, [r4, #20]
 8006e2a:	4252      	negs	r2, r2
 8006e2c:	61a2      	str	r2, [r4, #24]
 8006e2e:	6922      	ldr	r2, [r4, #16]
 8006e30:	b942      	cbnz	r2, 8006e44 <__swsetup_r+0xa4>
 8006e32:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006e36:	d1c5      	bne.n	8006dc4 <__swsetup_r+0x24>
 8006e38:	bd38      	pop	{r3, r4, r5, pc}
 8006e3a:	0799      	lsls	r1, r3, #30
 8006e3c:	bf58      	it	pl
 8006e3e:	6962      	ldrpl	r2, [r4, #20]
 8006e40:	60a2      	str	r2, [r4, #8]
 8006e42:	e7f4      	b.n	8006e2e <__swsetup_r+0x8e>
 8006e44:	2000      	movs	r0, #0
 8006e46:	e7f7      	b.n	8006e38 <__swsetup_r+0x98>
 8006e48:	20000018 	.word	0x20000018

08006e4c <memset>:
 8006e4c:	4402      	add	r2, r0
 8006e4e:	4603      	mov	r3, r0
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d100      	bne.n	8006e56 <memset+0xa>
 8006e54:	4770      	bx	lr
 8006e56:	f803 1b01 	strb.w	r1, [r3], #1
 8006e5a:	e7f9      	b.n	8006e50 <memset+0x4>

08006e5c <_close_r>:
 8006e5c:	b538      	push	{r3, r4, r5, lr}
 8006e5e:	4d06      	ldr	r5, [pc, #24]	@ (8006e78 <_close_r+0x1c>)
 8006e60:	2300      	movs	r3, #0
 8006e62:	4604      	mov	r4, r0
 8006e64:	4608      	mov	r0, r1
 8006e66:	602b      	str	r3, [r5, #0]
 8006e68:	f7fa f981 	bl	800116e <_close>
 8006e6c:	1c43      	adds	r3, r0, #1
 8006e6e:	d102      	bne.n	8006e76 <_close_r+0x1a>
 8006e70:	682b      	ldr	r3, [r5, #0]
 8006e72:	b103      	cbz	r3, 8006e76 <_close_r+0x1a>
 8006e74:	6023      	str	r3, [r4, #0]
 8006e76:	bd38      	pop	{r3, r4, r5, pc}
 8006e78:	200004b8 	.word	0x200004b8

08006e7c <_lseek_r>:
 8006e7c:	b538      	push	{r3, r4, r5, lr}
 8006e7e:	4d07      	ldr	r5, [pc, #28]	@ (8006e9c <_lseek_r+0x20>)
 8006e80:	4604      	mov	r4, r0
 8006e82:	4608      	mov	r0, r1
 8006e84:	4611      	mov	r1, r2
 8006e86:	2200      	movs	r2, #0
 8006e88:	602a      	str	r2, [r5, #0]
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	f7fa f996 	bl	80011bc <_lseek>
 8006e90:	1c43      	adds	r3, r0, #1
 8006e92:	d102      	bne.n	8006e9a <_lseek_r+0x1e>
 8006e94:	682b      	ldr	r3, [r5, #0]
 8006e96:	b103      	cbz	r3, 8006e9a <_lseek_r+0x1e>
 8006e98:	6023      	str	r3, [r4, #0]
 8006e9a:	bd38      	pop	{r3, r4, r5, pc}
 8006e9c:	200004b8 	.word	0x200004b8

08006ea0 <_read_r>:
 8006ea0:	b538      	push	{r3, r4, r5, lr}
 8006ea2:	4d07      	ldr	r5, [pc, #28]	@ (8006ec0 <_read_r+0x20>)
 8006ea4:	4604      	mov	r4, r0
 8006ea6:	4608      	mov	r0, r1
 8006ea8:	4611      	mov	r1, r2
 8006eaa:	2200      	movs	r2, #0
 8006eac:	602a      	str	r2, [r5, #0]
 8006eae:	461a      	mov	r2, r3
 8006eb0:	f7fa f924 	bl	80010fc <_read>
 8006eb4:	1c43      	adds	r3, r0, #1
 8006eb6:	d102      	bne.n	8006ebe <_read_r+0x1e>
 8006eb8:	682b      	ldr	r3, [r5, #0]
 8006eba:	b103      	cbz	r3, 8006ebe <_read_r+0x1e>
 8006ebc:	6023      	str	r3, [r4, #0]
 8006ebe:	bd38      	pop	{r3, r4, r5, pc}
 8006ec0:	200004b8 	.word	0x200004b8

08006ec4 <_write_r>:
 8006ec4:	b538      	push	{r3, r4, r5, lr}
 8006ec6:	4d07      	ldr	r5, [pc, #28]	@ (8006ee4 <_write_r+0x20>)
 8006ec8:	4604      	mov	r4, r0
 8006eca:	4608      	mov	r0, r1
 8006ecc:	4611      	mov	r1, r2
 8006ece:	2200      	movs	r2, #0
 8006ed0:	602a      	str	r2, [r5, #0]
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	f7fa f92f 	bl	8001136 <_write>
 8006ed8:	1c43      	adds	r3, r0, #1
 8006eda:	d102      	bne.n	8006ee2 <_write_r+0x1e>
 8006edc:	682b      	ldr	r3, [r5, #0]
 8006ede:	b103      	cbz	r3, 8006ee2 <_write_r+0x1e>
 8006ee0:	6023      	str	r3, [r4, #0]
 8006ee2:	bd38      	pop	{r3, r4, r5, pc}
 8006ee4:	200004b8 	.word	0x200004b8

08006ee8 <__errno>:
 8006ee8:	4b01      	ldr	r3, [pc, #4]	@ (8006ef0 <__errno+0x8>)
 8006eea:	6818      	ldr	r0, [r3, #0]
 8006eec:	4770      	bx	lr
 8006eee:	bf00      	nop
 8006ef0:	20000018 	.word	0x20000018

08006ef4 <__libc_init_array>:
 8006ef4:	b570      	push	{r4, r5, r6, lr}
 8006ef6:	4d0d      	ldr	r5, [pc, #52]	@ (8006f2c <__libc_init_array+0x38>)
 8006ef8:	4c0d      	ldr	r4, [pc, #52]	@ (8006f30 <__libc_init_array+0x3c>)
 8006efa:	1b64      	subs	r4, r4, r5
 8006efc:	10a4      	asrs	r4, r4, #2
 8006efe:	2600      	movs	r6, #0
 8006f00:	42a6      	cmp	r6, r4
 8006f02:	d109      	bne.n	8006f18 <__libc_init_array+0x24>
 8006f04:	4d0b      	ldr	r5, [pc, #44]	@ (8006f34 <__libc_init_array+0x40>)
 8006f06:	4c0c      	ldr	r4, [pc, #48]	@ (8006f38 <__libc_init_array+0x44>)
 8006f08:	f000 fd24 	bl	8007954 <_init>
 8006f0c:	1b64      	subs	r4, r4, r5
 8006f0e:	10a4      	asrs	r4, r4, #2
 8006f10:	2600      	movs	r6, #0
 8006f12:	42a6      	cmp	r6, r4
 8006f14:	d105      	bne.n	8006f22 <__libc_init_array+0x2e>
 8006f16:	bd70      	pop	{r4, r5, r6, pc}
 8006f18:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f1c:	4798      	blx	r3
 8006f1e:	3601      	adds	r6, #1
 8006f20:	e7ee      	b.n	8006f00 <__libc_init_array+0xc>
 8006f22:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f26:	4798      	blx	r3
 8006f28:	3601      	adds	r6, #1
 8006f2a:	e7f2      	b.n	8006f12 <__libc_init_array+0x1e>
 8006f2c:	08007a34 	.word	0x08007a34
 8006f30:	08007a34 	.word	0x08007a34
 8006f34:	08007a34 	.word	0x08007a34
 8006f38:	08007a38 	.word	0x08007a38

08006f3c <__retarget_lock_init_recursive>:
 8006f3c:	4770      	bx	lr

08006f3e <__retarget_lock_acquire_recursive>:
 8006f3e:	4770      	bx	lr

08006f40 <__retarget_lock_release_recursive>:
 8006f40:	4770      	bx	lr
	...

08006f44 <_free_r>:
 8006f44:	b538      	push	{r3, r4, r5, lr}
 8006f46:	4605      	mov	r5, r0
 8006f48:	2900      	cmp	r1, #0
 8006f4a:	d041      	beq.n	8006fd0 <_free_r+0x8c>
 8006f4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f50:	1f0c      	subs	r4, r1, #4
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	bfb8      	it	lt
 8006f56:	18e4      	addlt	r4, r4, r3
 8006f58:	f000 f8e0 	bl	800711c <__malloc_lock>
 8006f5c:	4a1d      	ldr	r2, [pc, #116]	@ (8006fd4 <_free_r+0x90>)
 8006f5e:	6813      	ldr	r3, [r2, #0]
 8006f60:	b933      	cbnz	r3, 8006f70 <_free_r+0x2c>
 8006f62:	6063      	str	r3, [r4, #4]
 8006f64:	6014      	str	r4, [r2, #0]
 8006f66:	4628      	mov	r0, r5
 8006f68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f6c:	f000 b8dc 	b.w	8007128 <__malloc_unlock>
 8006f70:	42a3      	cmp	r3, r4
 8006f72:	d908      	bls.n	8006f86 <_free_r+0x42>
 8006f74:	6820      	ldr	r0, [r4, #0]
 8006f76:	1821      	adds	r1, r4, r0
 8006f78:	428b      	cmp	r3, r1
 8006f7a:	bf01      	itttt	eq
 8006f7c:	6819      	ldreq	r1, [r3, #0]
 8006f7e:	685b      	ldreq	r3, [r3, #4]
 8006f80:	1809      	addeq	r1, r1, r0
 8006f82:	6021      	streq	r1, [r4, #0]
 8006f84:	e7ed      	b.n	8006f62 <_free_r+0x1e>
 8006f86:	461a      	mov	r2, r3
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	b10b      	cbz	r3, 8006f90 <_free_r+0x4c>
 8006f8c:	42a3      	cmp	r3, r4
 8006f8e:	d9fa      	bls.n	8006f86 <_free_r+0x42>
 8006f90:	6811      	ldr	r1, [r2, #0]
 8006f92:	1850      	adds	r0, r2, r1
 8006f94:	42a0      	cmp	r0, r4
 8006f96:	d10b      	bne.n	8006fb0 <_free_r+0x6c>
 8006f98:	6820      	ldr	r0, [r4, #0]
 8006f9a:	4401      	add	r1, r0
 8006f9c:	1850      	adds	r0, r2, r1
 8006f9e:	4283      	cmp	r3, r0
 8006fa0:	6011      	str	r1, [r2, #0]
 8006fa2:	d1e0      	bne.n	8006f66 <_free_r+0x22>
 8006fa4:	6818      	ldr	r0, [r3, #0]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	6053      	str	r3, [r2, #4]
 8006faa:	4408      	add	r0, r1
 8006fac:	6010      	str	r0, [r2, #0]
 8006fae:	e7da      	b.n	8006f66 <_free_r+0x22>
 8006fb0:	d902      	bls.n	8006fb8 <_free_r+0x74>
 8006fb2:	230c      	movs	r3, #12
 8006fb4:	602b      	str	r3, [r5, #0]
 8006fb6:	e7d6      	b.n	8006f66 <_free_r+0x22>
 8006fb8:	6820      	ldr	r0, [r4, #0]
 8006fba:	1821      	adds	r1, r4, r0
 8006fbc:	428b      	cmp	r3, r1
 8006fbe:	bf04      	itt	eq
 8006fc0:	6819      	ldreq	r1, [r3, #0]
 8006fc2:	685b      	ldreq	r3, [r3, #4]
 8006fc4:	6063      	str	r3, [r4, #4]
 8006fc6:	bf04      	itt	eq
 8006fc8:	1809      	addeq	r1, r1, r0
 8006fca:	6021      	streq	r1, [r4, #0]
 8006fcc:	6054      	str	r4, [r2, #4]
 8006fce:	e7ca      	b.n	8006f66 <_free_r+0x22>
 8006fd0:	bd38      	pop	{r3, r4, r5, pc}
 8006fd2:	bf00      	nop
 8006fd4:	200004c4 	.word	0x200004c4

08006fd8 <sbrk_aligned>:
 8006fd8:	b570      	push	{r4, r5, r6, lr}
 8006fda:	4e0f      	ldr	r6, [pc, #60]	@ (8007018 <sbrk_aligned+0x40>)
 8006fdc:	460c      	mov	r4, r1
 8006fde:	6831      	ldr	r1, [r6, #0]
 8006fe0:	4605      	mov	r5, r0
 8006fe2:	b911      	cbnz	r1, 8006fea <sbrk_aligned+0x12>
 8006fe4:	f000 fca6 	bl	8007934 <_sbrk_r>
 8006fe8:	6030      	str	r0, [r6, #0]
 8006fea:	4621      	mov	r1, r4
 8006fec:	4628      	mov	r0, r5
 8006fee:	f000 fca1 	bl	8007934 <_sbrk_r>
 8006ff2:	1c43      	adds	r3, r0, #1
 8006ff4:	d103      	bne.n	8006ffe <sbrk_aligned+0x26>
 8006ff6:	f04f 34ff 	mov.w	r4, #4294967295
 8006ffa:	4620      	mov	r0, r4
 8006ffc:	bd70      	pop	{r4, r5, r6, pc}
 8006ffe:	1cc4      	adds	r4, r0, #3
 8007000:	f024 0403 	bic.w	r4, r4, #3
 8007004:	42a0      	cmp	r0, r4
 8007006:	d0f8      	beq.n	8006ffa <sbrk_aligned+0x22>
 8007008:	1a21      	subs	r1, r4, r0
 800700a:	4628      	mov	r0, r5
 800700c:	f000 fc92 	bl	8007934 <_sbrk_r>
 8007010:	3001      	adds	r0, #1
 8007012:	d1f2      	bne.n	8006ffa <sbrk_aligned+0x22>
 8007014:	e7ef      	b.n	8006ff6 <sbrk_aligned+0x1e>
 8007016:	bf00      	nop
 8007018:	200004c0 	.word	0x200004c0

0800701c <_malloc_r>:
 800701c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007020:	1ccd      	adds	r5, r1, #3
 8007022:	f025 0503 	bic.w	r5, r5, #3
 8007026:	3508      	adds	r5, #8
 8007028:	2d0c      	cmp	r5, #12
 800702a:	bf38      	it	cc
 800702c:	250c      	movcc	r5, #12
 800702e:	2d00      	cmp	r5, #0
 8007030:	4606      	mov	r6, r0
 8007032:	db01      	blt.n	8007038 <_malloc_r+0x1c>
 8007034:	42a9      	cmp	r1, r5
 8007036:	d904      	bls.n	8007042 <_malloc_r+0x26>
 8007038:	230c      	movs	r3, #12
 800703a:	6033      	str	r3, [r6, #0]
 800703c:	2000      	movs	r0, #0
 800703e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007042:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007118 <_malloc_r+0xfc>
 8007046:	f000 f869 	bl	800711c <__malloc_lock>
 800704a:	f8d8 3000 	ldr.w	r3, [r8]
 800704e:	461c      	mov	r4, r3
 8007050:	bb44      	cbnz	r4, 80070a4 <_malloc_r+0x88>
 8007052:	4629      	mov	r1, r5
 8007054:	4630      	mov	r0, r6
 8007056:	f7ff ffbf 	bl	8006fd8 <sbrk_aligned>
 800705a:	1c43      	adds	r3, r0, #1
 800705c:	4604      	mov	r4, r0
 800705e:	d158      	bne.n	8007112 <_malloc_r+0xf6>
 8007060:	f8d8 4000 	ldr.w	r4, [r8]
 8007064:	4627      	mov	r7, r4
 8007066:	2f00      	cmp	r7, #0
 8007068:	d143      	bne.n	80070f2 <_malloc_r+0xd6>
 800706a:	2c00      	cmp	r4, #0
 800706c:	d04b      	beq.n	8007106 <_malloc_r+0xea>
 800706e:	6823      	ldr	r3, [r4, #0]
 8007070:	4639      	mov	r1, r7
 8007072:	4630      	mov	r0, r6
 8007074:	eb04 0903 	add.w	r9, r4, r3
 8007078:	f000 fc5c 	bl	8007934 <_sbrk_r>
 800707c:	4581      	cmp	r9, r0
 800707e:	d142      	bne.n	8007106 <_malloc_r+0xea>
 8007080:	6821      	ldr	r1, [r4, #0]
 8007082:	1a6d      	subs	r5, r5, r1
 8007084:	4629      	mov	r1, r5
 8007086:	4630      	mov	r0, r6
 8007088:	f7ff ffa6 	bl	8006fd8 <sbrk_aligned>
 800708c:	3001      	adds	r0, #1
 800708e:	d03a      	beq.n	8007106 <_malloc_r+0xea>
 8007090:	6823      	ldr	r3, [r4, #0]
 8007092:	442b      	add	r3, r5
 8007094:	6023      	str	r3, [r4, #0]
 8007096:	f8d8 3000 	ldr.w	r3, [r8]
 800709a:	685a      	ldr	r2, [r3, #4]
 800709c:	bb62      	cbnz	r2, 80070f8 <_malloc_r+0xdc>
 800709e:	f8c8 7000 	str.w	r7, [r8]
 80070a2:	e00f      	b.n	80070c4 <_malloc_r+0xa8>
 80070a4:	6822      	ldr	r2, [r4, #0]
 80070a6:	1b52      	subs	r2, r2, r5
 80070a8:	d420      	bmi.n	80070ec <_malloc_r+0xd0>
 80070aa:	2a0b      	cmp	r2, #11
 80070ac:	d917      	bls.n	80070de <_malloc_r+0xc2>
 80070ae:	1961      	adds	r1, r4, r5
 80070b0:	42a3      	cmp	r3, r4
 80070b2:	6025      	str	r5, [r4, #0]
 80070b4:	bf18      	it	ne
 80070b6:	6059      	strne	r1, [r3, #4]
 80070b8:	6863      	ldr	r3, [r4, #4]
 80070ba:	bf08      	it	eq
 80070bc:	f8c8 1000 	streq.w	r1, [r8]
 80070c0:	5162      	str	r2, [r4, r5]
 80070c2:	604b      	str	r3, [r1, #4]
 80070c4:	4630      	mov	r0, r6
 80070c6:	f000 f82f 	bl	8007128 <__malloc_unlock>
 80070ca:	f104 000b 	add.w	r0, r4, #11
 80070ce:	1d23      	adds	r3, r4, #4
 80070d0:	f020 0007 	bic.w	r0, r0, #7
 80070d4:	1ac2      	subs	r2, r0, r3
 80070d6:	bf1c      	itt	ne
 80070d8:	1a1b      	subne	r3, r3, r0
 80070da:	50a3      	strne	r3, [r4, r2]
 80070dc:	e7af      	b.n	800703e <_malloc_r+0x22>
 80070de:	6862      	ldr	r2, [r4, #4]
 80070e0:	42a3      	cmp	r3, r4
 80070e2:	bf0c      	ite	eq
 80070e4:	f8c8 2000 	streq.w	r2, [r8]
 80070e8:	605a      	strne	r2, [r3, #4]
 80070ea:	e7eb      	b.n	80070c4 <_malloc_r+0xa8>
 80070ec:	4623      	mov	r3, r4
 80070ee:	6864      	ldr	r4, [r4, #4]
 80070f0:	e7ae      	b.n	8007050 <_malloc_r+0x34>
 80070f2:	463c      	mov	r4, r7
 80070f4:	687f      	ldr	r7, [r7, #4]
 80070f6:	e7b6      	b.n	8007066 <_malloc_r+0x4a>
 80070f8:	461a      	mov	r2, r3
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	42a3      	cmp	r3, r4
 80070fe:	d1fb      	bne.n	80070f8 <_malloc_r+0xdc>
 8007100:	2300      	movs	r3, #0
 8007102:	6053      	str	r3, [r2, #4]
 8007104:	e7de      	b.n	80070c4 <_malloc_r+0xa8>
 8007106:	230c      	movs	r3, #12
 8007108:	6033      	str	r3, [r6, #0]
 800710a:	4630      	mov	r0, r6
 800710c:	f000 f80c 	bl	8007128 <__malloc_unlock>
 8007110:	e794      	b.n	800703c <_malloc_r+0x20>
 8007112:	6005      	str	r5, [r0, #0]
 8007114:	e7d6      	b.n	80070c4 <_malloc_r+0xa8>
 8007116:	bf00      	nop
 8007118:	200004c4 	.word	0x200004c4

0800711c <__malloc_lock>:
 800711c:	4801      	ldr	r0, [pc, #4]	@ (8007124 <__malloc_lock+0x8>)
 800711e:	f7ff bf0e 	b.w	8006f3e <__retarget_lock_acquire_recursive>
 8007122:	bf00      	nop
 8007124:	200004bc 	.word	0x200004bc

08007128 <__malloc_unlock>:
 8007128:	4801      	ldr	r0, [pc, #4]	@ (8007130 <__malloc_unlock+0x8>)
 800712a:	f7ff bf09 	b.w	8006f40 <__retarget_lock_release_recursive>
 800712e:	bf00      	nop
 8007130:	200004bc 	.word	0x200004bc

08007134 <__sfputc_r>:
 8007134:	6893      	ldr	r3, [r2, #8]
 8007136:	3b01      	subs	r3, #1
 8007138:	2b00      	cmp	r3, #0
 800713a:	b410      	push	{r4}
 800713c:	6093      	str	r3, [r2, #8]
 800713e:	da08      	bge.n	8007152 <__sfputc_r+0x1e>
 8007140:	6994      	ldr	r4, [r2, #24]
 8007142:	42a3      	cmp	r3, r4
 8007144:	db01      	blt.n	800714a <__sfputc_r+0x16>
 8007146:	290a      	cmp	r1, #10
 8007148:	d103      	bne.n	8007152 <__sfputc_r+0x1e>
 800714a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800714e:	f7ff bde8 	b.w	8006d22 <__swbuf_r>
 8007152:	6813      	ldr	r3, [r2, #0]
 8007154:	1c58      	adds	r0, r3, #1
 8007156:	6010      	str	r0, [r2, #0]
 8007158:	7019      	strb	r1, [r3, #0]
 800715a:	4608      	mov	r0, r1
 800715c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007160:	4770      	bx	lr

08007162 <__sfputs_r>:
 8007162:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007164:	4606      	mov	r6, r0
 8007166:	460f      	mov	r7, r1
 8007168:	4614      	mov	r4, r2
 800716a:	18d5      	adds	r5, r2, r3
 800716c:	42ac      	cmp	r4, r5
 800716e:	d101      	bne.n	8007174 <__sfputs_r+0x12>
 8007170:	2000      	movs	r0, #0
 8007172:	e007      	b.n	8007184 <__sfputs_r+0x22>
 8007174:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007178:	463a      	mov	r2, r7
 800717a:	4630      	mov	r0, r6
 800717c:	f7ff ffda 	bl	8007134 <__sfputc_r>
 8007180:	1c43      	adds	r3, r0, #1
 8007182:	d1f3      	bne.n	800716c <__sfputs_r+0xa>
 8007184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007188 <_vfiprintf_r>:
 8007188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800718c:	460d      	mov	r5, r1
 800718e:	b09d      	sub	sp, #116	@ 0x74
 8007190:	4614      	mov	r4, r2
 8007192:	4698      	mov	r8, r3
 8007194:	4606      	mov	r6, r0
 8007196:	b118      	cbz	r0, 80071a0 <_vfiprintf_r+0x18>
 8007198:	6a03      	ldr	r3, [r0, #32]
 800719a:	b90b      	cbnz	r3, 80071a0 <_vfiprintf_r+0x18>
 800719c:	f7ff fcd8 	bl	8006b50 <__sinit>
 80071a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80071a2:	07d9      	lsls	r1, r3, #31
 80071a4:	d405      	bmi.n	80071b2 <_vfiprintf_r+0x2a>
 80071a6:	89ab      	ldrh	r3, [r5, #12]
 80071a8:	059a      	lsls	r2, r3, #22
 80071aa:	d402      	bmi.n	80071b2 <_vfiprintf_r+0x2a>
 80071ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80071ae:	f7ff fec6 	bl	8006f3e <__retarget_lock_acquire_recursive>
 80071b2:	89ab      	ldrh	r3, [r5, #12]
 80071b4:	071b      	lsls	r3, r3, #28
 80071b6:	d501      	bpl.n	80071bc <_vfiprintf_r+0x34>
 80071b8:	692b      	ldr	r3, [r5, #16]
 80071ba:	b99b      	cbnz	r3, 80071e4 <_vfiprintf_r+0x5c>
 80071bc:	4629      	mov	r1, r5
 80071be:	4630      	mov	r0, r6
 80071c0:	f7ff fdee 	bl	8006da0 <__swsetup_r>
 80071c4:	b170      	cbz	r0, 80071e4 <_vfiprintf_r+0x5c>
 80071c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80071c8:	07dc      	lsls	r4, r3, #31
 80071ca:	d504      	bpl.n	80071d6 <_vfiprintf_r+0x4e>
 80071cc:	f04f 30ff 	mov.w	r0, #4294967295
 80071d0:	b01d      	add	sp, #116	@ 0x74
 80071d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071d6:	89ab      	ldrh	r3, [r5, #12]
 80071d8:	0598      	lsls	r0, r3, #22
 80071da:	d4f7      	bmi.n	80071cc <_vfiprintf_r+0x44>
 80071dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80071de:	f7ff feaf 	bl	8006f40 <__retarget_lock_release_recursive>
 80071e2:	e7f3      	b.n	80071cc <_vfiprintf_r+0x44>
 80071e4:	2300      	movs	r3, #0
 80071e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80071e8:	2320      	movs	r3, #32
 80071ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80071ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80071f2:	2330      	movs	r3, #48	@ 0x30
 80071f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80073a4 <_vfiprintf_r+0x21c>
 80071f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80071fc:	f04f 0901 	mov.w	r9, #1
 8007200:	4623      	mov	r3, r4
 8007202:	469a      	mov	sl, r3
 8007204:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007208:	b10a      	cbz	r2, 800720e <_vfiprintf_r+0x86>
 800720a:	2a25      	cmp	r2, #37	@ 0x25
 800720c:	d1f9      	bne.n	8007202 <_vfiprintf_r+0x7a>
 800720e:	ebba 0b04 	subs.w	fp, sl, r4
 8007212:	d00b      	beq.n	800722c <_vfiprintf_r+0xa4>
 8007214:	465b      	mov	r3, fp
 8007216:	4622      	mov	r2, r4
 8007218:	4629      	mov	r1, r5
 800721a:	4630      	mov	r0, r6
 800721c:	f7ff ffa1 	bl	8007162 <__sfputs_r>
 8007220:	3001      	adds	r0, #1
 8007222:	f000 80a7 	beq.w	8007374 <_vfiprintf_r+0x1ec>
 8007226:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007228:	445a      	add	r2, fp
 800722a:	9209      	str	r2, [sp, #36]	@ 0x24
 800722c:	f89a 3000 	ldrb.w	r3, [sl]
 8007230:	2b00      	cmp	r3, #0
 8007232:	f000 809f 	beq.w	8007374 <_vfiprintf_r+0x1ec>
 8007236:	2300      	movs	r3, #0
 8007238:	f04f 32ff 	mov.w	r2, #4294967295
 800723c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007240:	f10a 0a01 	add.w	sl, sl, #1
 8007244:	9304      	str	r3, [sp, #16]
 8007246:	9307      	str	r3, [sp, #28]
 8007248:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800724c:	931a      	str	r3, [sp, #104]	@ 0x68
 800724e:	4654      	mov	r4, sl
 8007250:	2205      	movs	r2, #5
 8007252:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007256:	4853      	ldr	r0, [pc, #332]	@ (80073a4 <_vfiprintf_r+0x21c>)
 8007258:	f7f8 ffba 	bl	80001d0 <memchr>
 800725c:	9a04      	ldr	r2, [sp, #16]
 800725e:	b9d8      	cbnz	r0, 8007298 <_vfiprintf_r+0x110>
 8007260:	06d1      	lsls	r1, r2, #27
 8007262:	bf44      	itt	mi
 8007264:	2320      	movmi	r3, #32
 8007266:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800726a:	0713      	lsls	r3, r2, #28
 800726c:	bf44      	itt	mi
 800726e:	232b      	movmi	r3, #43	@ 0x2b
 8007270:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007274:	f89a 3000 	ldrb.w	r3, [sl]
 8007278:	2b2a      	cmp	r3, #42	@ 0x2a
 800727a:	d015      	beq.n	80072a8 <_vfiprintf_r+0x120>
 800727c:	9a07      	ldr	r2, [sp, #28]
 800727e:	4654      	mov	r4, sl
 8007280:	2000      	movs	r0, #0
 8007282:	f04f 0c0a 	mov.w	ip, #10
 8007286:	4621      	mov	r1, r4
 8007288:	f811 3b01 	ldrb.w	r3, [r1], #1
 800728c:	3b30      	subs	r3, #48	@ 0x30
 800728e:	2b09      	cmp	r3, #9
 8007290:	d94b      	bls.n	800732a <_vfiprintf_r+0x1a2>
 8007292:	b1b0      	cbz	r0, 80072c2 <_vfiprintf_r+0x13a>
 8007294:	9207      	str	r2, [sp, #28]
 8007296:	e014      	b.n	80072c2 <_vfiprintf_r+0x13a>
 8007298:	eba0 0308 	sub.w	r3, r0, r8
 800729c:	fa09 f303 	lsl.w	r3, r9, r3
 80072a0:	4313      	orrs	r3, r2
 80072a2:	9304      	str	r3, [sp, #16]
 80072a4:	46a2      	mov	sl, r4
 80072a6:	e7d2      	b.n	800724e <_vfiprintf_r+0xc6>
 80072a8:	9b03      	ldr	r3, [sp, #12]
 80072aa:	1d19      	adds	r1, r3, #4
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	9103      	str	r1, [sp, #12]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	bfbb      	ittet	lt
 80072b4:	425b      	neglt	r3, r3
 80072b6:	f042 0202 	orrlt.w	r2, r2, #2
 80072ba:	9307      	strge	r3, [sp, #28]
 80072bc:	9307      	strlt	r3, [sp, #28]
 80072be:	bfb8      	it	lt
 80072c0:	9204      	strlt	r2, [sp, #16]
 80072c2:	7823      	ldrb	r3, [r4, #0]
 80072c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80072c6:	d10a      	bne.n	80072de <_vfiprintf_r+0x156>
 80072c8:	7863      	ldrb	r3, [r4, #1]
 80072ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80072cc:	d132      	bne.n	8007334 <_vfiprintf_r+0x1ac>
 80072ce:	9b03      	ldr	r3, [sp, #12]
 80072d0:	1d1a      	adds	r2, r3, #4
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	9203      	str	r2, [sp, #12]
 80072d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80072da:	3402      	adds	r4, #2
 80072dc:	9305      	str	r3, [sp, #20]
 80072de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80073b4 <_vfiprintf_r+0x22c>
 80072e2:	7821      	ldrb	r1, [r4, #0]
 80072e4:	2203      	movs	r2, #3
 80072e6:	4650      	mov	r0, sl
 80072e8:	f7f8 ff72 	bl	80001d0 <memchr>
 80072ec:	b138      	cbz	r0, 80072fe <_vfiprintf_r+0x176>
 80072ee:	9b04      	ldr	r3, [sp, #16]
 80072f0:	eba0 000a 	sub.w	r0, r0, sl
 80072f4:	2240      	movs	r2, #64	@ 0x40
 80072f6:	4082      	lsls	r2, r0
 80072f8:	4313      	orrs	r3, r2
 80072fa:	3401      	adds	r4, #1
 80072fc:	9304      	str	r3, [sp, #16]
 80072fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007302:	4829      	ldr	r0, [pc, #164]	@ (80073a8 <_vfiprintf_r+0x220>)
 8007304:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007308:	2206      	movs	r2, #6
 800730a:	f7f8 ff61 	bl	80001d0 <memchr>
 800730e:	2800      	cmp	r0, #0
 8007310:	d03f      	beq.n	8007392 <_vfiprintf_r+0x20a>
 8007312:	4b26      	ldr	r3, [pc, #152]	@ (80073ac <_vfiprintf_r+0x224>)
 8007314:	bb1b      	cbnz	r3, 800735e <_vfiprintf_r+0x1d6>
 8007316:	9b03      	ldr	r3, [sp, #12]
 8007318:	3307      	adds	r3, #7
 800731a:	f023 0307 	bic.w	r3, r3, #7
 800731e:	3308      	adds	r3, #8
 8007320:	9303      	str	r3, [sp, #12]
 8007322:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007324:	443b      	add	r3, r7
 8007326:	9309      	str	r3, [sp, #36]	@ 0x24
 8007328:	e76a      	b.n	8007200 <_vfiprintf_r+0x78>
 800732a:	fb0c 3202 	mla	r2, ip, r2, r3
 800732e:	460c      	mov	r4, r1
 8007330:	2001      	movs	r0, #1
 8007332:	e7a8      	b.n	8007286 <_vfiprintf_r+0xfe>
 8007334:	2300      	movs	r3, #0
 8007336:	3401      	adds	r4, #1
 8007338:	9305      	str	r3, [sp, #20]
 800733a:	4619      	mov	r1, r3
 800733c:	f04f 0c0a 	mov.w	ip, #10
 8007340:	4620      	mov	r0, r4
 8007342:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007346:	3a30      	subs	r2, #48	@ 0x30
 8007348:	2a09      	cmp	r2, #9
 800734a:	d903      	bls.n	8007354 <_vfiprintf_r+0x1cc>
 800734c:	2b00      	cmp	r3, #0
 800734e:	d0c6      	beq.n	80072de <_vfiprintf_r+0x156>
 8007350:	9105      	str	r1, [sp, #20]
 8007352:	e7c4      	b.n	80072de <_vfiprintf_r+0x156>
 8007354:	fb0c 2101 	mla	r1, ip, r1, r2
 8007358:	4604      	mov	r4, r0
 800735a:	2301      	movs	r3, #1
 800735c:	e7f0      	b.n	8007340 <_vfiprintf_r+0x1b8>
 800735e:	ab03      	add	r3, sp, #12
 8007360:	9300      	str	r3, [sp, #0]
 8007362:	462a      	mov	r2, r5
 8007364:	4b12      	ldr	r3, [pc, #72]	@ (80073b0 <_vfiprintf_r+0x228>)
 8007366:	a904      	add	r1, sp, #16
 8007368:	4630      	mov	r0, r6
 800736a:	f3af 8000 	nop.w
 800736e:	4607      	mov	r7, r0
 8007370:	1c78      	adds	r0, r7, #1
 8007372:	d1d6      	bne.n	8007322 <_vfiprintf_r+0x19a>
 8007374:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007376:	07d9      	lsls	r1, r3, #31
 8007378:	d405      	bmi.n	8007386 <_vfiprintf_r+0x1fe>
 800737a:	89ab      	ldrh	r3, [r5, #12]
 800737c:	059a      	lsls	r2, r3, #22
 800737e:	d402      	bmi.n	8007386 <_vfiprintf_r+0x1fe>
 8007380:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007382:	f7ff fddd 	bl	8006f40 <__retarget_lock_release_recursive>
 8007386:	89ab      	ldrh	r3, [r5, #12]
 8007388:	065b      	lsls	r3, r3, #25
 800738a:	f53f af1f 	bmi.w	80071cc <_vfiprintf_r+0x44>
 800738e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007390:	e71e      	b.n	80071d0 <_vfiprintf_r+0x48>
 8007392:	ab03      	add	r3, sp, #12
 8007394:	9300      	str	r3, [sp, #0]
 8007396:	462a      	mov	r2, r5
 8007398:	4b05      	ldr	r3, [pc, #20]	@ (80073b0 <_vfiprintf_r+0x228>)
 800739a:	a904      	add	r1, sp, #16
 800739c:	4630      	mov	r0, r6
 800739e:	f000 f879 	bl	8007494 <_printf_i>
 80073a2:	e7e4      	b.n	800736e <_vfiprintf_r+0x1e6>
 80073a4:	080079f8 	.word	0x080079f8
 80073a8:	08007a02 	.word	0x08007a02
 80073ac:	00000000 	.word	0x00000000
 80073b0:	08007163 	.word	0x08007163
 80073b4:	080079fe 	.word	0x080079fe

080073b8 <_printf_common>:
 80073b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073bc:	4616      	mov	r6, r2
 80073be:	4698      	mov	r8, r3
 80073c0:	688a      	ldr	r2, [r1, #8]
 80073c2:	690b      	ldr	r3, [r1, #16]
 80073c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80073c8:	4293      	cmp	r3, r2
 80073ca:	bfb8      	it	lt
 80073cc:	4613      	movlt	r3, r2
 80073ce:	6033      	str	r3, [r6, #0]
 80073d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80073d4:	4607      	mov	r7, r0
 80073d6:	460c      	mov	r4, r1
 80073d8:	b10a      	cbz	r2, 80073de <_printf_common+0x26>
 80073da:	3301      	adds	r3, #1
 80073dc:	6033      	str	r3, [r6, #0]
 80073de:	6823      	ldr	r3, [r4, #0]
 80073e0:	0699      	lsls	r1, r3, #26
 80073e2:	bf42      	ittt	mi
 80073e4:	6833      	ldrmi	r3, [r6, #0]
 80073e6:	3302      	addmi	r3, #2
 80073e8:	6033      	strmi	r3, [r6, #0]
 80073ea:	6825      	ldr	r5, [r4, #0]
 80073ec:	f015 0506 	ands.w	r5, r5, #6
 80073f0:	d106      	bne.n	8007400 <_printf_common+0x48>
 80073f2:	f104 0a19 	add.w	sl, r4, #25
 80073f6:	68e3      	ldr	r3, [r4, #12]
 80073f8:	6832      	ldr	r2, [r6, #0]
 80073fa:	1a9b      	subs	r3, r3, r2
 80073fc:	42ab      	cmp	r3, r5
 80073fe:	dc26      	bgt.n	800744e <_printf_common+0x96>
 8007400:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007404:	6822      	ldr	r2, [r4, #0]
 8007406:	3b00      	subs	r3, #0
 8007408:	bf18      	it	ne
 800740a:	2301      	movne	r3, #1
 800740c:	0692      	lsls	r2, r2, #26
 800740e:	d42b      	bmi.n	8007468 <_printf_common+0xb0>
 8007410:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007414:	4641      	mov	r1, r8
 8007416:	4638      	mov	r0, r7
 8007418:	47c8      	blx	r9
 800741a:	3001      	adds	r0, #1
 800741c:	d01e      	beq.n	800745c <_printf_common+0xa4>
 800741e:	6823      	ldr	r3, [r4, #0]
 8007420:	6922      	ldr	r2, [r4, #16]
 8007422:	f003 0306 	and.w	r3, r3, #6
 8007426:	2b04      	cmp	r3, #4
 8007428:	bf02      	ittt	eq
 800742a:	68e5      	ldreq	r5, [r4, #12]
 800742c:	6833      	ldreq	r3, [r6, #0]
 800742e:	1aed      	subeq	r5, r5, r3
 8007430:	68a3      	ldr	r3, [r4, #8]
 8007432:	bf0c      	ite	eq
 8007434:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007438:	2500      	movne	r5, #0
 800743a:	4293      	cmp	r3, r2
 800743c:	bfc4      	itt	gt
 800743e:	1a9b      	subgt	r3, r3, r2
 8007440:	18ed      	addgt	r5, r5, r3
 8007442:	2600      	movs	r6, #0
 8007444:	341a      	adds	r4, #26
 8007446:	42b5      	cmp	r5, r6
 8007448:	d11a      	bne.n	8007480 <_printf_common+0xc8>
 800744a:	2000      	movs	r0, #0
 800744c:	e008      	b.n	8007460 <_printf_common+0xa8>
 800744e:	2301      	movs	r3, #1
 8007450:	4652      	mov	r2, sl
 8007452:	4641      	mov	r1, r8
 8007454:	4638      	mov	r0, r7
 8007456:	47c8      	blx	r9
 8007458:	3001      	adds	r0, #1
 800745a:	d103      	bne.n	8007464 <_printf_common+0xac>
 800745c:	f04f 30ff 	mov.w	r0, #4294967295
 8007460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007464:	3501      	adds	r5, #1
 8007466:	e7c6      	b.n	80073f6 <_printf_common+0x3e>
 8007468:	18e1      	adds	r1, r4, r3
 800746a:	1c5a      	adds	r2, r3, #1
 800746c:	2030      	movs	r0, #48	@ 0x30
 800746e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007472:	4422      	add	r2, r4
 8007474:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007478:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800747c:	3302      	adds	r3, #2
 800747e:	e7c7      	b.n	8007410 <_printf_common+0x58>
 8007480:	2301      	movs	r3, #1
 8007482:	4622      	mov	r2, r4
 8007484:	4641      	mov	r1, r8
 8007486:	4638      	mov	r0, r7
 8007488:	47c8      	blx	r9
 800748a:	3001      	adds	r0, #1
 800748c:	d0e6      	beq.n	800745c <_printf_common+0xa4>
 800748e:	3601      	adds	r6, #1
 8007490:	e7d9      	b.n	8007446 <_printf_common+0x8e>
	...

08007494 <_printf_i>:
 8007494:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007498:	7e0f      	ldrb	r7, [r1, #24]
 800749a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800749c:	2f78      	cmp	r7, #120	@ 0x78
 800749e:	4691      	mov	r9, r2
 80074a0:	4680      	mov	r8, r0
 80074a2:	460c      	mov	r4, r1
 80074a4:	469a      	mov	sl, r3
 80074a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80074aa:	d807      	bhi.n	80074bc <_printf_i+0x28>
 80074ac:	2f62      	cmp	r7, #98	@ 0x62
 80074ae:	d80a      	bhi.n	80074c6 <_printf_i+0x32>
 80074b0:	2f00      	cmp	r7, #0
 80074b2:	f000 80d2 	beq.w	800765a <_printf_i+0x1c6>
 80074b6:	2f58      	cmp	r7, #88	@ 0x58
 80074b8:	f000 80b9 	beq.w	800762e <_printf_i+0x19a>
 80074bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80074c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80074c4:	e03a      	b.n	800753c <_printf_i+0xa8>
 80074c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80074ca:	2b15      	cmp	r3, #21
 80074cc:	d8f6      	bhi.n	80074bc <_printf_i+0x28>
 80074ce:	a101      	add	r1, pc, #4	@ (adr r1, 80074d4 <_printf_i+0x40>)
 80074d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80074d4:	0800752d 	.word	0x0800752d
 80074d8:	08007541 	.word	0x08007541
 80074dc:	080074bd 	.word	0x080074bd
 80074e0:	080074bd 	.word	0x080074bd
 80074e4:	080074bd 	.word	0x080074bd
 80074e8:	080074bd 	.word	0x080074bd
 80074ec:	08007541 	.word	0x08007541
 80074f0:	080074bd 	.word	0x080074bd
 80074f4:	080074bd 	.word	0x080074bd
 80074f8:	080074bd 	.word	0x080074bd
 80074fc:	080074bd 	.word	0x080074bd
 8007500:	08007641 	.word	0x08007641
 8007504:	0800756b 	.word	0x0800756b
 8007508:	080075fb 	.word	0x080075fb
 800750c:	080074bd 	.word	0x080074bd
 8007510:	080074bd 	.word	0x080074bd
 8007514:	08007663 	.word	0x08007663
 8007518:	080074bd 	.word	0x080074bd
 800751c:	0800756b 	.word	0x0800756b
 8007520:	080074bd 	.word	0x080074bd
 8007524:	080074bd 	.word	0x080074bd
 8007528:	08007603 	.word	0x08007603
 800752c:	6833      	ldr	r3, [r6, #0]
 800752e:	1d1a      	adds	r2, r3, #4
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	6032      	str	r2, [r6, #0]
 8007534:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007538:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800753c:	2301      	movs	r3, #1
 800753e:	e09d      	b.n	800767c <_printf_i+0x1e8>
 8007540:	6833      	ldr	r3, [r6, #0]
 8007542:	6820      	ldr	r0, [r4, #0]
 8007544:	1d19      	adds	r1, r3, #4
 8007546:	6031      	str	r1, [r6, #0]
 8007548:	0606      	lsls	r6, r0, #24
 800754a:	d501      	bpl.n	8007550 <_printf_i+0xbc>
 800754c:	681d      	ldr	r5, [r3, #0]
 800754e:	e003      	b.n	8007558 <_printf_i+0xc4>
 8007550:	0645      	lsls	r5, r0, #25
 8007552:	d5fb      	bpl.n	800754c <_printf_i+0xb8>
 8007554:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007558:	2d00      	cmp	r5, #0
 800755a:	da03      	bge.n	8007564 <_printf_i+0xd0>
 800755c:	232d      	movs	r3, #45	@ 0x2d
 800755e:	426d      	negs	r5, r5
 8007560:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007564:	4859      	ldr	r0, [pc, #356]	@ (80076cc <_printf_i+0x238>)
 8007566:	230a      	movs	r3, #10
 8007568:	e011      	b.n	800758e <_printf_i+0xfa>
 800756a:	6821      	ldr	r1, [r4, #0]
 800756c:	6833      	ldr	r3, [r6, #0]
 800756e:	0608      	lsls	r0, r1, #24
 8007570:	f853 5b04 	ldr.w	r5, [r3], #4
 8007574:	d402      	bmi.n	800757c <_printf_i+0xe8>
 8007576:	0649      	lsls	r1, r1, #25
 8007578:	bf48      	it	mi
 800757a:	b2ad      	uxthmi	r5, r5
 800757c:	2f6f      	cmp	r7, #111	@ 0x6f
 800757e:	4853      	ldr	r0, [pc, #332]	@ (80076cc <_printf_i+0x238>)
 8007580:	6033      	str	r3, [r6, #0]
 8007582:	bf14      	ite	ne
 8007584:	230a      	movne	r3, #10
 8007586:	2308      	moveq	r3, #8
 8007588:	2100      	movs	r1, #0
 800758a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800758e:	6866      	ldr	r6, [r4, #4]
 8007590:	60a6      	str	r6, [r4, #8]
 8007592:	2e00      	cmp	r6, #0
 8007594:	bfa2      	ittt	ge
 8007596:	6821      	ldrge	r1, [r4, #0]
 8007598:	f021 0104 	bicge.w	r1, r1, #4
 800759c:	6021      	strge	r1, [r4, #0]
 800759e:	b90d      	cbnz	r5, 80075a4 <_printf_i+0x110>
 80075a0:	2e00      	cmp	r6, #0
 80075a2:	d04b      	beq.n	800763c <_printf_i+0x1a8>
 80075a4:	4616      	mov	r6, r2
 80075a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80075aa:	fb03 5711 	mls	r7, r3, r1, r5
 80075ae:	5dc7      	ldrb	r7, [r0, r7]
 80075b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80075b4:	462f      	mov	r7, r5
 80075b6:	42bb      	cmp	r3, r7
 80075b8:	460d      	mov	r5, r1
 80075ba:	d9f4      	bls.n	80075a6 <_printf_i+0x112>
 80075bc:	2b08      	cmp	r3, #8
 80075be:	d10b      	bne.n	80075d8 <_printf_i+0x144>
 80075c0:	6823      	ldr	r3, [r4, #0]
 80075c2:	07df      	lsls	r7, r3, #31
 80075c4:	d508      	bpl.n	80075d8 <_printf_i+0x144>
 80075c6:	6923      	ldr	r3, [r4, #16]
 80075c8:	6861      	ldr	r1, [r4, #4]
 80075ca:	4299      	cmp	r1, r3
 80075cc:	bfde      	ittt	le
 80075ce:	2330      	movle	r3, #48	@ 0x30
 80075d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80075d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80075d8:	1b92      	subs	r2, r2, r6
 80075da:	6122      	str	r2, [r4, #16]
 80075dc:	f8cd a000 	str.w	sl, [sp]
 80075e0:	464b      	mov	r3, r9
 80075e2:	aa03      	add	r2, sp, #12
 80075e4:	4621      	mov	r1, r4
 80075e6:	4640      	mov	r0, r8
 80075e8:	f7ff fee6 	bl	80073b8 <_printf_common>
 80075ec:	3001      	adds	r0, #1
 80075ee:	d14a      	bne.n	8007686 <_printf_i+0x1f2>
 80075f0:	f04f 30ff 	mov.w	r0, #4294967295
 80075f4:	b004      	add	sp, #16
 80075f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075fa:	6823      	ldr	r3, [r4, #0]
 80075fc:	f043 0320 	orr.w	r3, r3, #32
 8007600:	6023      	str	r3, [r4, #0]
 8007602:	4833      	ldr	r0, [pc, #204]	@ (80076d0 <_printf_i+0x23c>)
 8007604:	2778      	movs	r7, #120	@ 0x78
 8007606:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800760a:	6823      	ldr	r3, [r4, #0]
 800760c:	6831      	ldr	r1, [r6, #0]
 800760e:	061f      	lsls	r7, r3, #24
 8007610:	f851 5b04 	ldr.w	r5, [r1], #4
 8007614:	d402      	bmi.n	800761c <_printf_i+0x188>
 8007616:	065f      	lsls	r7, r3, #25
 8007618:	bf48      	it	mi
 800761a:	b2ad      	uxthmi	r5, r5
 800761c:	6031      	str	r1, [r6, #0]
 800761e:	07d9      	lsls	r1, r3, #31
 8007620:	bf44      	itt	mi
 8007622:	f043 0320 	orrmi.w	r3, r3, #32
 8007626:	6023      	strmi	r3, [r4, #0]
 8007628:	b11d      	cbz	r5, 8007632 <_printf_i+0x19e>
 800762a:	2310      	movs	r3, #16
 800762c:	e7ac      	b.n	8007588 <_printf_i+0xf4>
 800762e:	4827      	ldr	r0, [pc, #156]	@ (80076cc <_printf_i+0x238>)
 8007630:	e7e9      	b.n	8007606 <_printf_i+0x172>
 8007632:	6823      	ldr	r3, [r4, #0]
 8007634:	f023 0320 	bic.w	r3, r3, #32
 8007638:	6023      	str	r3, [r4, #0]
 800763a:	e7f6      	b.n	800762a <_printf_i+0x196>
 800763c:	4616      	mov	r6, r2
 800763e:	e7bd      	b.n	80075bc <_printf_i+0x128>
 8007640:	6833      	ldr	r3, [r6, #0]
 8007642:	6825      	ldr	r5, [r4, #0]
 8007644:	6961      	ldr	r1, [r4, #20]
 8007646:	1d18      	adds	r0, r3, #4
 8007648:	6030      	str	r0, [r6, #0]
 800764a:	062e      	lsls	r6, r5, #24
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	d501      	bpl.n	8007654 <_printf_i+0x1c0>
 8007650:	6019      	str	r1, [r3, #0]
 8007652:	e002      	b.n	800765a <_printf_i+0x1c6>
 8007654:	0668      	lsls	r0, r5, #25
 8007656:	d5fb      	bpl.n	8007650 <_printf_i+0x1bc>
 8007658:	8019      	strh	r1, [r3, #0]
 800765a:	2300      	movs	r3, #0
 800765c:	6123      	str	r3, [r4, #16]
 800765e:	4616      	mov	r6, r2
 8007660:	e7bc      	b.n	80075dc <_printf_i+0x148>
 8007662:	6833      	ldr	r3, [r6, #0]
 8007664:	1d1a      	adds	r2, r3, #4
 8007666:	6032      	str	r2, [r6, #0]
 8007668:	681e      	ldr	r6, [r3, #0]
 800766a:	6862      	ldr	r2, [r4, #4]
 800766c:	2100      	movs	r1, #0
 800766e:	4630      	mov	r0, r6
 8007670:	f7f8 fdae 	bl	80001d0 <memchr>
 8007674:	b108      	cbz	r0, 800767a <_printf_i+0x1e6>
 8007676:	1b80      	subs	r0, r0, r6
 8007678:	6060      	str	r0, [r4, #4]
 800767a:	6863      	ldr	r3, [r4, #4]
 800767c:	6123      	str	r3, [r4, #16]
 800767e:	2300      	movs	r3, #0
 8007680:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007684:	e7aa      	b.n	80075dc <_printf_i+0x148>
 8007686:	6923      	ldr	r3, [r4, #16]
 8007688:	4632      	mov	r2, r6
 800768a:	4649      	mov	r1, r9
 800768c:	4640      	mov	r0, r8
 800768e:	47d0      	blx	sl
 8007690:	3001      	adds	r0, #1
 8007692:	d0ad      	beq.n	80075f0 <_printf_i+0x15c>
 8007694:	6823      	ldr	r3, [r4, #0]
 8007696:	079b      	lsls	r3, r3, #30
 8007698:	d413      	bmi.n	80076c2 <_printf_i+0x22e>
 800769a:	68e0      	ldr	r0, [r4, #12]
 800769c:	9b03      	ldr	r3, [sp, #12]
 800769e:	4298      	cmp	r0, r3
 80076a0:	bfb8      	it	lt
 80076a2:	4618      	movlt	r0, r3
 80076a4:	e7a6      	b.n	80075f4 <_printf_i+0x160>
 80076a6:	2301      	movs	r3, #1
 80076a8:	4632      	mov	r2, r6
 80076aa:	4649      	mov	r1, r9
 80076ac:	4640      	mov	r0, r8
 80076ae:	47d0      	blx	sl
 80076b0:	3001      	adds	r0, #1
 80076b2:	d09d      	beq.n	80075f0 <_printf_i+0x15c>
 80076b4:	3501      	adds	r5, #1
 80076b6:	68e3      	ldr	r3, [r4, #12]
 80076b8:	9903      	ldr	r1, [sp, #12]
 80076ba:	1a5b      	subs	r3, r3, r1
 80076bc:	42ab      	cmp	r3, r5
 80076be:	dcf2      	bgt.n	80076a6 <_printf_i+0x212>
 80076c0:	e7eb      	b.n	800769a <_printf_i+0x206>
 80076c2:	2500      	movs	r5, #0
 80076c4:	f104 0619 	add.w	r6, r4, #25
 80076c8:	e7f5      	b.n	80076b6 <_printf_i+0x222>
 80076ca:	bf00      	nop
 80076cc:	08007a09 	.word	0x08007a09
 80076d0:	08007a1a 	.word	0x08007a1a

080076d4 <__sflush_r>:
 80076d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80076d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076dc:	0716      	lsls	r6, r2, #28
 80076de:	4605      	mov	r5, r0
 80076e0:	460c      	mov	r4, r1
 80076e2:	d454      	bmi.n	800778e <__sflush_r+0xba>
 80076e4:	684b      	ldr	r3, [r1, #4]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	dc02      	bgt.n	80076f0 <__sflush_r+0x1c>
 80076ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	dd48      	ble.n	8007782 <__sflush_r+0xae>
 80076f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80076f2:	2e00      	cmp	r6, #0
 80076f4:	d045      	beq.n	8007782 <__sflush_r+0xae>
 80076f6:	2300      	movs	r3, #0
 80076f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80076fc:	682f      	ldr	r7, [r5, #0]
 80076fe:	6a21      	ldr	r1, [r4, #32]
 8007700:	602b      	str	r3, [r5, #0]
 8007702:	d030      	beq.n	8007766 <__sflush_r+0x92>
 8007704:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007706:	89a3      	ldrh	r3, [r4, #12]
 8007708:	0759      	lsls	r1, r3, #29
 800770a:	d505      	bpl.n	8007718 <__sflush_r+0x44>
 800770c:	6863      	ldr	r3, [r4, #4]
 800770e:	1ad2      	subs	r2, r2, r3
 8007710:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007712:	b10b      	cbz	r3, 8007718 <__sflush_r+0x44>
 8007714:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007716:	1ad2      	subs	r2, r2, r3
 8007718:	2300      	movs	r3, #0
 800771a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800771c:	6a21      	ldr	r1, [r4, #32]
 800771e:	4628      	mov	r0, r5
 8007720:	47b0      	blx	r6
 8007722:	1c43      	adds	r3, r0, #1
 8007724:	89a3      	ldrh	r3, [r4, #12]
 8007726:	d106      	bne.n	8007736 <__sflush_r+0x62>
 8007728:	6829      	ldr	r1, [r5, #0]
 800772a:	291d      	cmp	r1, #29
 800772c:	d82b      	bhi.n	8007786 <__sflush_r+0xb2>
 800772e:	4a2a      	ldr	r2, [pc, #168]	@ (80077d8 <__sflush_r+0x104>)
 8007730:	410a      	asrs	r2, r1
 8007732:	07d6      	lsls	r6, r2, #31
 8007734:	d427      	bmi.n	8007786 <__sflush_r+0xb2>
 8007736:	2200      	movs	r2, #0
 8007738:	6062      	str	r2, [r4, #4]
 800773a:	04d9      	lsls	r1, r3, #19
 800773c:	6922      	ldr	r2, [r4, #16]
 800773e:	6022      	str	r2, [r4, #0]
 8007740:	d504      	bpl.n	800774c <__sflush_r+0x78>
 8007742:	1c42      	adds	r2, r0, #1
 8007744:	d101      	bne.n	800774a <__sflush_r+0x76>
 8007746:	682b      	ldr	r3, [r5, #0]
 8007748:	b903      	cbnz	r3, 800774c <__sflush_r+0x78>
 800774a:	6560      	str	r0, [r4, #84]	@ 0x54
 800774c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800774e:	602f      	str	r7, [r5, #0]
 8007750:	b1b9      	cbz	r1, 8007782 <__sflush_r+0xae>
 8007752:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007756:	4299      	cmp	r1, r3
 8007758:	d002      	beq.n	8007760 <__sflush_r+0x8c>
 800775a:	4628      	mov	r0, r5
 800775c:	f7ff fbf2 	bl	8006f44 <_free_r>
 8007760:	2300      	movs	r3, #0
 8007762:	6363      	str	r3, [r4, #52]	@ 0x34
 8007764:	e00d      	b.n	8007782 <__sflush_r+0xae>
 8007766:	2301      	movs	r3, #1
 8007768:	4628      	mov	r0, r5
 800776a:	47b0      	blx	r6
 800776c:	4602      	mov	r2, r0
 800776e:	1c50      	adds	r0, r2, #1
 8007770:	d1c9      	bne.n	8007706 <__sflush_r+0x32>
 8007772:	682b      	ldr	r3, [r5, #0]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d0c6      	beq.n	8007706 <__sflush_r+0x32>
 8007778:	2b1d      	cmp	r3, #29
 800777a:	d001      	beq.n	8007780 <__sflush_r+0xac>
 800777c:	2b16      	cmp	r3, #22
 800777e:	d11e      	bne.n	80077be <__sflush_r+0xea>
 8007780:	602f      	str	r7, [r5, #0]
 8007782:	2000      	movs	r0, #0
 8007784:	e022      	b.n	80077cc <__sflush_r+0xf8>
 8007786:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800778a:	b21b      	sxth	r3, r3
 800778c:	e01b      	b.n	80077c6 <__sflush_r+0xf2>
 800778e:	690f      	ldr	r7, [r1, #16]
 8007790:	2f00      	cmp	r7, #0
 8007792:	d0f6      	beq.n	8007782 <__sflush_r+0xae>
 8007794:	0793      	lsls	r3, r2, #30
 8007796:	680e      	ldr	r6, [r1, #0]
 8007798:	bf08      	it	eq
 800779a:	694b      	ldreq	r3, [r1, #20]
 800779c:	600f      	str	r7, [r1, #0]
 800779e:	bf18      	it	ne
 80077a0:	2300      	movne	r3, #0
 80077a2:	eba6 0807 	sub.w	r8, r6, r7
 80077a6:	608b      	str	r3, [r1, #8]
 80077a8:	f1b8 0f00 	cmp.w	r8, #0
 80077ac:	dde9      	ble.n	8007782 <__sflush_r+0xae>
 80077ae:	6a21      	ldr	r1, [r4, #32]
 80077b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80077b2:	4643      	mov	r3, r8
 80077b4:	463a      	mov	r2, r7
 80077b6:	4628      	mov	r0, r5
 80077b8:	47b0      	blx	r6
 80077ba:	2800      	cmp	r0, #0
 80077bc:	dc08      	bgt.n	80077d0 <__sflush_r+0xfc>
 80077be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077c6:	81a3      	strh	r3, [r4, #12]
 80077c8:	f04f 30ff 	mov.w	r0, #4294967295
 80077cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077d0:	4407      	add	r7, r0
 80077d2:	eba8 0800 	sub.w	r8, r8, r0
 80077d6:	e7e7      	b.n	80077a8 <__sflush_r+0xd4>
 80077d8:	dfbffffe 	.word	0xdfbffffe

080077dc <_fflush_r>:
 80077dc:	b538      	push	{r3, r4, r5, lr}
 80077de:	690b      	ldr	r3, [r1, #16]
 80077e0:	4605      	mov	r5, r0
 80077e2:	460c      	mov	r4, r1
 80077e4:	b913      	cbnz	r3, 80077ec <_fflush_r+0x10>
 80077e6:	2500      	movs	r5, #0
 80077e8:	4628      	mov	r0, r5
 80077ea:	bd38      	pop	{r3, r4, r5, pc}
 80077ec:	b118      	cbz	r0, 80077f6 <_fflush_r+0x1a>
 80077ee:	6a03      	ldr	r3, [r0, #32]
 80077f0:	b90b      	cbnz	r3, 80077f6 <_fflush_r+0x1a>
 80077f2:	f7ff f9ad 	bl	8006b50 <__sinit>
 80077f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d0f3      	beq.n	80077e6 <_fflush_r+0xa>
 80077fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007800:	07d0      	lsls	r0, r2, #31
 8007802:	d404      	bmi.n	800780e <_fflush_r+0x32>
 8007804:	0599      	lsls	r1, r3, #22
 8007806:	d402      	bmi.n	800780e <_fflush_r+0x32>
 8007808:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800780a:	f7ff fb98 	bl	8006f3e <__retarget_lock_acquire_recursive>
 800780e:	4628      	mov	r0, r5
 8007810:	4621      	mov	r1, r4
 8007812:	f7ff ff5f 	bl	80076d4 <__sflush_r>
 8007816:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007818:	07da      	lsls	r2, r3, #31
 800781a:	4605      	mov	r5, r0
 800781c:	d4e4      	bmi.n	80077e8 <_fflush_r+0xc>
 800781e:	89a3      	ldrh	r3, [r4, #12]
 8007820:	059b      	lsls	r3, r3, #22
 8007822:	d4e1      	bmi.n	80077e8 <_fflush_r+0xc>
 8007824:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007826:	f7ff fb8b 	bl	8006f40 <__retarget_lock_release_recursive>
 800782a:	e7dd      	b.n	80077e8 <_fflush_r+0xc>

0800782c <__swhatbuf_r>:
 800782c:	b570      	push	{r4, r5, r6, lr}
 800782e:	460c      	mov	r4, r1
 8007830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007834:	2900      	cmp	r1, #0
 8007836:	b096      	sub	sp, #88	@ 0x58
 8007838:	4615      	mov	r5, r2
 800783a:	461e      	mov	r6, r3
 800783c:	da0d      	bge.n	800785a <__swhatbuf_r+0x2e>
 800783e:	89a3      	ldrh	r3, [r4, #12]
 8007840:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007844:	f04f 0100 	mov.w	r1, #0
 8007848:	bf14      	ite	ne
 800784a:	2340      	movne	r3, #64	@ 0x40
 800784c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007850:	2000      	movs	r0, #0
 8007852:	6031      	str	r1, [r6, #0]
 8007854:	602b      	str	r3, [r5, #0]
 8007856:	b016      	add	sp, #88	@ 0x58
 8007858:	bd70      	pop	{r4, r5, r6, pc}
 800785a:	466a      	mov	r2, sp
 800785c:	f000 f848 	bl	80078f0 <_fstat_r>
 8007860:	2800      	cmp	r0, #0
 8007862:	dbec      	blt.n	800783e <__swhatbuf_r+0x12>
 8007864:	9901      	ldr	r1, [sp, #4]
 8007866:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800786a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800786e:	4259      	negs	r1, r3
 8007870:	4159      	adcs	r1, r3
 8007872:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007876:	e7eb      	b.n	8007850 <__swhatbuf_r+0x24>

08007878 <__smakebuf_r>:
 8007878:	898b      	ldrh	r3, [r1, #12]
 800787a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800787c:	079d      	lsls	r5, r3, #30
 800787e:	4606      	mov	r6, r0
 8007880:	460c      	mov	r4, r1
 8007882:	d507      	bpl.n	8007894 <__smakebuf_r+0x1c>
 8007884:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007888:	6023      	str	r3, [r4, #0]
 800788a:	6123      	str	r3, [r4, #16]
 800788c:	2301      	movs	r3, #1
 800788e:	6163      	str	r3, [r4, #20]
 8007890:	b003      	add	sp, #12
 8007892:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007894:	ab01      	add	r3, sp, #4
 8007896:	466a      	mov	r2, sp
 8007898:	f7ff ffc8 	bl	800782c <__swhatbuf_r>
 800789c:	9f00      	ldr	r7, [sp, #0]
 800789e:	4605      	mov	r5, r0
 80078a0:	4639      	mov	r1, r7
 80078a2:	4630      	mov	r0, r6
 80078a4:	f7ff fbba 	bl	800701c <_malloc_r>
 80078a8:	b948      	cbnz	r0, 80078be <__smakebuf_r+0x46>
 80078aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078ae:	059a      	lsls	r2, r3, #22
 80078b0:	d4ee      	bmi.n	8007890 <__smakebuf_r+0x18>
 80078b2:	f023 0303 	bic.w	r3, r3, #3
 80078b6:	f043 0302 	orr.w	r3, r3, #2
 80078ba:	81a3      	strh	r3, [r4, #12]
 80078bc:	e7e2      	b.n	8007884 <__smakebuf_r+0xc>
 80078be:	89a3      	ldrh	r3, [r4, #12]
 80078c0:	6020      	str	r0, [r4, #0]
 80078c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078c6:	81a3      	strh	r3, [r4, #12]
 80078c8:	9b01      	ldr	r3, [sp, #4]
 80078ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80078ce:	b15b      	cbz	r3, 80078e8 <__smakebuf_r+0x70>
 80078d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078d4:	4630      	mov	r0, r6
 80078d6:	f000 f81d 	bl	8007914 <_isatty_r>
 80078da:	b128      	cbz	r0, 80078e8 <__smakebuf_r+0x70>
 80078dc:	89a3      	ldrh	r3, [r4, #12]
 80078de:	f023 0303 	bic.w	r3, r3, #3
 80078e2:	f043 0301 	orr.w	r3, r3, #1
 80078e6:	81a3      	strh	r3, [r4, #12]
 80078e8:	89a3      	ldrh	r3, [r4, #12]
 80078ea:	431d      	orrs	r5, r3
 80078ec:	81a5      	strh	r5, [r4, #12]
 80078ee:	e7cf      	b.n	8007890 <__smakebuf_r+0x18>

080078f0 <_fstat_r>:
 80078f0:	b538      	push	{r3, r4, r5, lr}
 80078f2:	4d07      	ldr	r5, [pc, #28]	@ (8007910 <_fstat_r+0x20>)
 80078f4:	2300      	movs	r3, #0
 80078f6:	4604      	mov	r4, r0
 80078f8:	4608      	mov	r0, r1
 80078fa:	4611      	mov	r1, r2
 80078fc:	602b      	str	r3, [r5, #0]
 80078fe:	f7f9 fc42 	bl	8001186 <_fstat>
 8007902:	1c43      	adds	r3, r0, #1
 8007904:	d102      	bne.n	800790c <_fstat_r+0x1c>
 8007906:	682b      	ldr	r3, [r5, #0]
 8007908:	b103      	cbz	r3, 800790c <_fstat_r+0x1c>
 800790a:	6023      	str	r3, [r4, #0]
 800790c:	bd38      	pop	{r3, r4, r5, pc}
 800790e:	bf00      	nop
 8007910:	200004b8 	.word	0x200004b8

08007914 <_isatty_r>:
 8007914:	b538      	push	{r3, r4, r5, lr}
 8007916:	4d06      	ldr	r5, [pc, #24]	@ (8007930 <_isatty_r+0x1c>)
 8007918:	2300      	movs	r3, #0
 800791a:	4604      	mov	r4, r0
 800791c:	4608      	mov	r0, r1
 800791e:	602b      	str	r3, [r5, #0]
 8007920:	f7f9 fc41 	bl	80011a6 <_isatty>
 8007924:	1c43      	adds	r3, r0, #1
 8007926:	d102      	bne.n	800792e <_isatty_r+0x1a>
 8007928:	682b      	ldr	r3, [r5, #0]
 800792a:	b103      	cbz	r3, 800792e <_isatty_r+0x1a>
 800792c:	6023      	str	r3, [r4, #0]
 800792e:	bd38      	pop	{r3, r4, r5, pc}
 8007930:	200004b8 	.word	0x200004b8

08007934 <_sbrk_r>:
 8007934:	b538      	push	{r3, r4, r5, lr}
 8007936:	4d06      	ldr	r5, [pc, #24]	@ (8007950 <_sbrk_r+0x1c>)
 8007938:	2300      	movs	r3, #0
 800793a:	4604      	mov	r4, r0
 800793c:	4608      	mov	r0, r1
 800793e:	602b      	str	r3, [r5, #0]
 8007940:	f7f9 fc4a 	bl	80011d8 <_sbrk>
 8007944:	1c43      	adds	r3, r0, #1
 8007946:	d102      	bne.n	800794e <_sbrk_r+0x1a>
 8007948:	682b      	ldr	r3, [r5, #0]
 800794a:	b103      	cbz	r3, 800794e <_sbrk_r+0x1a>
 800794c:	6023      	str	r3, [r4, #0]
 800794e:	bd38      	pop	{r3, r4, r5, pc}
 8007950:	200004b8 	.word	0x200004b8

08007954 <_init>:
 8007954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007956:	bf00      	nop
 8007958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800795a:	bc08      	pop	{r3}
 800795c:	469e      	mov	lr, r3
 800795e:	4770      	bx	lr

08007960 <_fini>:
 8007960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007962:	bf00      	nop
 8007964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007966:	bc08      	pop	{r3}
 8007968:	469e      	mov	lr, r3
 800796a:	4770      	bx	lr
